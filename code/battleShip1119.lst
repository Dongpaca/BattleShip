Interrupt Vectors
00000 940C 01A5 JMP	__start|__text_start
...
00004 940C 1400 JMP	_po_down_on         
...
00014 940C 144B JMP	_timer2_ovf         
Program Code (text area)
_GLCD_Rectangle:
  j                    --> R10
  a                    --> R20
  b                    --> R22
  y                    --> R14
  x                    --> R12
    001C8 940E 46C8 CALL	push_xgsetF0FC
    001CA 2EE2      MOV	R14,R18
    001CB 2EC0      MOV	R12,R16
    001CC 9721      SBIW	R28,1
    001CD 856B      LDD	R22,Y+11
    001CE 854D      LDD	R20,Y+13
FILE: C:\Users\EE-01\Desktop\ÃÖÃÖÁ¾\graphic.h
(0001) extern void GLCD_SetPixel(char x, char y, char color);
(0002) 
(0003) unsigned char color = 1;
(0004) 
(0005) 
(0006) void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
(0007) {
(0008)   unsigned char j; // zmienna pomocnicza
(0009)   // rysowanie linii pionowych (boki)
(0010)   for (j = 0; j < a; j++) {
    001CF 24AA      CLR	R10
    001D0 C011      RJMP	0x01E2
(0011) 		GLCD_SetPixel(x, y + j, color);
    001D1 9020 0100 LDS	R2,color
    001D3 8228      ST	Y,R2
    001D4 2D2E      MOV	R18,R14
    001D5 0D2A      ADD	R18,R10
    001D6 2D0C      MOV	R16,R12
    001D7 D259      RCALL	_GLCD_SetPixel
(0012) 		GLCD_SetPixel(x + b - 1, y + j, color);
    001D8 9020 0100 LDS	R2,color
    001DA 8228      ST	Y,R2
    001DB 2D2E      MOV	R18,R14
    001DC 0D2A      ADD	R18,R10
    001DD 2D0C      MOV	R16,R12
    001DE 0F06      ADD	R16,R22
    001DF 5001      SUBI	R16,1
    001E0 D250      RCALL	_GLCD_SetPixel
(0013) 	}
    001E1 94A3      INC	R10
    001E2 16A4      CP	R10,R20
    001E3 F368      BCS	0x01D1
(0014)   // rysowanie linii poziomych (podstawy)
(0015)   for (j = 0; j < b; j++)	{
    001E4 24AA      CLR	R10
    001E5 C011      RJMP	0x01F7
(0016) 		GLCD_SetPixel(x + j, y, color);
    001E6 9020 0100 LDS	R2,color
    001E8 8228      ST	Y,R2
    001E9 2D2E      MOV	R18,R14
    001EA 2D0C      MOV	R16,R12
    001EB 0D0A      ADD	R16,R10
    001EC D244      RCALL	_GLCD_SetPixel
(0017) 		GLCD_SetPixel(x + j, y + a - 1, color);
    001ED 9020 0100 LDS	R2,color
    001EF 8228      ST	Y,R2
    001F0 2D2E      MOV	R18,R14
    001F1 0F24      ADD	R18,R20
    001F2 5021      SUBI	R18,1
    001F3 2D0C      MOV	R16,R12
    001F4 0D0A      ADD	R16,R10
    001F5 D23B      RCALL	_GLCD_SetPixel
(0018) 	}
    001F6 94A3      INC	R10
    001F7 16A6      CP	R10,R22
    001F8 F368      BCS	0x01E6
    001F9 9621      ADIW	R28,1
    001FA 940C 46BD JMP	pop_xgsetF0FC
_GLCD_Circle:
  ychange              --> R12
  xchange              --> R14
  radiusError          --> R10
  x                    --> R20
  y                    --> R22
  radius               --> R10
  cy                   --> Y,+13
  cx                   --> Y,+11
    001FC 940E 45B3 CALL	push_arg4
    001FE 940E 46C8 CALL	push_xgsetF0FC
    00200 9721      SBIW	R28,1
    00201 84AF      LDD	R10,Y+15
(0019) }
(0020) 
(0021) 
(0022) void GLCD_Circle(unsigned char cx, unsigned char cy ,unsigned char radius)
(0023) {
(0024) int x, y, xchange, ychange, radiusError;
(0025) x = radius;
    00202 2D4A      MOV	R20,R10
    00203 2755      CLR	R21
(0026) y = 0;
    00204 2766      CLR	R22
    00205 2777      CLR	R23
(0027) xchange = 1 - 2 * radius;
    00206 2C2A      MOV	R2,R10
    00207 2433      CLR	R3
    00208 0C22      LSL	R2
    00209 1C33      ROL	R3
    0020A E081      LDI	R24,1
    0020B E090      LDI	R25,0
    0020C 017C      MOVW	R14,R24
    0020D 18E2      SUB	R14,R2
    0020E 08F3      SBC	R15,R3
(0028) ychange = 1;
    0020F 016C      MOVW	R12,R24
(0029) radiusError = 0;
    00210 24AA      CLR	R10
    00211 24BB      CLR	R11
    00212 C078      RJMP	0x028B
(0030) while(x >= y)
(0031)   {
(0032)   GLCD_SetPixel(cx+x, cy+y, color);
    00213 9020 0100 LDS	R2,color
    00215 8228      ST	Y,R2
    00216 852D      LDD	R18,Y+13
    00217 2733      CLR	R19
    00218 0F26      ADD	R18,R22
    00219 1F37      ADC	R19,R23
    0021A 850B      LDD	R16,Y+11
    0021B 2711      CLR	R17
    0021C 0F04      ADD	R16,R20
    0021D 1F15      ADC	R17,R21
    0021E D212      RCALL	_GLCD_SetPixel
(0033)   GLCD_SetPixel(cx-x, cy+y, color);
    0021F 9020 0100 LDS	R2,color
    00221 8228      ST	Y,R2
    00222 852D      LDD	R18,Y+13
    00223 2733      CLR	R19
    00224 0F26      ADD	R18,R22
    00225 1F37      ADC	R19,R23
    00226 850B      LDD	R16,Y+11
    00227 2711      CLR	R17
    00228 1B04      SUB	R16,R20
    00229 0B15      SBC	R17,R21
    0022A D206      RCALL	_GLCD_SetPixel
(0034)   GLCD_SetPixel(cx-x, cy-y, color);
    0022B 9020 0100 LDS	R2,color
    0022D 8228      ST	Y,R2
    0022E 852D      LDD	R18,Y+13
    0022F 2733      CLR	R19
    00230 1B26      SUB	R18,R22
    00231 0B37      SBC	R19,R23
    00232 850B      LDD	R16,Y+11
    00233 2711      CLR	R17
    00234 1B04      SUB	R16,R20
    00235 0B15      SBC	R17,R21
    00236 D1FA      RCALL	_GLCD_SetPixel
(0035)   GLCD_SetPixel(cx+x, cy-y, color);
    00237 9020 0100 LDS	R2,color
    00239 8228      ST	Y,R2
    0023A 852D      LDD	R18,Y+13
    0023B 2733      CLR	R19
    0023C 1B26      SUB	R18,R22
    0023D 0B37      SBC	R19,R23
    0023E 850B      LDD	R16,Y+11
    0023F 2711      CLR	R17
    00240 0F04      ADD	R16,R20
    00241 1F15      ADC	R17,R21
    00242 D1EE      RCALL	_GLCD_SetPixel
(0036)   GLCD_SetPixel(cx+y, cy+x, color);
    00243 9020 0100 LDS	R2,color
    00245 8228      ST	Y,R2
    00246 852D      LDD	R18,Y+13
    00247 2733      CLR	R19
    00248 0F24      ADD	R18,R20
    00249 1F35      ADC	R19,R21
    0024A 850B      LDD	R16,Y+11
    0024B 2711      CLR	R17
    0024C 0F06      ADD	R16,R22
    0024D 1F17      ADC	R17,R23
    0024E D1E2      RCALL	_GLCD_SetPixel
(0037)   GLCD_SetPixel(cx-y, cy+x, color);
    0024F 9020 0100 LDS	R2,color
    00251 8228      ST	Y,R2
    00252 852D      LDD	R18,Y+13
    00253 2733      CLR	R19
    00254 0F24      ADD	R18,R20
    00255 1F35      ADC	R19,R21
    00256 850B      LDD	R16,Y+11
    00257 2711      CLR	R17
    00258 1B06      SUB	R16,R22
    00259 0B17      SBC	R17,R23
    0025A D1D6      RCALL	_GLCD_SetPixel
(0038)   GLCD_SetPixel(cx-y, cy-x, color);
    0025B 9020 0100 LDS	R2,color
    0025D 8228      ST	Y,R2
    0025E 852D      LDD	R18,Y+13
    0025F 2733      CLR	R19
    00260 1B24      SUB	R18,R20
    00261 0B35      SBC	R19,R21
    00262 850B      LDD	R16,Y+11
    00263 2711      CLR	R17
    00264 1B06      SUB	R16,R22
    00265 0B17      SBC	R17,R23
    00266 D1CA      RCALL	_GLCD_SetPixel
(0039)   GLCD_SetPixel(cx+y, cy-x, color);
    00267 9020 0100 LDS	R2,color
    00269 8228      ST	Y,R2
    0026A 852D      LDD	R18,Y+13
    0026B 2733      CLR	R19
    0026C 1B24      SUB	R18,R20
    0026D 0B35      SBC	R19,R21
    0026E 850B      LDD	R16,Y+11
    0026F 2711      CLR	R17
    00270 0F06      ADD	R16,R22
    00271 1F17      ADC	R17,R23
    00272 D1BE      RCALL	_GLCD_SetPixel
(0040)   y++;
    00273 5F6F      SUBI	R22,0xFF
    00274 4F7F      SBCI	R23,0xFF
(0041)   radiusError += ychange;
    00275 0CAC      ADD	R10,R12
    00276 1CBD      ADC	R11,R13
(0042)   ychange += 2;
    00277 01C6      MOVW	R24,R12
    00278 9602      ADIW	R24,2
    00279 016C      MOVW	R12,R24
(0043)   if ( 2*radiusError + xchange > 0 )
    0027A 0115      MOVW	R2,R10
    0027B 0C22      LSL	R2
    0027C 1C33      ROL	R3
    0027D 0C2E      ADD	R2,R14
    0027E 1C3F      ADC	R3,R15
    0027F 2444      CLR	R4
    00280 2455      CLR	R5
    00281 1442      CP	R4,R2
    00282 0453      CPC	R5,R3
    00283 F43C      BGE	0x028B
(0044)     {
(0045)     x--;
    00284 5041      SUBI	R20,1
    00285 4050      SBCI	R21,0
(0046) 	radiusError += xchange;
    00286 0CAE      ADD	R10,R14
    00287 1CBF      ADC	R11,R15
(0047) 	xchange += 2;
    00288 01C7      MOVW	R24,R14
    00289 9602      ADIW	R24,2
    0028A 017C      MOVW	R14,R24
(0048) 	}
(0049)   }
    0028B 1746      CP	R20,R22
    0028C 0757      CPC	R21,R23
    0028D F00C      BLT	0x028F
    0028E CF84      RJMP	0x0213
    0028F 9621      ADIW	R28,1
    00290 940E 46BD CALL	pop_xgsetF0FC
    00292 9624      ADIW	R28,4
    00293 9508      RET
_GLCD_Line:
  Yinc                 --> R22
  Xinc                 --> R20
  TwoDy                --> Y,+7
  TwoDx                --> Y,+5
  TwoDyAccumulatedError --> R14
  TwoDxAccumulatedError --> R14
  Dy                   --> Y,+3
  Dx                   --> Y,+1
  CurrentY             --> R12
  CurrentX             --> R10
  Y2                   --> Y,+25
  X2                   --> Y,+23
  Y1                   --> R14
  X1                   --> Y,+19
    00294 940E 45B3 CALL	push_arg4
    00296 940E 46C8 CALL	push_xgsetF0FC
    00298 0179      MOVW	R14,R18
    00299 9729      SBIW	R28,0x9
(0050) }
(0051) 
(0052) 
(0053) void GLCD_Line(int X1, int Y1,int X2,int Y2)
(0054) {
(0055) int CurrentX, CurrentY, Xinc, Yinc,
(0056)     Dx, Dy, TwoDx, TwoDy,
(0057) 	TwoDxAccumulatedError, TwoDyAccumulatedError;
(0058) 
(0059) Dx = (X2-X1); // obliczenie sk©øadowej poziomej
    0029A 882F      LDD	R2,Y+23
    0029B 8C38      LDD	R3,Y+24
    0029C 880B      LDD	R0,Y+19
    0029D 881C      LDD	R1,Y+20
    0029E 1820      SUB	R2,R0
    0029F 0831      SBC	R3,R1
    002A0 823A      STD	Y+2,R3
    002A1 8229      STD	Y+1,R2
(0060) Dy = (Y2-Y1); // obliczenie sk©øadowej pionowej
    002A2 8C29      LDD	R2,Y+25
    002A3 8C3A      LDD	R3,Y+26
    002A4 182E      SUB	R2,R14
    002A5 083F      SBC	R3,R15
    002A6 823C      STD	Y+4,R3
    002A7 822B      STD	Y+3,R2
(0061) 
(0062) TwoDx = Dx + Dx; // podwojona sk©øadowa pozioma
    002A8 8029      LDD	R2,Y+1
    002A9 803A      LDD	R3,Y+2
    002AA 0101      MOVW	R0,R2
    002AB 0C20      ADD	R2,R0
    002AC 1C31      ADC	R3,R1
    002AD 823E      STD	Y+6,R3
    002AE 822D      STD	Y+5,R2
(0063) TwoDy = Dy + Dy; // podwojona sk©øadowa pionowa
    002AF 802B      LDD	R2,Y+3
    002B0 803C      LDD	R3,Y+4
    002B1 0101      MOVW	R0,R2
    002B2 0C20      ADD	R2,R0
    002B3 1C31      ADC	R3,R1
    002B4 8638      STD	Y+8,R3
    002B5 822F      STD	Y+7,R2
(0064) 
(0065) CurrentX = X1; // zaczynamy od X1
    002B6 88AB      LDD	R10,Y+19
    002B7 88BC      LDD	R11,Y+20
(0066) CurrentY = Y1; // oraz Y1
    002B8 0167      MOVW	R12,R14
(0067) 
(0068) Xinc = 1; // ustalamy krok zwi?szania pozycji w poziomie
    002B9 E041      LDI	R20,1
    002BA E050      LDI	R21,0
(0069) Yinc = 1; // ustalamy krok zwi?szania pozycji w pionie
    002BB E061      LDI	R22,1
    002BC E070      LDI	R23,0
(0070) 
(0071) if(Dx < 0) // jesli sk©øadowa pozioma jest ujemna
    002BD 8189      LDD	R24,Y+1
    002BE 819A      LDD	R25,Y+2
    002BF 3080      CPI	R24,0
    002C0 E0E0      LDI	R30,0
    002C1 079E      CPC	R25,R30
    002C2 F484      BGE	0x02D3
(0072)   {
(0073)   Xinc = -1; // to b?ziemy si?"cofa? (krok ujemny)
    002C3 EF4F      LDI	R20,0xFF
    002C4 EF5F      LDI	R21,0xFF
(0074)   Dx = -Dx;  // zmieniamy znak sk©øadowej na dodatni
    002C5 9580      COM	R24
    002C6 9590      COM	R25
    002C7 5F8F      SUBI	R24,0xFF
    002C8 4F9F      SBCI	R25,0xFF
    002C9 839A      STD	Y+2,R25
    002CA 8389      STD	Y+1,R24
(0075)   TwoDx = -TwoDx; // jak r?nie?podwojonej sk©øadowej
    002CB 818D      LDD	R24,Y+5
    002CC 819E      LDD	R25,Y+6
    002CD 9580      COM	R24
    002CE 9590      COM	R25
    002CF 5F8F      SUBI	R24,0xFF
    002D0 4F9F      SBCI	R25,0xFF
    002D1 839E      STD	Y+6,R25
    002D2 838D      STD	Y+5,R24
(0076)   }
(0077) 
(0078) if (Dy < 0) // je©«li sk©øadowa pionowa jest ujemna
    002D3 818B      LDD	R24,Y+3
    002D4 819C      LDD	R25,Y+4
    002D5 3080      CPI	R24,0
    002D6 E0E0      LDI	R30,0
    002D7 079E      CPC	R25,R30
    002D8 F484      BGE	0x02E9
(0079)   {
(0080)   Yinc = -1; // to b?ziemy si?"cofa? (krok ujemny)
    002D9 EF6F      LDI	R22,0xFF
    002DA EF7F      LDI	R23,0xFF
(0081)   Dy = -Dy; // zmieniamy znak sk©øadowej na dodatki
    002DB 9580      COM	R24
    002DC 9590      COM	R25
    002DD 5F8F      SUBI	R24,0xFF
    002DE 4F9F      SBCI	R25,0xFF
    002DF 839C      STD	Y+4,R25
    002E0 838B      STD	Y+3,R24
(0082)   TwoDy = -TwoDy; // jak r?niez podwojonej sk©øadowej
    002E1 818F      LDD	R24,Y+7
    002E2 8598      LDD	R25,Y+8
    002E3 9580      COM	R24
    002E4 9590      COM	R25
    002E5 5F8F      SUBI	R24,0xFF
    002E6 4F9F      SBCI	R25,0xFF
    002E7 8798      STD	Y+8,R25
    002E8 838F      STD	Y+7,R24
(0083)   }
(0084) 
(0085) GLCD_SetPixel(X1,Y1, color); // stawiamy pierwszy krok (zapalamy pierwszy piksel)
    002E9 9020 0100 LDS	R2,color
    002EB 8228      ST	Y,R2
    002EC 2D2E      MOV	R18,R14
    002ED 890B      LDD	R16,Y+19
    002EE 891C      LDD	R17,Y+20
    002EF D141      RCALL	_GLCD_SetPixel
(0086) 
(0087) if ((Dx != 0) || (Dy != 0)) // sprawdzamy czy linia sk©øada si?z wi?ej ni?jednego punktu ;)
    002F0 8009      LDD	R0,Y+1
    002F1 801A      LDD	R1,Y+2
    002F2 2000      TST	R0
    002F3 F449      BNE	0x02FD
    002F4 2011      TST	R1
    002F5 F439      BNE	0x02FD
    002F6 800B      LDD	R0,Y+3
    002F7 801C      LDD	R1,Y+4
    002F8 2000      TST	R0
    002F9 F419      BNE	0x02FD
    002FA 2011      TST	R1
    002FB F409      BNE	0x02FD
    002FC C044      RJMP	0x0341
(0088)   {
(0089)   // sprawdzamy czy sk©øadowa pionowa jest mniejsza lub r?na sk©øadowej poziomej
(0090)   if (Dy <= Dx) // je©«li tak, to idziemy "po iksach"
    002FD 8009      LDD	R0,Y+1
    002FE 801A      LDD	R1,Y+2
    002FF 810B      LDD	R16,Y+3
    00300 811C      LDD	R17,Y+4
    00301 1600      CP	R0,R16
    00302 0611      CPC	R1,R17
    00303 F0FC      BLT	0x0323
(0091)     {
(0092)     TwoDxAccumulatedError = 0; // zerujemy zmienn?
    00304 24EE      CLR	R14
    00305 24FF      CLR	R15
(0093)     do // ruszamy w drog?
(0094) 	  {
(0095)       CurrentX += Xinc; // do aktualnej pozycji dodajemy krok
    00306 0EA4      ADD	R10,R20
    00307 1EB5      ADC	R11,R21
(0096)       TwoDxAccumulatedError += TwoDy; // a tu dodajemy podwojon?sk©øadow?pionow?
    00308 800F      LDD	R0,Y+7
    00309 8418      LDD	R1,Y+8
    0030A 0CE0      ADD	R14,R0
    0030B 1CF1      ADC	R15,R1
(0097)       if(TwoDxAccumulatedError > Dx)  // je©«li TwoDxAccumulatedError jest wi?szy od Dx
    0030C 8009      LDD	R0,Y+1
    0030D 801A      LDD	R1,Y+2
    0030E 140E      CP	R0,R14
    0030F 041F      CPC	R1,R15
    00310 F434      BGE	0x0317
(0098)         {
(0099)         CurrentY += Yinc; // zwi?szamy aktualn?pozycj?w pionie
    00311 0EC6      ADD	R12,R22
    00312 1ED7      ADC	R13,R23
(0100)         TwoDxAccumulatedError -= TwoDx; // i odejmujemy TwoDx
    00313 800D      LDD	R0,Y+5
    00314 801E      LDD	R1,Y+6
    00315 18E0      SUB	R14,R0
    00316 08F1      SBC	R15,R1
(0101)         }
(0102)        GLCD_SetPixel(CurrentX,CurrentY, color);// stawiamy nast?ny krok (zapalamy piksel)
    00317 9020 0100 LDS	R2,color
    00319 8228      ST	Y,R2
    0031A 2D2C      MOV	R18,R12
    0031B 2D0A      MOV	R16,R10
    0031C D114      RCALL	_GLCD_SetPixel
(0103)        }while (CurrentX != X2); // idziemy tak d©øugo, a?osi©ögniemy punkt docelowy
    0031D 880F      LDD	R0,Y+23
    0031E 8C18      LDD	R1,Y+24
    0031F 14A0      CP	R10,R0
    00320 04B1      CPC	R11,R1
    00321 F721      BNE	0x0306
(0104)      }
    00322 C01E      RJMP	0x0341
(0105)    else // w przeciwnym razie idziemy "po igrekach"
(0106)       {
(0107)       TwoDyAccumulatedError = 0;
    00323 24EE      CLR	R14
    00324 24FF      CLR	R15
(0108)       do
(0109) 	    {
(0110)         CurrentY += Yinc;
    00325 0EC6      ADD	R12,R22
    00326 1ED7      ADC	R13,R23
(0111)         TwoDyAccumulatedError += TwoDx;
    00327 800D      LDD	R0,Y+5
    00328 801E      LDD	R1,Y+6
    00329 0CE0      ADD	R14,R0
    0032A 1CF1      ADC	R15,R1
(0112)         if(TwoDyAccumulatedError>Dy)
    0032B 800B      LDD	R0,Y+3
    0032C 801C      LDD	R1,Y+4
    0032D 140E      CP	R0,R14
    0032E 041F      CPC	R1,R15
    0032F F434      BGE	0x0336
(0113)           {
(0114)           CurrentX += Xinc;
    00330 0EA4      ADD	R10,R20
    00331 1EB5      ADC	R11,R21
(0115)           TwoDyAccumulatedError -= TwoDy;
    00332 800F      LDD	R0,Y+7
    00333 8418      LDD	R1,Y+8
    00334 18E0      SUB	R14,R0
    00335 08F1      SBC	R15,R1
(0116)           }
(0117)          GLCD_SetPixel(CurrentX,CurrentY, color);
    00336 9020 0100 LDS	R2,color
    00338 8228      ST	Y,R2
    00339 2D2C      MOV	R18,R12
    0033A 2D0A      MOV	R16,R10
    0033B D0F5      RCALL	_GLCD_SetPixel
(0118)          }while (CurrentY != Y2);
    0033C 8C09      LDD	R0,Y+25
    0033D 8C1A      LDD	R1,Y+26
    0033E 14C0      CP	R12,R0
    0033F 04D1      CPC	R13,R1
    00340 F721      BNE	0x0325
(0119)     }
(0120)   }
    00341 9629      ADIW	R28,0x9
(0121) }
(0122) 
_delay:
  i                    --> Y,+0
    00346 9721      SBIW	R28,1
FILE: C:\Users\EE-01\Desktop\ÃÖÃÖÁ¾\t6963c.h
(0001) #include <stdint.h>
(0002) #include <stdio.h>
(0003) #include <time.h>
(0004) #include <math.h>
(0005) 
(0006) #define F_CPU 16000000UL
(0007) 
(0008) // data port
(0009) #define GLCD_DATA_PORT 	PORTA
(0010) #define GLCD_DATA_PIN	PINA
(0011) #define GLCD_DATA_DDR	DDRA
(0012) // control port
(0013) #define GLCD_CTRL_PORT	PORTC
(0014) #define GLCD_CTRL_PIN	PINC
(0015) #define GLCD_CTRL_DDR	DDRC
(0016) // control signals
(0017) #define GLCD_WR			PC0
(0018) #define GLCD_RD			PC1
(0019) #define GLCD_CE			PC2
(0020) #define GLCD_CD			PC3
(0021) #define GLCD_RESET		PC4
(0022) #define GLCD_FS			PC5
(0023) // display properties
(0024) #define GLCD_NUMBER_OF_LINES				128
(0025) #define GLCD_PIXELS_PER_LINE				240
(0026) #define GLCD_FONT_WIDTH						8
(0027) //
(0028) #define GLCD_GRAPHIC_AREA					(GLCD_PIXELS_PER_LINE / GLCD_FONT_WIDTH)
(0029) #define GLCD_TEXT_AREA						(GLCD_PIXELS_PER_LINE / GLCD_FONT_WIDTH)
(0030) #define GLCD_GRAPHIC_SIZE					(GLCD_GRAPHIC_AREA * GLCD_NUMBER_OF_LINES)
(0031) #define GLCD_TEXT_SIZE						(GLCD_TEXT_AREA * (GLCD_NUMBER_OF_LINES/8))
(0032) 
(0033) 
(0034) #define GLCD_TEXT_HOME						0
(0035) #define GLCD_GRAPHIC_HOME					(GLCD_TEXT_HOME + GLCD_TEXT_SIZE)
(0036) #define GLCD_OFFSET_REGISTER				2
(0037) #define GLCD_EXTERNAL_CG_HOME				(GLCD_OFFSET_REGISTER << 11)
(0038) 
(0039) 
(0040) #define T6963_SET_CURSOR_POINTER			0x21
(0041) #define T6963_SET_OFFSET_REGISTER			0x22
(0042) #define T6963_SET_ADDRESS_POINTER			0x24
(0043) 
(0044) #define T6963_SET_TEXT_HOME_ADDRESS			0x40
(0045) #define T6963_SET_TEXT_AREA					0x41
(0046) #define T6963_SET_GRAPHIC_HOME_ADDRESS		0x42
(0047) #define T6963_SET_GRAPHIC_AREA				0x43
(0048) 
(0049) #define T6963_MODE_SET						0x80
(0050) 
(0051) 
(0052) #define T6963_DISPLAY_MODE					0x90
(0053) #define T6963_CURSOR_BLINK_ON		    	0x01
(0054) #define T6963_CURSOR_DISPLAY_ON	    		0x02
(0055) #define T6963_TEXT_DISPLAY_ON		    	0x04
(0056) #define T6963_GRAPHIC_DISPLAY_ON	    	0x08
(0057) 
(0058) 
(0059) #define T6963_CURSOR_PATTERN_SELECT			0xA0
(0060) #define T6963_CURSOR_1_LINE			    	0x00
(0061) #define T6963_CURSOR_2_LINE			    	0x01
(0062) #define T6963_CURSOR_3_LINE			    	0x02
(0063) #define T6963_CURSOR_4_LINE			    	0x03
(0064) #define T6963_CURSOR_5_LINE			    	0x04
(0065) #define T6963_CURSOR_6_LINE			    	0x05
(0066) #define T6963_CURSOR_7_LINE		    		0x06
(0067) #define T6963_CURSOR_8_LINE				    0x07
(0068) 
(0069) #define T6963_SET_DATA_AUTO_WRITE			0xB0
(0070) #define T6963_SET_DATA_AUTO_READ			0xB1
(0071) #define T6963_AUTO_RESET					0xB2
(0072) 
(0073) #define T6963_DATA_WRITE_AND_INCREMENT		0xC0
(0074) #define T6963_DATA_READ_AND_INCREMENT		0xC1
(0075) #define T6963_DATA_WRITE_AND_DECREMENT		0xC2
(0076) #define T6963_DATA_READ_AND_DECREMENT		0xC3
(0077) #define T6963_DATA_WRITE_AND_NONVARIALBE	0xC4
(0078) #define T6963_DATA_READ_AND_NONVARIABLE		0xC5
(0079) 
(0080) #define T6963_SCREEN_PEEK					0xE0
(0081) #define T6963_SCREEN_COPY					0xE8
(0082) 
(0083) 
(0084) void GLCD_InitializeInterface(void);
(0085) unsigned char GLCD_CheckStatus(void);
(0086) void GLCD_WriteCommand(unsigned char);
(0087) void GLCD_WriteData(unsigned char);
(0088) unsigned char GLCD_ReadData(void);
(0089) void GLCD_ClearText(void);
(0090) void GLCD_ClearCG(void);
(0091) void GLCD_ClearGraphic(void);
(0092) void GLCD_WriteChar(char ch);
(0093) void GLCD_WriteString(char * str);
(0094) void GLCD_TextGoTo(unsigned char, unsigned char);
(0095) void GLCD_DefineCharacter(unsigned char, unsigned char *);
(0096) void GLCD_Initialize(void);
(0097) void GLCD_SetPixel(unsigned char, unsigned char, unsigned char);
(0098) void GLCD_WriteDisplayData(unsigned char);
(0099) 
(0100) void delay_ms(unsigned int ms);
(0101) void GLCD_Clear(void);
(0102) 
(0103) //-------------------------------------------------------------------------------------------------
(0104) //
(0105) // Delay function
(0106) //
(0107) //-------------------------------------------------------------------------------------------------
(0108) void delay(void)
(0109) {
(0110) 	volatile unsigned char i;
(0111) 	for (i = 0; i < (F_CPU / 1000000); i++)
    00347 2422      CLR	R2
    00348 8228      ST	Y,R2
    00349 C004      RJMP	0x034E
(0112) 	{
(0113) 		asm("nop");
    0034A 0000      NOP
(0114) 	}
    0034B 8188      LD	R24,Y
    0034C 5F8F      SUBI	R24,0xFF
    0034D 8388      ST	Y,R24
    0034E E180      LDI	R24,0x10
    0034F E090      LDI	R25,0
    00350 E0A0      LDI	R26,0
    00351 E0B0      LDI	R27,0
    00352 8028      LD	R2,Y
    00353 2433      CLR	R3
    00354 2444      CLR	R4
    00355 2455      CLR	R5
    00356 1628      CP	R2,R24
    00357 0639      CPC	R3,R25
    00358 064A      CPC	R4,R26
    00359 065B      CPC	R5,R27
    0035A F378      BCS	0x034A
    0035B 9621      ADIW	R28,1
    0035C 9508      RET
(0115) }
(0116) //-------------------------------------------------------------------------------------------------
(0117) //
(0118) // Ports intalization
(0119) //
(0120) //-------------------------------------------------------------------------------------------------
(0121) void GLCD_InitializeInterface(void)
(0122) {
(0123) 	GLCD_DATA_DDR = 0xFF;
_GLCD_InitializeInterface:
    0035D EF8F      LDI	R24,0xFF
    0035E BB8A      OUT	0x1A,R24
(0124) 	GLCD_CTRL_DDR = ((1 << GLCD_WR) | (1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD) | (1 << GLCD_RESET) | (1 << GLCD_FS));
    0035F E38F      LDI	R24,0x3F
    00360 BB84      OUT	0x14,R24
(0125) 	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD) | (1 << GLCD_RESET) | (1 << GLCD_FS));
    00361 B385      IN	R24,0x15
    00362 638F      ORI	R24,0x3F
    00363 BB85      OUT	0x15,R24
    00364 9508      RET
_GLCD_CheckStatus:
  tmp                  --> R10
    00365 92AA      ST	-Y,R10
(0126) }
(0127) //-------------------------------------------------------------------------------------------------
(0128) //
(0129) // Reads dispay status
(0130) //
(0131) //-------------------------------------------------------------------------------------------------
(0132) unsigned char GLCD_CheckStatus(void)
(0133) {
(0134) 	uint8_t tmp;
(0135) 	GLCD_DATA_DDR = 0x00;
    00366 2422      CLR	R2
    00367 BA2A      OUT	0x1A,R2
(0136) 
(0137) 	GLCD_CTRL_PORT &= ~((1 << GLCD_RD) | (1 << GLCD_CE));
    00368 B385      IN	R24,0x15
    00369 7F89      ANDI	R24,0xF9
    0036A BB85      OUT	0x15,R24
(0138) 	delay();
    0036B DFDA      RCALL	_delay
(0139) 	tmp = GLCD_DATA_PIN;
    0036C B2A9      IN	R10,0x19
(0140) 	GLCD_DATA_DDR = 0xFF;
    0036D EF8F      LDI	R24,0xFF
    0036E BB8A      OUT	0x1A,R24
(0141) 	GLCD_CTRL_PORT |= ((1 << GLCD_RD) | (1 << GLCD_CE));
    0036F B385      IN	R24,0x15
    00370 6086      ORI	R24,6
    00371 BB85      OUT	0x15,R24
(0142) 	return tmp;
    00372 2D0A      MOV	R16,R10
    00373 90A9      LD	R10,Y+
    00374 9508      RET
_GLCD_WriteCommand:
  command              --> R10
    00375 92AA      ST	-Y,R10
    00376 2EA0      MOV	R10,R16
(0143) }
(0144) //-------------------------------------------------------------------------------------------------
(0145) //
(0146) // Writes instruction
(0147) //
(0148) //-------------------------------------------------------------------------------------------------
(0149) void GLCD_WriteCommand(unsigned char command)
(0150) {
(0151) 	while (!(GLCD_CheckStatus() & 0x03));
    00377 DFED      RCALL	_GLCD_CheckStatus
    00378 2F80      MOV	R24,R16
    00379 7083      ANDI	R24,3
    0037A F3E1      BEQ	0x0377
(0152) 	GLCD_DATA_PORT = command;
    0037B BAAB      OUT	0x1B,R10
(0153) 
(0154) 	GLCD_CTRL_PORT &= ~((1 << GLCD_WR) | (1 << GLCD_CE));
    0037C B385      IN	R24,0x15
    0037D 7F8A      ANDI	R24,0xFA
    0037E BB85      OUT	0x15,R24
(0155) 	delay();
    0037F DFC6      RCALL	_delay
(0156) 	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_CE));
    00380 B385      IN	R24,0x15
    00381 6085      ORI	R24,5
    00382 BB85      OUT	0x15,R24
    00383 90A9      LD	R10,Y+
    00384 9508      RET
_GLCD_WriteData:
  data                 --> R10
    00385 92AA      ST	-Y,R10
    00386 2EA0      MOV	R10,R16
(0157) }
(0158) 
(0159) //-------------------------------------------------------------------------------------------------
(0160) //
(0161) // Writes data
(0162) //
(0163) //-------------------------------------------------------------------------------------------------
(0164) void GLCD_WriteData(unsigned char data)
(0165) {
(0166) 	while (!(GLCD_CheckStatus() & 0x03));
    00387 DFDD      RCALL	_GLCD_CheckStatus
    00388 2F80      MOV	R24,R16
    00389 7083      ANDI	R24,3
    0038A F3E1      BEQ	0x0387
(0167) 	GLCD_DATA_PORT = data;
    0038B BAAB      OUT	0x1B,R10
(0168) 
(0169) 	GLCD_CTRL_PORT &= ~((1 << GLCD_WR) | (1 << GLCD_CE) | (1 << GLCD_CD));
    0038C B385      IN	R24,0x15
    0038D 7F82      ANDI	R24,0xF2
    0038E BB85      OUT	0x15,R24
(0170) 	delay();
    0038F DFB6      RCALL	_delay
(0171) 	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_CE) | (1 << GLCD_CD));
    00390 B385      IN	R24,0x15
    00391 608D      ORI	R24,0xD
    00392 BB85      OUT	0x15,R24
    00393 90A9      LD	R10,Y+
    00394 9508      RET
_GLCD_ReadData:
  tmp                  --> R10
    00395 92AA      ST	-Y,R10
(0172) }
(0173) //-------------------------------------------------------------------------------------------------
(0174) //
(0175) // Reads data
(0176) //
(0177) //-------------------------------------------------------------------------------------------------
(0178) unsigned char GLCD_ReadData(void)
(0179) {
(0180) 	uint8_t tmp;
(0181) 	while (!(GLCD_CheckStatus() & 0x03));
    00396 DFCE      RCALL	_GLCD_CheckStatus
    00397 2F80      MOV	R24,R16
    00398 7083      ANDI	R24,3
    00399 F3E1      BEQ	0x0396
(0182) 	GLCD_DATA_DDR = 0x00;
    0039A 2422      CLR	R2
    0039B BA2A      OUT	0x1A,R2
(0183) 
(0184) 	GLCD_CTRL_PORT &= ~((1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD));
    0039C B385      IN	R24,0x15
    0039D 7F81      ANDI	R24,0xF1
    0039E BB85      OUT	0x15,R24
(0185) 	delay();
    0039F DFA6      RCALL	_delay
(0186) 	tmp = GLCD_DATA_PIN;
    003A0 B2A9      IN	R10,0x19
(0187) 	GLCD_CTRL_PORT |= ((1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD));
    003A1 B385      IN	R24,0x15
    003A2 608E      ORI	R24,0xE
    003A3 BB85      OUT	0x15,R24
(0188) 	GLCD_DATA_DDR = 0xFF;
    003A4 EF8F      LDI	R24,0xFF
    003A5 BB8A      OUT	0x1A,R24
(0189) 	return tmp;
    003A6 2D0A      MOV	R16,R10
    003A7 90A9      LD	R10,Y+
    003A8 9508      RET
_GLCD_SetAddressPointer:
  address              --> R20
    003A9 934A      ST	-Y,R20
    003AA 935A      ST	-Y,R21
    003AB 01A8      MOVW	R20,R16
(0190) }
(0191) //-------------------------------------------------------------------------------------------------
(0192) //
(0193) // Sets address pointer for display RAM memory
(0194) //
(0195) //-------------------------------------------------------------------------------------------------
(0196) void GLCD_SetAddressPointer(unsigned int address)
(0197) {
(0198) 	GLCD_WriteData(address & 0xFF);
    003AC 018A      MOVW	R16,R20
    003AD 7010      ANDI	R17,0
    003AE DFD6      RCALL	_GLCD_WriteData
(0199) 	GLCD_WriteData(address >> 8);
    003AF 018A      MOVW	R16,R20
    003B0 2F01      MOV	R16,R17
    003B1 2711      CLR	R17
    003B2 DFD2      RCALL	_GLCD_WriteData
(0200) 	GLCD_WriteCommand(T6963_SET_ADDRESS_POINTER);
    003B3 E204      LDI	R16,0x24
    003B4 DFC0      RCALL	_GLCD_WriteCommand
    003B5 9159      LD	R21,Y+
    003B6 9149      LD	R20,Y+
    003B7 9508      RET
_GLCD_ClearText:
  i                    --> R20
    003B8 934A      ST	-Y,R20
    003B9 935A      ST	-Y,R21
(0201) }
(0202) //-------------------------------------------------------------------------------------------------
(0203) //
(0204) // Clears text area of display RAM memory
(0205) //
(0206) //-------------------------------------------------------------------------------------------------
(0207) void GLCD_ClearText(void)
(0208) {
(0209) 	int i;
(0210) 	GLCD_SetAddressPointer(GLCD_TEXT_HOME);
    003BA 2700      CLR	R16
    003BB 2711      CLR	R17
    003BC DFEC      RCALL	_GLCD_SetAddressPointer
(0211) 
(0212) 	for (i = 0; i < GLCD_TEXT_SIZE; i++)
    003BD 2744      CLR	R20
    003BE 2755      CLR	R21
(0213) 	{
(0214) 		GLCD_WriteDisplayData(0);
    003BF 2700      CLR	R16
    003C0 D0A7      RCALL	_GLCD_WriteDisplayData
(0215) 	}
    003C1 5F4F      SUBI	R20,0xFF
    003C2 4F5F      SBCI	R21,0xFF
    003C3 3E40      CPI	R20,0xE0
    003C4 E0E1      LDI	R30,1
    003C5 075E      CPC	R21,R30
    003C6 F3C4      BLT	0x03BF
    003C7 9159      LD	R21,Y+
    003C8 9149      LD	R20,Y+
    003C9 9508      RET
_GLCD_ClearCG:
  i                    --> R20
    003CA 934A      ST	-Y,R20
    003CB 935A      ST	-Y,R21
(0216) }
(0217) //-------------------------------------------------------------------------------------------------
(0218) //
(0219) // Clears characters generator area of display RAM memory
(0220) //
(0221) //-------------------------------------------------------------------------------------------------
(0222) void GLCD_ClearCG(void)
(0223) {
(0224) 	unsigned int i;
(0225) 	GLCD_SetAddressPointer(GLCD_EXTERNAL_CG_HOME);
    003CC E000      LDI	R16,0
    003CD E110      LDI	R17,0x10
    003CE DFDA      RCALL	_GLCD_SetAddressPointer
(0226) 
(0227) 	for (i = 0; i < 256 * 8; i++)
    003CF 2744      CLR	R20
    003D0 2755      CLR	R21
    003D1 C004      RJMP	0x03D6
(0228) 	{
(0229) 		GLCD_WriteDisplayData(0);
    003D2 2700      CLR	R16
    003D3 D094      RCALL	_GLCD_WriteDisplayData
(0230) 	}
    003D4 5F4F      SUBI	R20,0xFF
    003D5 4F5F      SBCI	R21,0xFF
    003D6 3040      CPI	R20,0
    003D7 E0E8      LDI	R30,0x8
    003D8 075E      CPC	R21,R30
    003D9 F3C0      BCS	0x03D2
    003DA 9159      LD	R21,Y+
    003DB 9149      LD	R20,Y+
    003DC 9508      RET
_GLCD_ClearGraphic:
  i                    --> R20
    003DD 934A      ST	-Y,R20
    003DE 935A      ST	-Y,R21
(0231) }
(0232) //-------------------------------------------------------------------------------------------------
(0233) //
(0234) // Clears graphics area of display RAM memory
(0235) //
(0236) //-------------------------------------------------------------------------------------------------
(0237) void GLCD_ClearGraphic(void)
(0238) {
(0239) 	int i;
(0240) 	GLCD_SetAddressPointer(GLCD_GRAPHIC_HOME);
    003DF EE00      LDI	R16,0xE0
    003E0 E011      LDI	R17,1
    003E1 DFC7      RCALL	_GLCD_SetAddressPointer
(0241) 	for (i = 0; i < GLCD_GRAPHIC_SIZE; i++)
    003E2 2744      CLR	R20
    003E3 2755      CLR	R21
(0242) 	{
(0243) 		GLCD_WriteDisplayData(0x00);
    003E4 2700      CLR	R16
    003E5 D082      RCALL	_GLCD_WriteDisplayData
(0244) 	}
    003E6 5F4F      SUBI	R20,0xFF
    003E7 4F5F      SBCI	R21,0xFF
    003E8 3040      CPI	R20,0
    003E9 E0EF      LDI	R30,0xF
    003EA 075E      CPC	R21,R30
    003EB F3C4      BLT	0x03E4
    003EC 9159      LD	R21,Y+
    003ED 9149      LD	R20,Y+
    003EE 9508      RET
_GLCD_WriteChar:
  charCode             --> R20
    003EF 934A      ST	-Y,R20
    003F0 2F40      MOV	R20,R16
(0245) }
(0246) //-------------------------------------------------------------------------------------------------
(0247) //
(0248) // Writes a single character (ASCII code) to display RAM memory
(0249) //
(0250) //-------------------------------------------------------------------------------------------------
(0251) void GLCD_WriteChar(char charCode)
(0252) {
(0253) 	GLCD_WriteDisplayData(charCode - 32);
    003F1 2F04      MOV	R16,R20
    003F2 5200      SUBI	R16,0x20
    003F3 D074      RCALL	_GLCD_WriteDisplayData
    003F4 9149      LD	R20,Y+
    003F5 9508      RET
_GLCD_WriteString:
  string               --> R10
    003F6 92AA      ST	-Y,R10
    003F7 92BA      ST	-Y,R11
    003F8 0158      MOVW	R10,R16
(0254) }
(0255) //-------------------------------------------------------------------------------------------------
(0256) //
(0257) // Writes null-terminated string to display RAM memory
(0258) //
(0259) //-------------------------------------------------------------------------------------------------
(0260) void GLCD_WriteString(char * string)
(0261) {
    003F9 C004      RJMP	0x03FE
(0262) 	while (*string)
(0263) 	{
(0264) 		GLCD_WriteChar(*string++);
    003FA 01F5      MOVW	R30,R10
    003FB 9101      LD	R16,Z+
    003FC 015F      MOVW	R10,R30
    003FD DFF1      RCALL	_GLCD_WriteChar
(0265) 	}
    003FE 01F5      MOVW	R30,R10
    003FF 8020      LD	R2,Z
    00400 2022      TST	R2
    00401 F7C1      BNE	0x03FA
    00402 90B9      LD	R11,Y+
    00403 90A9      LD	R10,Y+
    00404 9508      RET
_GLCD_TextGoTo:
  address              --> R10
  y                    --> R12
  x                    --> R10
    00405 940E 46CE CALL	push_xgset003C
    00407 2EC2      MOV	R12,R18
    00408 2EA0      MOV	R10,R16
(0266) }
(0267) 
(0268) //-------------------------------------------------------------------------------------------------
(0269) //
(0270) // Sets display coordinates
(0271) //
(0272) //-------------------------------------------------------------------------------------------------
(0273) void GLCD_TextGoTo(unsigned char x, unsigned char y)
(0274) {
(0275) 	unsigned int address;
(0276) 
(0277) 	address = GLCD_TEXT_HOME + x + (GLCD_TEXT_AREA * y);
    00409 E18E      LDI	R24,0x1E
    0040A 9D8C      MUL	R24,R12
    0040B 2C2A      MOV	R2,R10
    0040C 2433      CLR	R3
    0040D 0C20      ADD	R2,R0
    0040E 1C31      ADC	R3,R1
    0040F 0151      MOVW	R10,R2
(0278) 
(0279) 	GLCD_SetAddressPointer(address);
    00410 0181      MOVW	R16,R2
    00411 DF97      RCALL	_GLCD_SetAddressPointer
    00412 940C 46B8 JMP	pop_xgset003C
_GLCD_DefineCharacter:
  address              --> R20
  i                    --> R20
  defChar              --> R10
  charCode             --> R12
    00414 940E 46F5 CALL	push_xgset303C
    00416 0159      MOVW	R10,R18
    00417 2EC0      MOV	R12,R16
(0280) }
(0281) //-------------------------------------------------------------------------------------------------
(0282) //
(0283) // Writes single char pattern to character generator area of display RAM memory
(0284) //
(0285) //-------------------------------------------------------------------------------------------------
(0286) void GLCD_DefineCharacter(unsigned char charCode, unsigned char * defChar)
(0287) {
(0288) 	unsigned int address;
(0289) 	unsigned char i;
(0290) 
(0291) 	address = GLCD_EXTERNAL_CG_HOME + (8 * charCode);
    00418 2D4C      MOV	R20,R12
    00419 2755      CLR	R21
    0041A 0F44      LSL	R20
    0041B 1F55      ROL	R21
    0041C 0F44      LSL	R20
    0041D 1F55      ROL	R21
    0041E 0F44      LSL	R20
    0041F 1F55      ROL	R21
    00420 5040      SUBI	R20,0
    00421 4F50      SBCI	R21,0xF0
(0292) 
(0293) 	GLCD_SetAddressPointer(address);
    00422 018A      MOVW	R16,R20
    00423 DF85      RCALL	_GLCD_SetAddressPointer
(0294) 
(0295) 	for (i = 0; i < 8; i++)
    00424 2744      CLR	R20
    00425 C007      RJMP	0x042D
(0296) 	{
(0297) 		GLCD_WriteDisplayData(*(defChar + i));
    00426 2FE4      MOV	R30,R20
    00427 27FF      CLR	R31
    00428 0DEA      ADD	R30,R10
    00429 1DFB      ADC	R31,R11
    0042A 8100      LD	R16,Z
    0042B D03C      RCALL	_GLCD_WriteDisplayData
(0298) 	}
    0042C 9543      INC	R20
    0042D 3048      CPI	R20,0x8
    0042E F3B8      BCS	0x0426
    0042F 940C 46FC JMP	pop_xgset303C
_GLCD_SetPixel:
  address              --> R10
  tmp                  --> R10
  color                --> R20
  y                    --> R10
  x                    --> R12
    00431 940E 46F5 CALL	push_xgset303C
    00433 2EA2      MOV	R10,R18
    00434 2EC0      MOV	R12,R16
    00435 814E      LDD	R20,Y+6
(0299) }
(0300) 
(0301) //-------------------------------------------------------------------------------------------------
(0302) //
(0303) // Set (if color==1) or clear (if color==0) pixel on screen
(0304) //
(0305) //-------------------------------------------------------------------------------------------------
(0306) void GLCD_SetPixel(unsigned char x, unsigned char y, unsigned char color)
(0307) {
(0308) 	unsigned char tmp;
(0309) 	unsigned int address;
(0310) 
(0311) 	address = GLCD_GRAPHIC_HOME + (x / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
    00436 E18E      LDI	R24,0x1E
    00437 9D8A      MUL	R24,R10
    00438 0110      MOVW	R2,R0
    00439 E028      LDI	R18,0x8
    0043A E030      LDI	R19,0
    0043B 2D0C      MOV	R16,R12
    0043C 2711      CLR	R17
    0043D 940E 45BC CALL	div16s
    0043F 01C8      MOVW	R24,R16
    00440 5280      SUBI	R24,0x20
    00441 4F9E      SBCI	R25,0xFE
    00442 015C      MOVW	R10,R24
    00443 0CA2      ADD	R10,R2
    00444 1CB3      ADC	R11,R3
(0312) 
(0313) 	GLCD_SetAddressPointer(address);
    00445 0185      MOVW	R16,R10
    00446 DF62      RCALL	_GLCD_SetAddressPointer
(0314) 
(0315) 	GLCD_WriteCommand(T6963_DATA_READ_AND_NONVARIABLE);
    00447 EC05      LDI	R16,0xC5
    00448 DF2C      RCALL	_GLCD_WriteCommand
(0316) 	tmp = GLCD_ReadData();
    00449 DF4B      RCALL	_GLCD_ReadData
    0044A 2EA0      MOV	R10,R16
(0317) 
(0318) 	if (color==1)
    0044B 3041      CPI	R20,1
    0044C F459      BNE	0x0458
(0319) 		tmp |= (1 << (GLCD_FONT_WIDTH - 1 - (x % GLCD_FONT_WIDTH)));
    0044D E018      LDI	R17,0x8
    0044E 2D0C      MOV	R16,R12
    0044F 940E 465C CALL	mod8u
    00451 E017      LDI	R17,7
    00452 1B10      SUB	R17,R16
    00453 E001      LDI	R16,1
    00454 940E 4743 CALL	lsl8
    00456 2AA0      OR	R10,R16
    00457 C00C      RJMP	0x0464
(0320) 	else
(0321) 		tmp &= ~(1 << (GLCD_FONT_WIDTH - 1 - (x % GLCD_FONT_WIDTH)));
    00458 E018      LDI	R17,0x8
    00459 2D0C      MOV	R16,R12
    0045A 940E 465C CALL	mod8u
    0045C E017      LDI	R17,7
    0045D 1B10      SUB	R17,R16
    0045E E001      LDI	R16,1
    0045F 940E 4743 CALL	lsl8
    00461 2E20      MOV	R2,R16
    00462 9420      COM	R2
    00463 20A2      AND	R10,R2
(0322) 
(0323) 	GLCD_WriteDisplayData(tmp);
    00464 2D0A      MOV	R16,R10
    00465 D002      RCALL	_GLCD_WriteDisplayData
    00466 940C 46FC JMP	pop_xgset303C
_GLCD_WriteDisplayData:
  x                    --> R10
    00468 92AA      ST	-Y,R10
    00469 2EA0      MOV	R10,R16
(0324) 
(0325) }
(0326) //-------------------------------------------------------------------------------------------------
(0327) //
(0328) // Writes display data and increment address pointer
(0329) //
(0330) //-------------------------------------------------------------------------------------------------
(0331) void GLCD_WriteDisplayData(unsigned char x)
(0332) {
(0333) 	GLCD_WriteData(x);
    0046A 2D0A      MOV	R16,R10
    0046B DF19      RCALL	_GLCD_WriteData
(0334) 	GLCD_WriteCommand(T6963_DATA_WRITE_AND_INCREMENT);
    0046C EC00      LDI	R16,0xC0
    0046D DF07      RCALL	_GLCD_WriteCommand
    0046E 90A9      LD	R10,Y+
    0046F 9508      RET
_GLCD_GraphicGoTo:
  address              --> R10
  y                    --> R12
  x                    --> R10
    00470 940E 46CE CALL	push_xgset003C
    00472 2EC2      MOV	R12,R18
    00473 2EA0      MOV	R10,R16
(0335) }
(0336) //-------------------------------------------------------------------------------------------------
(0337) //
(0338) // Sets graphics coordinates
(0339) //
(0340) //-------------------------------------------------------------------------------------------------
(0341) void GLCD_GraphicGoTo(unsigned char x, unsigned char y)
(0342) {
(0343) 	unsigned int address;
(0344) 	address = GLCD_GRAPHIC_HOME + (x / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
    00474 E18E      LDI	R24,0x1E
    00475 9D8C      MUL	R24,R12
    00476 0110      MOVW	R2,R0
    00477 E028      LDI	R18,0x8
    00478 E030      LDI	R19,0
    00479 2D0A      MOV	R16,R10
    0047A 2711      CLR	R17
    0047B 940E 45BC CALL	div16s
    0047D 01C8      MOVW	R24,R16
    0047E 5280      SUBI	R24,0x20
    0047F 4F9E      SBCI	R25,0xFE
    00480 015C      MOVW	R10,R24
    00481 0CA2      ADD	R10,R2
    00482 1CB3      ADC	R11,R3
(0345) 	GLCD_SetAddressPointer(address);
    00483 0185      MOVW	R16,R10
    00484 DF24      RCALL	_GLCD_SetAddressPointer
    00485 940C 46B8 JMP	pop_xgset003C
(0346) }
(0347) 
(0348) //-------------------------------------------------------------------------------------------------
(0349) //
(0350) // Display initalization
(0351) //
(0352) //-------------------------------------------------------------------------------------------------
(0353) void GLCD_Initialize(void)
(0354) {
(0355) 	GLCD_InitializeInterface();
_GLCD_Initialize:
    00487 DED5      RCALL	_GLCD_InitializeInterface
(0356) 
(0357) 	GLCD_CTRL_PORT &= ~(1 << GLCD_RESET);
    00488 98AC      CBI	0x15,4
(0358) 	delay_ms(1);
    00489 E001      LDI	R16,1
    0048A E010      LDI	R17,0
    0048B D024      RCALL	_delay_ms
(0359) 	GLCD_CTRL_PORT |= (1 << GLCD_RESET);
    0048C 9AAC      SBI	0x15,4
(0360) 
(0361) #if (GLCD_FONT_WIDTH == 8)
(0362) 	GLCD_CTRL_PORT &= ~(1 << GLCD_FS);
    0048D 98AD      CBI	0x15,5
(0363) #endif
(0364) 
(0365) 	GLCD_WriteData(GLCD_GRAPHIC_HOME & 0xFF);
    0048E EE00      LDI	R16,0xE0
    0048F DEF5      RCALL	_GLCD_WriteData
(0366) 	GLCD_WriteData(GLCD_GRAPHIC_HOME >> 8);
    00490 E001      LDI	R16,1
    00491 DEF3      RCALL	_GLCD_WriteData
(0367) 	GLCD_WriteCommand(T6963_SET_GRAPHIC_HOME_ADDRESS);
    00492 E402      LDI	R16,0x42
    00493 DEE1      RCALL	_GLCD_WriteCommand
(0368) 
(0369) 	GLCD_WriteData(GLCD_GRAPHIC_AREA);
    00494 E10E      LDI	R16,0x1E
    00495 DEEF      RCALL	_GLCD_WriteData
(0370) 	GLCD_WriteData(0x00);
    00496 2700      CLR	R16
    00497 DEED      RCALL	_GLCD_WriteData
(0371) 	GLCD_WriteCommand(T6963_SET_GRAPHIC_AREA);
    00498 E403      LDI	R16,0x43
    00499 DEDB      RCALL	_GLCD_WriteCommand
(0372) 
(0373) 	GLCD_WriteData(GLCD_TEXT_HOME);
    0049A 2700      CLR	R16
    0049B DEE9      RCALL	_GLCD_WriteData
(0374) 	GLCD_WriteData(GLCD_TEXT_HOME >> 8);
    0049C 2700      CLR	R16
    0049D DEE7      RCALL	_GLCD_WriteData
(0375) 	GLCD_WriteCommand(T6963_SET_TEXT_HOME_ADDRESS);
    0049E E400      LDI	R16,0x40
    0049F DED5      RCALL	_GLCD_WriteCommand
(0376) 
(0377) 	GLCD_WriteData(GLCD_TEXT_AREA);
    004A0 E10E      LDI	R16,0x1E
    004A1 DEE3      RCALL	_GLCD_WriteData
(0378) 	GLCD_WriteData(0x00);
    004A2 2700      CLR	R16
    004A3 DEE1      RCALL	_GLCD_WriteData
(0379) 	GLCD_WriteCommand(T6963_SET_TEXT_AREA);
    004A4 E401      LDI	R16,0x41
    004A5 DECF      RCALL	_GLCD_WriteCommand
(0380) 
(0381) 	GLCD_WriteData(GLCD_OFFSET_REGISTER);
    004A6 E002      LDI	R16,2
    004A7 DEDD      RCALL	_GLCD_WriteData
(0382) 	GLCD_WriteData(0x00);
    004A8 2700      CLR	R16
    004A9 DEDB      RCALL	_GLCD_WriteData
(0383) 	GLCD_WriteCommand(T6963_SET_OFFSET_REGISTER);
    004AA E202      LDI	R16,0x22
    004AB DEC9      RCALL	_GLCD_WriteCommand
(0384) 
(0385) 	GLCD_WriteCommand(T6963_DISPLAY_MODE | T6963_GRAPHIC_DISPLAY_ON | T6963_TEXT_DISPLAY_ON /*| T6963_CURSOR_DISPLAY_ON*/);
    004AC E90C      LDI	R16,0x9C
    004AD DEC7      RCALL	_GLCD_WriteCommand
(0386) 
(0387) 	GLCD_WriteCommand(T6963_MODE_SET | 0);
    004AE E800      LDI	R16,0x80
    004AF CEC5      RJMP	_GLCD_WriteCommand
_delay_ms:
  i                    --> R20
  j                    --> R22
  ms                   --> R16
    004B0 940E 46DD CALL	push_xgsetF000
(0388) 
(0389) }
(0390) 
(0391) void delay_ms(unsigned int ms)
(0392) {
(0393) 	int i, j;
(0394) 
(0395) 	for (i = 0; i<ms; i++)
    004B2 2744      CLR	R20
    004B3 2755      CLR	R21
    004B4 C00A      RJMP	0x04BF
(0396) 		for (j = 0; j<2100; j++);
    004B5 2766      CLR	R22
    004B6 2777      CLR	R23
    004B7 5F6F      SUBI	R22,0xFF
    004B8 4F7F      SBCI	R23,0xFF
    004B9 3364      CPI	R22,0x34
    004BA E0E8      LDI	R30,0x8
    004BB 077E      CPC	R23,R30
    004BC F3D4      BLT	0x04B7
    004BD 5F4F      SUBI	R20,0xFF
    004BE 4F5F      SBCI	R21,0xFF
    004BF 1740      CP	R20,R16
    004C0 0751      CPC	R21,R17
    004C1 F398      BCS	0x04B5
    004C2 940C 46E2 JMP	pop_xgsetF000
(0397) }
(0398) 
(0399) void GLCD_Clear(void)
(0400) {
(0401) 	GLCD_ClearCG();
_GLCD_Clear:
    004C4 DF05      RCALL	_GLCD_ClearCG
(0402) 	GLCD_ClearGraphic();
    004C5 DF17      RCALL	_GLCD_ClearGraphic
(0403) 	GLCD_ClearText();
    004C6 CEF1      RJMP	_GLCD_ClearText
(0404) }
_rGLCD_1block:
  y                    --> R10
  x                    --> R22
  a                    --> R20
  b                    --> R12
  j                    --> R10
  i                    --> R12
    004C7 940E 4703 CALL	push_xgsetF03C
    004C9 0159      MOVW	R10,R18
    004CA 0168      MOVW	R12,R16
    004CB 9721      SBIW	R28,1
FILE: C:\Users\EE-01\Desktop\ÃÖÃÖÁ¾\rsetting.h
(0001) int i1[5]={0,0,1,0}, j1[5]={-1,1,0,0};
(0002) int i2[5]={0,-1,1,2,0}, j2[5]={-1,0,0,0,0};
(0003) int i3[5]={1,0}, j3[2]={0,0};
(0004) int i4[5]={0,0,1,1}, j4[5]={0,-1,-1,0}, tmp=0;
(0005) void lGLCD_SemiCircle(unsigned char cx, unsigned char cy, unsigned char radius);
(0006) void rGLCD_1block(int i, int j)
(0007) {
(0008)     int a, b;
(0009)     int x=133+13*i;
    004CC E00D      LDI	R16,0xD
    004CD E010      LDI	R17,0
    004CE 0196      MOVW	R18,R12
    004CF 940E 4674 CALL	empy16s
    004D1 01B8      MOVW	R22,R16
    004D2 576B      SUBI	R22,0x7B
    004D3 4F7F      SBCI	R23,0xFF
(0010)     int y=19+13*j;
    004D4 E00D      LDI	R16,0xD
    004D5 E010      LDI	R17,0
    004D6 0195      MOVW	R18,R10
    004D7 940E 4674 CALL	empy16s
    004D9 01C8      MOVW	R24,R16
    004DA 9643      ADIW	R24,0x13
    004DB 015C      MOVW	R10,R24
(0011) 
(0012)     for(a=-4;a<6;a++)
    004DC EF4C      LDI	R20,0xFC
    004DD EF5F      LDI	R21,0xFF
(0013)         for(b=-5;b<5;b++)
    004DE EF8B      LDI	R24,0xFB
    004DF EF9F      LDI	R25,0xFF
    004E0 016C      MOVW	R12,R24
(0014)             GLCD_SetPixel(x+a,y+b,color);
    004E1 9020 0100 LDS	R2,color
    004E3 8228      ST	Y,R2
    004E4 0195      MOVW	R18,R10
    004E5 0D2C      ADD	R18,R12
    004E6 1D3D      ADC	R19,R13
    004E7 018B      MOVW	R16,R22
    004E8 0F04      ADD	R16,R20
    004E9 1F15      ADC	R17,R21
    004EA DF46      RCALL	_GLCD_SetPixel
    004EB 01C6      MOVW	R24,R12
    004EC 9601      ADIW	R24,1
    004ED 016C      MOVW	R12,R24
    004EE 3085      CPI	R24,5
    004EF E0E0      LDI	R30,0
    004F0 079E      CPC	R25,R30
    004F1 F37C      BLT	0x04E1
    004F2 5F4F      SUBI	R20,0xFF
    004F3 4F5F      SBCI	R21,0xFF
    004F4 3046      CPI	R20,6
    004F5 E0E0      LDI	R30,0
    004F6 075E      CPC	R21,R30
    004F7 F334      BLT	0x04DE
    004F8 9621      ADIW	R28,1
    004F9 940C 470C JMP	pop_xgsetF03C
_rship1:
  n                    --> R20
  j                    --> R12
  i                    --> R10
    004FB 940E 46F5 CALL	push_xgset303C
    004FD 0169      MOVW	R12,R18
    004FE 0158      MOVW	R10,R16
(0015) }
(0016) 
(0017) void rship1(int i,int j)
(0018) {
(0019)     int n;
(0020)     for(n=0;n<4;n++)
    004FF 2744      CLR	R20
    00500 2755      CLR	R21
(0021)         rGLCD_1block(i+i1[n],j+j1[n]);
    00501 011A      MOVW	R2,R20
    00502 0C22      LSL	R2
    00503 1C33      ROL	R3
    00504 0121      MOVW	R4,R2
    00505 E08B      LDI	R24,0xB
    00506 E091      LDI	R25,1
    00507 01F1      MOVW	R30,R2
    00508 0FE8      ADD	R30,R24
    00509 1FF9      ADC	R31,R25
    0050A 8020      LD	R2,Z
    0050B 8031      LDD	R3,Z+1
    0050C 0196      MOVW	R18,R12
    0050D 0D22      ADD	R18,R2
    0050E 1D33      ADC	R19,R3
    0050F E081      LDI	R24,1
    00510 E091      LDI	R25,1
    00511 01F2      MOVW	R30,R4
    00512 0FE8      ADD	R30,R24
    00513 1FF9      ADC	R31,R25
    00514 8020      LD	R2,Z
    00515 8031      LDD	R3,Z+1
    00516 0185      MOVW	R16,R10
    00517 0D02      ADD	R16,R2
    00518 1D13      ADC	R17,R3
    00519 DFAD      RCALL	_rGLCD_1block
    0051A 5F4F      SUBI	R20,0xFF
    0051B 4F5F      SBCI	R21,0xFF
    0051C 3044      CPI	R20,4
    0051D E0E0      LDI	R30,0
    0051E 075E      CPC	R21,R30
    0051F F30C      BLT	0x0501
    00520 940C 46FC JMP	pop_xgset303C
_rship2:
  n                    --> R20
  j                    --> R12
  i                    --> R10
    00522 940E 46F5 CALL	push_xgset303C
    00524 0169      MOVW	R12,R18
    00525 0158      MOVW	R10,R16
(0022) }
(0023) 
(0024) void rship2(int i,int j)
(0025) {
(0026)     int n;
(0027)     for(n=0;n<5;n++)
    00526 2744      CLR	R20
    00527 2755      CLR	R21
(0028)         rGLCD_1block(i+i2[n],j+j2[n]);
    00528 011A      MOVW	R2,R20
    00529 0C22      LSL	R2
    0052A 1C33      ROL	R3
    0052B 0121      MOVW	R4,R2
    0052C E18F      LDI	R24,0x1F
    0052D E091      LDI	R25,1
    0052E 01F1      MOVW	R30,R2
    0052F 0FE8      ADD	R30,R24
    00530 1FF9      ADC	R31,R25
    00531 8020      LD	R2,Z
    00532 8031      LDD	R3,Z+1
    00533 0196      MOVW	R18,R12
    00534 0D22      ADD	R18,R2
    00535 1D33      ADC	R19,R3
    00536 E185      LDI	R24,0x15
    00537 E091      LDI	R25,1
    00538 01F2      MOVW	R30,R4
    00539 0FE8      ADD	R30,R24
    0053A 1FF9      ADC	R31,R25
    0053B 8020      LD	R2,Z
    0053C 8031      LDD	R3,Z+1
    0053D 0185      MOVW	R16,R10
    0053E 0D02      ADD	R16,R2
    0053F 1D13      ADC	R17,R3
    00540 DF86      RCALL	_rGLCD_1block
    00541 5F4F      SUBI	R20,0xFF
    00542 4F5F      SBCI	R21,0xFF
    00543 3045      CPI	R20,5
    00544 E0E0      LDI	R30,0
    00545 075E      CPC	R21,R30
    00546 F30C      BLT	0x0528
    00547 940C 46FC JMP	pop_xgset303C
_rship3:
  n                    --> R20
  j                    --> R12
  i                    --> R10
    00549 940E 46F5 CALL	push_xgset303C
    0054B 0169      MOVW	R12,R18
    0054C 0158      MOVW	R10,R16
(0029) }
(0030) 
(0031) void rship3(int i,int j)
(0032) {
(0033)     int n;
(0034)     for(n=0;n<2;n++)
    0054D 2744      CLR	R20
    0054E 2755      CLR	R21
(0035)         rGLCD_1block(i+i3[n],j+j3[n]);
    0054F 011A      MOVW	R2,R20
    00550 0C22      LSL	R2
    00551 1C33      ROL	R3
    00552 0121      MOVW	R4,R2
    00553 E383      LDI	R24,0x33
    00554 E091      LDI	R25,1
    00555 01F1      MOVW	R30,R2
    00556 0FE8      ADD	R30,R24
    00557 1FF9      ADC	R31,R25
    00558 8020      LD	R2,Z
    00559 8031      LDD	R3,Z+1
    0055A 0196      MOVW	R18,R12
    0055B 0D22      ADD	R18,R2
    0055C 1D33      ADC	R19,R3
    0055D E289      LDI	R24,0x29
    0055E E091      LDI	R25,1
    0055F 01F2      MOVW	R30,R4
    00560 0FE8      ADD	R30,R24
    00561 1FF9      ADC	R31,R25
    00562 8020      LD	R2,Z
    00563 8031      LDD	R3,Z+1
    00564 0185      MOVW	R16,R10
    00565 0D02      ADD	R16,R2
    00566 1D13      ADC	R17,R3
    00567 DF5F      RCALL	_rGLCD_1block
    00568 5F4F      SUBI	R20,0xFF
    00569 4F5F      SBCI	R21,0xFF
    0056A 3042      CPI	R20,2
    0056B E0E0      LDI	R30,0
    0056C 075E      CPC	R21,R30
    0056D F30C      BLT	0x054F
    0056E 940C 46FC JMP	pop_xgset303C
_switch_turn:
  n                    --> R20
  ship                 --> R10
    00570 940E 46F5 CALL	push_xgset303C
    00572 0158      MOVW	R10,R16
(0036) }
(0037) 
(0038) void switch_turn(char *ship)
(0039) {
(0040)     int n;
(0041) 
(0042)    if (ship == "rship1") {
    00573 EB87      LDI	R24,0xB7
    00574 E093      LDI	R25,3
    00575 16A8      CP	R10,R24
    00576 06B9      CPC	R11,R25
    00577 F009      BEQ	0x0579
    00578 C08C      RJMP	0x0605
(0043)       for (n = 0; n < 4; n++) {
    00579 2744      CLR	R20
    0057A 2755      CLR	R21
(0044)          tmp = i1[n];
    0057B E081      LDI	R24,1
    0057C E091      LDI	R25,1
    0057D 01FA      MOVW	R30,R20
    0057E 0FEE      LSL	R30
    0057F 1FFF      ROL	R31
    00580 0FE8      ADD	R30,R24
    00581 1FF9      ADC	R31,R25
    00582 8020      LD	R2,Z
    00583 8031      LDD	R3,Z+1
    00584 9230 014C STS	tmp+1,R3
    00586 9220 014B STS	tmp,R2
(0045)          i1[n] = j1[n];
    00588 011A      MOVW	R2,R20
    00589 0C22      LSL	R2
    0058A 1C33      ROL	R3
    0058B 0121      MOVW	R4,R2
    0058C E08B      LDI	R24,0xB
    0058D E091      LDI	R25,1
    0058E 01F1      MOVW	R30,R2
    0058F 0FE8      ADD	R30,R24
    00590 1FF9      ADC	R31,R25
    00591 8020      LD	R2,Z
    00592 8031      LDD	R3,Z+1
    00593 E081      LDI	R24,1
    00594 E091      LDI	R25,1
    00595 01F2      MOVW	R30,R4
    00596 0FE8      ADD	R30,R24
    00597 1FF9      ADC	R31,R25
    00598 8231      STD	Z+1,R3
    00599 8220      ST	Z,R2
(0046)          j1[n] = tmp;
    0059A E08B      LDI	R24,0xB
    0059B E091      LDI	R25,1
    0059C 01FA      MOVW	R30,R20
    0059D 0FEE      LSL	R30
    0059E 1FFF      ROL	R31
    0059F 0FE8      ADD	R30,R24
    005A0 1FF9      ADC	R31,R25
    005A1 9020 014B LDS	R2,tmp
    005A3 9030 014C LDS	R3,tmp+1
    005A5 8231      STD	Z+1,R3
    005A6 8220      ST	Z,R2
(0047)          if (i1[n] < 0 && j1[n] > 0 || i1[n]<0 && j1[n]<0) i1[n] *= -1;
    005A7 011A      MOVW	R2,R20
    005A8 0C22      LSL	R2
    005A9 1C33      ROL	R3
    005AA E081      LDI	R24,1
    005AB E091      LDI	R25,1
    005AC 01F1      MOVW	R30,R2
    005AD 0FE8      ADD	R30,R24
    005AE 1FF9      ADC	R31,R25
    005AF 8180      LD	R24,Z
    005B0 8191      LDD	R25,Z+1
    005B1 3080      CPI	R24,0
    005B2 E0E0      LDI	R30,0
    005B3 079E      CPC	R25,R30
    005B4 F464      BGE	0x05C1
    005B5 E08B      LDI	R24,0xB
    005B6 E091      LDI	R25,1
    005B7 01F1      MOVW	R30,R2
    005B8 0FE8      ADD	R30,R24
    005B9 1FF9      ADC	R31,R25
    005BA 8020      LD	R2,Z
    005BB 8031      LDD	R3,Z+1
    005BC 2444      CLR	R4
    005BD 2455      CLR	R5
    005BE 1442      CP	R4,R2
    005BF 0453      CPC	R5,R3
    005C0 F0CC      BLT	0x05DA
    005C1 016A      MOVW	R12,R20
    005C2 0CCC      LSL	R12
    005C3 1CDD      ROL	R13
    005C4 E081      LDI	R24,1
    005C5 E091      LDI	R25,1
    005C6 01F6      MOVW	R30,R12
    005C7 0FE8      ADD	R30,R24
    005C8 1FF9      ADC	R31,R25
    005C9 8180      LD	R24,Z
    005CA 8191      LDD	R25,Z+1
    005CB 3080      CPI	R24,0
    005CC E0E0      LDI	R30,0
    005CD 079E      CPC	R25,R30
    005CE F4EC      BGE	0x05EC
    005CF E08B      LDI	R24,0xB
    005D0 E091      LDI	R25,1
    005D1 01F6      MOVW	R30,R12
    005D2 0FE8      ADD	R30,R24
    005D3 1FF9      ADC	R31,R25
    005D4 8180      LD	R24,Z
    005D5 8191      LDD	R25,Z+1
    005D6 3080      CPI	R24,0
    005D7 E0E0      LDI	R30,0
    005D8 079E      CPC	R25,R30
    005D9 F494      BGE	0x05EC
    005DA E081      LDI	R24,1
    005DB E091      LDI	R25,1
    005DC 016A      MOVW	R12,R20
    005DD 0CCC      LSL	R12
    005DE 1CDD      ROL	R13
    005DF 0EC8      ADD	R12,R24
    005E0 1ED9      ADC	R13,R25
    005E1 01F6      MOVW	R30,R12
    005E2 8120      LD	R18,Z
    005E3 8131      LDD	R19,Z+1
    005E4 EF0F      LDI	R16,0xFF
    005E5 EF1F      LDI	R17,0xFF
    005E6 940E 4674 CALL	empy16s
    005E8 01F6      MOVW	R30,R12
    005E9 8311      STD	Z+1,R17
    005EA 8300      ST	Z,R16
    005EB C011      RJMP	0x05FD
(0048)          else j1[n] *= -1;
    005EC E08B      LDI	R24,0xB
    005ED E091      LDI	R25,1
    005EE 016A      MOVW	R12,R20
    005EF 0CCC      LSL	R12
    005F0 1CDD      ROL	R13
    005F1 0EC8      ADD	R12,R24
    005F2 1ED9      ADC	R13,R25
    005F3 01F6      MOVW	R30,R12
    005F4 8120      LD	R18,Z
    005F5 8131      LDD	R19,Z+1
    005F6 EF0F      LDI	R16,0xFF
    005F7 EF1F      LDI	R17,0xFF
    005F8 940E 4674 CALL	empy16s
    005FA 01F6      MOVW	R30,R12
    005FB 8311      STD	Z+1,R17
    005FC 8300      ST	Z,R16
(0049)       }
    005FD 5F4F      SUBI	R20,0xFF
    005FE 4F5F      SBCI	R21,0xFF
    005FF 3044      CPI	R20,4
    00600 E0E0      LDI	R30,0
    00601 075E      CPC	R21,R30
    00602 F40C      BGE	0x0604
    00603 CF77      RJMP	0x057B
(0050)    }
    00604 C11B      RJMP	0x0720
(0051)    else if (ship == "rship2") {
    00605 EB80      LDI	R24,0xB0
    00606 E093      LDI	R25,3
    00607 16A8      CP	R10,R24
    00608 06B9      CPC	R11,R25
    00609 F009      BEQ	0x060B
    0060A C08B      RJMP	0x0696
(0052)       for (n = 0; n < 5; n++) {
    0060B 2744      CLR	R20
    0060C 2755      CLR	R21
(0053)          tmp = i2[n];
    0060D E185      LDI	R24,0x15
    0060E E091      LDI	R25,1
    0060F 01FA      MOVW	R30,R20
    00610 0FEE      LSL	R30
    00611 1FFF      ROL	R31
    00612 0FE8      ADD	R30,R24
    00613 1FF9      ADC	R31,R25
    00614 8020      LD	R2,Z
    00615 8031      LDD	R3,Z+1
    00616 9230 014C STS	tmp+1,R3
    00618 9220 014B STS	tmp,R2
(0054)          i2[n] = j2[n];
    0061A 015A      MOVW	R10,R20
    0061B 0CAA      LSL	R10
    0061C 1CBB      ROL	R11
    0061D E18F      LDI	R24,0x1F
    0061E E091      LDI	R25,1
    0061F 01F5      MOVW	R30,R10
    00620 0FE8      ADD	R30,R24
    00621 1FF9      ADC	R31,R25
    00622 8020      LD	R2,Z
    00623 8031      LDD	R3,Z+1
    00624 E185      LDI	R24,0x15
    00625 E091      LDI	R25,1
    00626 01F5      MOVW	R30,R10
    00627 0FE8      ADD	R30,R24
    00628 1FF9      ADC	R31,R25
    00629 8231      STD	Z+1,R3
    0062A 8220      ST	Z,R2
(0055)          j2[n] = tmp;
    0062B E18F      LDI	R24,0x1F
    0062C E091      LDI	R25,1
    0062D 01FA      MOVW	R30,R20
    0062E 0FEE      LSL	R30
    0062F 1FFF      ROL	R31
    00630 0FE8      ADD	R30,R24
    00631 1FF9      ADC	R31,R25
    00632 9020 014B LDS	R2,tmp
    00634 9030 014C LDS	R3,tmp+1
    00636 8231      STD	Z+1,R3
    00637 8220      ST	Z,R2
(0056)          if (i2[n] < 0 && j2[n] > 0 || i2[n]<0 && j2[n]<0) i2[n] *= -1;
    00638 015A      MOVW	R10,R20
    00639 0CAA      LSL	R10
    0063A 1CBB      ROL	R11
    0063B E185      LDI	R24,0x15
    0063C E091      LDI	R25,1
    0063D 01F5      MOVW	R30,R10
    0063E 0FE8      ADD	R30,R24
    0063F 1FF9      ADC	R31,R25
    00640 8180      LD	R24,Z
    00641 8191      LDD	R25,Z+1
    00642 3080      CPI	R24,0
    00643 E0E0      LDI	R30,0
    00644 079E      CPC	R25,R30
    00645 F464      BGE	0x0652
    00646 E18F      LDI	R24,0x1F
    00647 E091      LDI	R25,1
    00648 01F5      MOVW	R30,R10
    00649 0FE8      ADD	R30,R24
    0064A 1FF9      ADC	R31,R25
    0064B 8020      LD	R2,Z
    0064C 8031      LDD	R3,Z+1
    0064D 2444      CLR	R4
    0064E 2455      CLR	R5
    0064F 1442      CP	R4,R2
    00650 0453      CPC	R5,R3
    00651 F0CC      BLT	0x066B
    00652 015A      MOVW	R10,R20
    00653 0CAA      LSL	R10
    00654 1CBB      ROL	R11
    00655 E185      LDI	R24,0x15
    00656 E091      LDI	R25,1
    00657 01F5      MOVW	R30,R10
    00658 0FE8      ADD	R30,R24
    00659 1FF9      ADC	R31,R25
    0065A 8180      LD	R24,Z
    0065B 8191      LDD	R25,Z+1
    0065C 3080      CPI	R24,0
    0065D E0E0      LDI	R30,0
    0065E 079E      CPC	R25,R30
    0065F F4EC      BGE	0x067D
    00660 E18F      LDI	R24,0x1F
    00661 E091      LDI	R25,1
    00662 01F5      MOVW	R30,R10
    00663 0FE8      ADD	R30,R24
    00664 1FF9      ADC	R31,R25
    00665 8180      LD	R24,Z
    00666 8191      LDD	R25,Z+1
    00667 3080      CPI	R24,0
    00668 E0E0      LDI	R30,0
    00669 079E      CPC	R25,R30
    0066A F494      BGE	0x067D
    0066B E185      LDI	R24,0x15
    0066C E091      LDI	R25,1
    0066D 015A      MOVW	R10,R20
    0066E 0CAA      LSL	R10
    0066F 1CBB      ROL	R11
    00670 0EA8      ADD	R10,R24
    00671 1EB9      ADC	R11,R25
    00672 01F5      MOVW	R30,R10
    00673 8120      LD	R18,Z
    00674 8131      LDD	R19,Z+1
    00675 EF0F      LDI	R16,0xFF
    00676 EF1F      LDI	R17,0xFF
    00677 940E 4674 CALL	empy16s
    00679 01F5      MOVW	R30,R10
    0067A 8311      STD	Z+1,R17
    0067B 8300      ST	Z,R16
    0067C C011      RJMP	0x068E
(0057)          else j2[n] *= -1;
    0067D E18F      LDI	R24,0x1F
    0067E E091      LDI	R25,1
    0067F 015A      MOVW	R10,R20
    00680 0CAA      LSL	R10
    00681 1CBB      ROL	R11
    00682 0EA8      ADD	R10,R24
    00683 1EB9      ADC	R11,R25
    00684 01F5      MOVW	R30,R10
    00685 8120      LD	R18,Z
    00686 8131      LDD	R19,Z+1
    00687 EF0F      LDI	R16,0xFF
    00688 EF1F      LDI	R17,0xFF
    00689 940E 4674 CALL	empy16s
    0068B 01F5      MOVW	R30,R10
    0068C 8311      STD	Z+1,R17
    0068D 8300      ST	Z,R16
(0058)       }
    0068E 5F4F      SUBI	R20,0xFF
    0068F 4F5F      SBCI	R21,0xFF
    00690 3045      CPI	R20,5
    00691 E0E0      LDI	R30,0
    00692 075E      CPC	R21,R30
    00693 F40C      BGE	0x0695
    00694 CF78      RJMP	0x060D
(0059)    }
    00695 C08A      RJMP	0x0720
(0060)    else{
(0061)         for(n=0;n<2;n++){
    00696 2744      CLR	R20
    00697 2755      CLR	R21
(0062)             tmp = i3[n];
    00698 E289      LDI	R24,0x29
    00699 E091      LDI	R25,1
    0069A 01FA      MOVW	R30,R20
    0069B 0FEE      LSL	R30
    0069C 1FFF      ROL	R31
    0069D 0FE8      ADD	R30,R24
    0069E 1FF9      ADC	R31,R25
    0069F 8020      LD	R2,Z
    006A0 8031      LDD	R3,Z+1
    006A1 9230 014C STS	tmp+1,R3
    006A3 9220 014B STS	tmp,R2
(0063)             i3[n] = j3[n];
    006A5 015A      MOVW	R10,R20
    006A6 0CAA      LSL	R10
    006A7 1CBB      ROL	R11
    006A8 E383      LDI	R24,0x33
    006A9 E091      LDI	R25,1
    006AA 01F5      MOVW	R30,R10
    006AB 0FE8      ADD	R30,R24
    006AC 1FF9      ADC	R31,R25
    006AD 8020      LD	R2,Z
    006AE 8031      LDD	R3,Z+1
    006AF E289      LDI	R24,0x29
    006B0 E091      LDI	R25,1
    006B1 01F5      MOVW	R30,R10
    006B2 0FE8      ADD	R30,R24
    006B3 1FF9      ADC	R31,R25
    006B4 8231      STD	Z+1,R3
    006B5 8220      ST	Z,R2
(0064)             j3[n] = tmp;
    006B6 E383      LDI	R24,0x33
    006B7 E091      LDI	R25,1
    006B8 01FA      MOVW	R30,R20
    006B9 0FEE      LSL	R30
    006BA 1FFF      ROL	R31
    006BB 0FE8      ADD	R30,R24
    006BC 1FF9      ADC	R31,R25
    006BD 9020 014B LDS	R2,tmp
    006BF 9030 014C LDS	R3,tmp+1
    006C1 8231      STD	Z+1,R3
    006C2 8220      ST	Z,R2
(0065)             if(i3[n] < 0 && j3[n]>0 || i3[n]<0 && j3[n]<0) i3[n] *= -1;
    006C3 015A      MOVW	R10,R20
    006C4 0CAA      LSL	R10
    006C5 1CBB      ROL	R11
    006C6 E289      LDI	R24,0x29
    006C7 E091      LDI	R25,1
    006C8 01F5      MOVW	R30,R10
    006C9 0FE8      ADD	R30,R24
    006CA 1FF9      ADC	R31,R25
    006CB 8180      LD	R24,Z
    006CC 8191      LDD	R25,Z+1
    006CD 3080      CPI	R24,0
    006CE E0E0      LDI	R30,0
    006CF 079E      CPC	R25,R30
    006D0 F464      BGE	0x06DD
    006D1 E383      LDI	R24,0x33
    006D2 E091      LDI	R25,1
    006D3 01F5      MOVW	R30,R10
    006D4 0FE8      ADD	R30,R24
    006D5 1FF9      ADC	R31,R25
    006D6 8020      LD	R2,Z
    006D7 8031      LDD	R3,Z+1
    006D8 2444      CLR	R4
    006D9 2455      CLR	R5
    006DA 1442      CP	R4,R2
    006DB 0453      CPC	R5,R3
    006DC F0CC      BLT	0x06F6
    006DD 015A      MOVW	R10,R20
    006DE 0CAA      LSL	R10
    006DF 1CBB      ROL	R11
    006E0 E289      LDI	R24,0x29
    006E1 E091      LDI	R25,1
    006E2 01F5      MOVW	R30,R10
    006E3 0FE8      ADD	R30,R24
    006E4 1FF9      ADC	R31,R25
    006E5 8180      LD	R24,Z
    006E6 8191      LDD	R25,Z+1
    006E7 3080      CPI	R24,0
    006E8 E0E0      LDI	R30,0
    006E9 079E      CPC	R25,R30
    006EA F4EC      BGE	0x0708
    006EB E383      LDI	R24,0x33
    006EC E091      LDI	R25,1
    006ED 01F5      MOVW	R30,R10
    006EE 0FE8      ADD	R30,R24
    006EF 1FF9      ADC	R31,R25
    006F0 8180      LD	R24,Z
    006F1 8191      LDD	R25,Z+1
    006F2 3080      CPI	R24,0
    006F3 E0E0      LDI	R30,0
    006F4 079E      CPC	R25,R30
    006F5 F494      BGE	0x0708
    006F6 E289      LDI	R24,0x29
    006F7 E091      LDI	R25,1
    006F8 015A      MOVW	R10,R20
    006F9 0CAA      LSL	R10
    006FA 1CBB      ROL	R11
    006FB 0EA8      ADD	R10,R24
    006FC 1EB9      ADC	R11,R25
    006FD 01F5      MOVW	R30,R10
    006FE 8120      LD	R18,Z
    006FF 8131      LDD	R19,Z+1
    00700 EF0F      LDI	R16,0xFF
    00701 EF1F      LDI	R17,0xFF
    00702 940E 4674 CALL	empy16s
    00704 01F5      MOVW	R30,R10
    00705 8311      STD	Z+1,R17
    00706 8300      ST	Z,R16
    00707 C011      RJMP	0x0719
(0066)             else j3[n] *=-1;
    00708 E383      LDI	R24,0x33
    00709 E091      LDI	R25,1
    0070A 015A      MOVW	R10,R20
    0070B 0CAA      LSL	R10
    0070C 1CBB      ROL	R11
    0070D 0EA8      ADD	R10,R24
    0070E 1EB9      ADC	R11,R25
    0070F 01F5      MOVW	R30,R10
    00710 8120      LD	R18,Z
    00711 8131      LDD	R19,Z+1
    00712 EF0F      LDI	R16,0xFF
    00713 EF1F      LDI	R17,0xFF
    00714 940E 4674 CALL	empy16s
    00716 01F5      MOVW	R30,R10
    00717 8311      STD	Z+1,R17
    00718 8300      ST	Z,R16
(0067)         }
    00719 5F4F      SUBI	R20,0xFF
    0071A 4F5F      SBCI	R21,0xFF
    0071B 3042      CPI	R20,2
    0071C E0E0      LDI	R30,0
    0071D 075E      CPC	R21,R30
    0071E F40C      BGE	0x0720
    0071F CF78      RJMP	0x0698
(0068) }
    00720 940C 46FC JMP	pop_xgset303C
_rship4:
  n                    --> R20
  j                    --> R12
  i                    --> R10
    00722 940E 46F5 CALL	push_xgset303C
    00724 0169      MOVW	R12,R18
    00725 0158      MOVW	R10,R16
(0069) }
(0070) 
(0071) void rship4(int i,int j)
(0072) {
(0073)     int n;
(0074)     for(n=0;n<4;n++)
    00726 2744      CLR	R20
    00727 2755      CLR	R21
(0075)         rGLCD_1block(i+i4[n],j+j4[n]);
    00728 011A      MOVW	R2,R20
    00729 0C22      LSL	R2
    0072A 1C33      ROL	R3
    0072B 0121      MOVW	R4,R2
    0072C E481      LDI	R24,0x41
    0072D E091      LDI	R25,1
    0072E 01F1      MOVW	R30,R2
    0072F 0FE8      ADD	R30,R24
    00730 1FF9      ADC	R31,R25
    00731 8020      LD	R2,Z
    00732 8031      LDD	R3,Z+1
    00733 0196      MOVW	R18,R12
    00734 0D22      ADD	R18,R2
    00735 1D33      ADC	R19,R3
    00736 E387      LDI	R24,0x37
    00737 E091      LDI	R25,1
    00738 01F2      MOVW	R30,R4
    00739 0FE8      ADD	R30,R24
    0073A 1FF9      ADC	R31,R25
    0073B 8020      LD	R2,Z
    0073C 8031      LDD	R3,Z+1
    0073D 0185      MOVW	R16,R10
    0073E 0D02      ADD	R16,R2
    0073F 1D13      ADC	R17,R3
    00740 DD86      RCALL	_rGLCD_1block
    00741 5F4F      SUBI	R20,0xFF
    00742 4F5F      SBCI	R21,0xFF
    00743 3044      CPI	R20,4
    00744 E0E0      LDI	R30,0
    00745 075E      CPC	R21,R30
    00746 F30C      BLT	0x0728
    00747 940C 46FC JMP	pop_xgset303C
_rGLCD_cursor_off:
  y                    --> R10
  x                    --> R22
  a                    --> R20
  b                    --> R12
  j                    --> R10
  i                    --> R12
    00749 940E 4703 CALL	push_xgsetF03C
    0074B 0159      MOVW	R10,R18
    0074C 0168      MOVW	R12,R16
    0074D 9721      SBIW	R28,1
(0076) }
(0077) 
(0078) void rGLCD_cursor_off(int i,int j)
(0079) {
(0080)     int a,b;
(0081)     int x=133+13*i;
    0074E E00D      LDI	R16,0xD
    0074F E010      LDI	R17,0
    00750 0196      MOVW	R18,R12
    00751 940E 4674 CALL	empy16s
    00753 01B8      MOVW	R22,R16
    00754 576B      SUBI	R22,0x7B
    00755 4F7F      SBCI	R23,0xFF
(0082)     int y=19+13*j;
    00756 E00D      LDI	R16,0xD
    00757 E010      LDI	R17,0
    00758 0195      MOVW	R18,R10
    00759 940E 4674 CALL	empy16s
    0075B 01C8      MOVW	R24,R16
    0075C 9643      ADIW	R24,0x13
    0075D 015C      MOVW	R10,R24
(0083) 
(0084)     color=0;
    0075E 2422      CLR	R2
    0075F 9220 0100 STS	color,R2
(0085)     for(a=-5;a<7;a++)
    00761 EF4B      LDI	R20,0xFB
    00762 EF5F      LDI	R21,0xFF
(0086)         for(b=-6;b<6;b++)
    00763 EF8A      LDI	R24,0xFA
    00764 EF9F      LDI	R25,0xFF
    00765 016C      MOVW	R12,R24
(0087)             GLCD_SetPixel(x+a,y+b,color);
    00766 9020 0100 LDS	R2,color
    00768 8228      ST	Y,R2
    00769 0195      MOVW	R18,R10
    0076A 0D2C      ADD	R18,R12
    0076B 1D3D      ADC	R19,R13
    0076C 018B      MOVW	R16,R22
    0076D 0F04      ADD	R16,R20
    0076E 1F15      ADC	R17,R21
    0076F DCC1      RCALL	_GLCD_SetPixel
    00770 01C6      MOVW	R24,R12
    00771 9601      ADIW	R24,1
    00772 016C      MOVW	R12,R24
    00773 3086      CPI	R24,6
    00774 E0E0      LDI	R30,0
    00775 079E      CPC	R25,R30
    00776 F37C      BLT	0x0766
    00777 5F4F      SUBI	R20,0xFF
    00778 4F5F      SBCI	R21,0xFF
    00779 3047      CPI	R20,7
    0077A E0E0      LDI	R30,0
    0077B 075E      CPC	R21,R30
    0077C F334      BLT	0x0763
(0088)     color=1;
    0077D E081      LDI	R24,1
    0077E 9380 0100 STS	color,R24
    00780 9621      ADIW	R28,1
    00781 940C 470C JMP	pop_xgsetF03C
rsetting.h:do_rand:
  lo                   --> Y,+8
  hi                   --> Y,+4
  x                    --> Y,+0
  ctx                  --> R10
    00783 940E 46E7 CALL	push_xgsetF00C
    00785 0158      MOVW	R10,R16
    00786 972C      SBIW	R28,0xC
(0089) }
(0090) static int do_rand(unsigned long *ctx)
(0091) {
(0092)     long hi, lo, x;
(0093) 
(0094)     x = *ctx;
    00787 01F5      MOVW	R30,R10
    00788 8020      LD	R2,Z
    00789 8031      LDD	R3,Z+1
    0078A 8042      LDD	R4,Z+2
    0078B 8053      LDD	R5,Z+3
    0078C 8228      ST	Y,R2
    0078D 8239      STD	Y+1,R3
    0078E 824A      STD	Y+2,R4
    0078F 825B      STD	Y+3,R5
(0095)     if (x == 0)
    00790 8028      LD	R2,Y
    00791 8039      LDD	R3,Y+1
    00792 804A      LDD	R4,Y+2
    00793 805B      LDD	R5,Y+3
    00794 9488      BCLR	0
    00795 2022      TST	R2
    00796 0432      CPC	R3,R2
    00797 0442      CPC	R4,R2
    00798 0452      CPC	R5,R2
    00799 F441      BNE	0x07A2
(0096)         x = 123459876L;
    0079A E284      LDI	R24,0x24
    0079B 8388      ST	Y,R24
    0079C ED89      LDI	R24,0xD9
    0079D 8389      STD	Y+1,R24
    0079E E58B      LDI	R24,0x5B
    0079F 838A      STD	Y+2,R24
    007A0 E087      LDI	R24,7
    007A1 838B      STD	Y+3,R24
(0097)     hi = x / 127773L;
    007A2 E14D      LDI	R20,0x1D
    007A3 EF53      LDI	R21,0xF3
    007A4 E061      LDI	R22,1
    007A5 E070      LDI	R23,0
    007A6 8108      LD	R16,Y
    007A7 8119      LDD	R17,Y+1
    007A8 812A      LDD	R18,Y+2
    007A9 813B      LDD	R19,Y+3
    007AA 937A      ST	-Y,R23
    007AB 936A      ST	-Y,R22
    007AC 935A      ST	-Y,R21
    007AD 934A      ST	-Y,R20
    007AE 940E 45F8 CALL	div32s
    007B0 830C      STD	Y+4,R16
    007B1 831D      STD	Y+5,R17
    007B2 832E      STD	Y+6,R18
    007B3 833F      STD	Y+7,R19
(0098)     lo = x % 127773L;
    007B4 E14D      LDI	R20,0x1D
    007B5 EF53      LDI	R21,0xF3
    007B6 E061      LDI	R22,1
    007B7 E070      LDI	R23,0
    007B8 8108      LD	R16,Y
    007B9 8119      LDD	R17,Y+1
    007BA 812A      LDD	R18,Y+2
    007BB 813B      LDD	R19,Y+3
    007BC 937A      ST	-Y,R23
    007BD 936A      ST	-Y,R22
    007BE 935A      ST	-Y,R21
    007BF 934A      ST	-Y,R20
    007C0 940E 45FA CALL	mod32s
    007C2 8708      STD	Y+8,R16
    007C3 8719      STD	Y+9,R17
    007C4 872A      STD	Y+10,R18
    007C5 873B      STD	Y+11,R19
(0099)     x = 16807L * lo - 2836L * hi;
    007C6 802C      LDD	R2,Y+4
    007C7 803D      LDD	R3,Y+5
    007C8 804E      LDD	R4,Y+6
    007C9 805F      LDD	R5,Y+7
    007CA E144      LDI	R20,0x14
    007CB E05B      LDI	R21,0xB
    007CC E060      LDI	R22,0
    007CD E070      LDI	R23,0
    007CE 925A      ST	-Y,R5
    007CF 924A      ST	-Y,R4
    007D0 923A      ST	-Y,R3
    007D1 922A      ST	-Y,R2
    007D2 018A      MOVW	R16,R20
    007D3 019B      MOVW	R18,R22
    007D4 940E 4684 CALL	empy32s|empy32u
    007D6 0118      MOVW	R2,R16
    007D7 0129      MOVW	R4,R18
    007D8 8468      LDD	R6,Y+8
    007D9 8479      LDD	R7,Y+9
    007DA 848A      LDD	R8,Y+10
    007DB 849B      LDD	R9,Y+11
    007DC EA47      LDI	R20,0xA7
    007DD E451      LDI	R21,0x41
    007DE E060      LDI	R22,0
    007DF E070      LDI	R23,0
    007E0 929A      ST	-Y,R9
    007E1 928A      ST	-Y,R8
    007E2 927A      ST	-Y,R7
    007E3 926A      ST	-Y,R6
    007E4 018A      MOVW	R16,R20
    007E5 019B      MOVW	R18,R22
    007E6 940E 4684 CALL	empy32s|empy32u
    007E8 0138      MOVW	R6,R16
    007E9 0149      MOVW	R8,R18
    007EA 1862      SUB	R6,R2
    007EB 0873      SBC	R7,R3
    007EC 0884      SBC	R8,R4
    007ED 0895      SBC	R9,R5
    007EE 8268      ST	Y,R6
    007EF 8279      STD	Y+1,R7
    007F0 828A      STD	Y+2,R8
    007F1 829B      STD	Y+3,R9
(0100)     if (x < 0)
    007F2 E040      LDI	R20,0
    007F3 E050      LDI	R21,0
    007F4 E060      LDI	R22,0
    007F5 E070      LDI	R23,0
    007F6 8028      LD	R2,Y
    007F7 8039      LDD	R3,Y+1
    007F8 804A      LDD	R4,Y+2
    007F9 805B      LDD	R5,Y+3
    007FA 1624      CP	R2,R20
    007FB 0635      CPC	R3,R21
    007FC 0646      CPC	R4,R22
    007FD 0657      CPC	R5,R23
    007FE F464      BGE	0x080B
(0101)         x += 0x7fffffffL;
    007FF EF4F      LDI	R20,0xFF
    00800 EF5F      LDI	R21,0xFF
    00801 EF6F      LDI	R22,0xFF
    00802 E77F      LDI	R23,0x7F
    00803 0E24      ADD	R2,R20
    00804 1E35      ADC	R3,R21
    00805 1E46      ADC	R4,R22
    00806 1E57      ADC	R5,R23
    00807 8228      ST	Y,R2
    00808 8239      STD	Y+1,R3
    00809 824A      STD	Y+2,R4
    0080A 825B      STD	Y+3,R5
(0102)     return ((*ctx = x) % ((unsigned long)8 + 1));
    0080B 8028      LD	R2,Y
    0080C 8039      LDD	R3,Y+1
    0080D 804A      LDD	R4,Y+2
    0080E 805B      LDD	R5,Y+3
    0080F 01F5      MOVW	R30,R10
    00810 8220      ST	Z,R2
    00811 8231      STD	Z+1,R3
    00812 8242      STD	Z+2,R4
    00813 8253      STD	Z+3,R5
    00814 E049      LDI	R20,0x9
    00815 E050      LDI	R21,0
    00816 E060      LDI	R22,0
    00817 E070      LDI	R23,0
    00818 0181      MOVW	R16,R2
    00819 0192      MOVW	R18,R4
    0081A 937A      ST	-Y,R23
    0081B 936A      ST	-Y,R22
    0081C 935A      ST	-Y,R21
    0081D 934A      ST	-Y,R20
    0081E 940E 45F4 CALL	mod32u
    00820 962C      ADIW	R28,0xC
    00821 940C 46EE JMP	pop_xgsetF00C
(0103) }
(0104) static unsigned long next = 1;
(0105) 
(0106) int rand(void)
(0107) {
(0108)     return do_rand(&next);
_rand:
    00823 E40D      LDI	R16,0x4D
    00824 E011      LDI	R17,1
    00825 CF5D      RJMP	rsetting.h:do_rand
(0109) }
(0110) void srand(unsigned int seed)
(0111) {
(0112)     next = seed;
_srand:
  seed                 --> R16
    00826 0118      MOVW	R2,R16
    00827 2444      CLR	R4
    00828 2455      CLR	R5
    00829 9230 014E STS	rsetting.h:next+1,R3
    0082B 9220 014D STS	rsetting.h:next,R2
    0082D 9250 0150 STS	rsetting.h:next+3,R5
    0082F 9240 014F STS	rsetting.h:next+2,R4
    00831 9508      RET
_rGLCD_mine:
  y                    --> R22
  x                    --> R20
  j                    --> R10
  i                    --> R12
    00832 940E 4703 CALL	push_xgsetF03C
    00834 0159      MOVW	R10,R18
    00835 0168      MOVW	R12,R16
    00836 9724      SBIW	R28,4
(0113) }
(0114) 
(0115) 
(0116) void rGLCD_mine(int i,int j)
(0117) {
(0118)     unsigned char x=133+13*i;
    00837 E00D      LDI	R16,0xD
    00838 E010      LDI	R17,0
    00839 0196      MOVW	R18,R12
    0083A 940E 4674 CALL	empy16s
    0083C 01A8      MOVW	R20,R16
    0083D 574B      SUBI	R20,0x7B
    0083E 4F5F      SBCI	R21,0xFF
(0119)     unsigned char y=19+13*j;
    0083F E00D      LDI	R16,0xD
    00840 E010      LDI	R17,0
    00841 0195      MOVW	R18,R10
    00842 940E 4674 CALL	empy16s
    00844 01B8      MOVW	R22,R16
    00845 5E6D      SUBI	R22,0xED
    00846 4F7F      SBCI	R23,0xFF
(0120)     GLCD_Line(x-4,y-6,x+4,y-6);
    00847 2F86      MOV	R24,R22
    00848 2799      CLR	R25
    00849 9706      SBIW	R24,6
    0084A 011C      MOVW	R2,R24
    0084B 823B      STD	Y+3,R3
    0084C 822A      STD	Y+2,R2
    0084D 2F84      MOV	R24,R20
    0084E 2799      CLR	R25
    0084F 9604      ADIW	R24,4
    00850 8399      STD	Y+1,R25
    00851 8388      ST	Y,R24
    00852 0191      MOVW	R18,R2
    00853 2F04      MOV	R16,R20
    00854 2711      CLR	R17
    00855 5004      SUBI	R16,4
    00856 4010      SBCI	R17,0
    00857 DA3C      RCALL	_GLCD_Line
(0121)     GLCD_SetPixel(x-5,y-5,color);
    00858 9020 0100 LDS	R2,color
    0085A 8228      ST	Y,R2
    0085B 2F26      MOV	R18,R22
    0085C 5025      SUBI	R18,5
    0085D 2F04      MOV	R16,R20
    0085E 5005      SUBI	R16,5
    0085F DBD1      RCALL	_GLCD_SetPixel
(0122)     GLCD_SetPixel(x+5,y-5,color);
    00860 9020 0100 LDS	R2,color
    00862 8228      ST	Y,R2
    00863 2F26      MOV	R18,R22
    00864 5025      SUBI	R18,5
    00865 2F04      MOV	R16,R20
    00866 5F0B      SUBI	R16,0xFB
    00867 DBC9      RCALL	_GLCD_SetPixel
(0123)     GLCD_Line(x-6,y-4,x-6,y);
    00868 2E26      MOV	R2,R22
    00869 2433      CLR	R3
    0086A 823B      STD	Y+3,R3
    0086B 822A      STD	Y+2,R2
    0086C 2F84      MOV	R24,R20
    0086D 2799      CLR	R25
    0086E 9706      SBIW	R24,6
    0086F 011C      MOVW	R2,R24
    00870 8239      STD	Y+1,R3
    00871 8228      ST	Y,R2
    00872 2F26      MOV	R18,R22
    00873 2733      CLR	R19
    00874 5024      SUBI	R18,4
    00875 4030      SBCI	R19,0
    00876 018C      MOVW	R16,R24
    00877 DA1C      RCALL	_GLCD_Line
(0124)     GLCD_Line(x+6,y-4,x+6,y);
    00878 2E26      MOV	R2,R22
    00879 2433      CLR	R3
    0087A 823B      STD	Y+3,R3
    0087B 822A      STD	Y+2,R2
    0087C 2F84      MOV	R24,R20
    0087D 2799      CLR	R25
    0087E 9606      ADIW	R24,6
    0087F 015C      MOVW	R10,R24
    00880 82B9      STD	Y+1,R11
    00881 82A8      ST	Y,R10
    00882 2D22      MOV	R18,R2
    00883 2733      CLR	R19
    00884 5024      SUBI	R18,4
    00885 4030      SBCI	R19,0
    00886 018C      MOVW	R16,R24
    00887 DA0C      RCALL	_GLCD_Line
(0125)     GLCD_SetPixel(x-3,y-4,color);
    00888 9020 0100 LDS	R2,color
    0088A 8228      ST	Y,R2
    0088B 2F26      MOV	R18,R22
    0088C 5024      SUBI	R18,4
    0088D 2F04      MOV	R16,R20
    0088E 5003      SUBI	R16,3
    0088F DBA1      RCALL	_GLCD_SetPixel
(0126)     GLCD_Line(x-2,y-4,x-2,y-2);
    00890 2F86      MOV	R24,R22
    00891 2799      CLR	R25
    00892 9702      SBIW	R24,2
    00893 839B      STD	Y+3,R25
    00894 838A      STD	Y+2,R24
    00895 2F84      MOV	R24,R20
    00896 2799      CLR	R25
    00897 9702      SBIW	R24,2
    00898 015C      MOVW	R10,R24
    00899 82B9      STD	Y+1,R11
    0089A 82A8      ST	Y,R10
    0089B 2F26      MOV	R18,R22
    0089C 2733      CLR	R19
    0089D 5024      SUBI	R18,4
    0089E 4030      SBCI	R19,0
    0089F 018C      MOVW	R16,R24
    008A0 D9F3      RCALL	_GLCD_Line
(0127)     GLCD_SetPixel(x-3,y-1,color);
    008A1 9020 0100 LDS	R2,color
    008A3 8228      ST	Y,R2
    008A4 2F26      MOV	R18,R22
    008A5 5021      SUBI	R18,1
    008A6 2F04      MOV	R16,R20
    008A7 5003      SUBI	R16,3
    008A8 DB88      RCALL	_GLCD_SetPixel
(0128)     GLCD_SetPixel(x-3,y,color);
    008A9 9020 0100 LDS	R2,color
    008AB 8228      ST	Y,R2
    008AC 2F26      MOV	R18,R22
    008AD 2F04      MOV	R16,R20
    008AE 5003      SUBI	R16,3
    008AF DB81      RCALL	_GLCD_SetPixel
(0129)     GLCD_SetPixel(x-4,y-3,color);
    008B0 9020 0100 LDS	R2,color
    008B2 8228      ST	Y,R2
    008B3 2F26      MOV	R18,R22
    008B4 5023      SUBI	R18,3
    008B5 2F04      MOV	R16,R20
    008B6 5004      SUBI	R16,4
    008B7 DB79      RCALL	_GLCD_SetPixel
(0130)     GLCD_SetPixel(x-4,y-2,color);
    008B8 9020 0100 LDS	R2,color
    008BA 8228      ST	Y,R2
    008BB 2F26      MOV	R18,R22
    008BC 5022      SUBI	R18,2
    008BD 2F04      MOV	R16,R20
    008BE 5004      SUBI	R16,4
    008BF DB71      RCALL	_GLCD_SetPixel
(0131)     GLCD_SetPixel(x+3,y-4,color);
    008C0 9020 0100 LDS	R2,color
    008C2 8228      ST	Y,R2
    008C3 2F26      MOV	R18,R22
    008C4 5024      SUBI	R18,4
    008C5 2F04      MOV	R16,R20
    008C6 5F0D      SUBI	R16,0xFD
    008C7 DB69      RCALL	_GLCD_SetPixel
(0132)     GLCD_Line(x+2,y-4,x+2,y-2);
    008C8 2F86      MOV	R24,R22
    008C9 2799      CLR	R25
    008CA 9702      SBIW	R24,2
    008CB 839B      STD	Y+3,R25
    008CC 838A      STD	Y+2,R24
    008CD 2F84      MOV	R24,R20
    008CE 2799      CLR	R25
    008CF 9602      ADIW	R24,2
    008D0 015C      MOVW	R10,R24
    008D1 82B9      STD	Y+1,R11
    008D2 82A8      ST	Y,R10
    008D3 2F26      MOV	R18,R22
    008D4 2733      CLR	R19
    008D5 5024      SUBI	R18,4
    008D6 4030      SBCI	R19,0
    008D7 018C      MOVW	R16,R24
    008D8 D9BB      RCALL	_GLCD_Line
(0133)     GLCD_SetPixel(x+3,y-1,color);
    008D9 9020 0100 LDS	R2,color
    008DB 8228      ST	Y,R2
    008DC 2F26      MOV	R18,R22
    008DD 5021      SUBI	R18,1
    008DE 2F04      MOV	R16,R20
    008DF 5F0D      SUBI	R16,0xFD
    008E0 DB50      RCALL	_GLCD_SetPixel
(0134)     GLCD_SetPixel(x+3,y,color);
    008E1 9020 0100 LDS	R2,color
    008E3 8228      ST	Y,R2
    008E4 2F26      MOV	R18,R22
    008E5 2F04      MOV	R16,R20
    008E6 5F0D      SUBI	R16,0xFD
    008E7 DB49      RCALL	_GLCD_SetPixel
(0135)     GLCD_SetPixel(x+4,y-3,color);
    008E8 9020 0100 LDS	R2,color
    008EA 8228      ST	Y,R2
    008EB 2F26      MOV	R18,R22
    008EC 5023      SUBI	R18,3
    008ED 2F04      MOV	R16,R20
    008EE 5F0C      SUBI	R16,0xFC
    008EF DB41      RCALL	_GLCD_SetPixel
(0136)     GLCD_SetPixel(x+4,y-2,color);
    008F0 9020 0100 LDS	R2,color
    008F2 8228      ST	Y,R2
    008F3 2F26      MOV	R18,R22
    008F4 5022      SUBI	R18,2
    008F5 2F04      MOV	R16,R20
    008F6 5F0C      SUBI	R16,0xFC
    008F7 DB39      RCALL	_GLCD_SetPixel
(0137)     GLCD_SetPixel(x-5,y+1,color);
    008F8 9020 0100 LDS	R2,color
    008FA 8228      ST	Y,R2
    008FB 2F26      MOV	R18,R22
    008FC 5F2F      SUBI	R18,0xFF
    008FD 2F04      MOV	R16,R20
    008FE 5005      SUBI	R16,5
    008FF DB31      RCALL	_GLCD_SetPixel
(0138)     GLCD_SetPixel(x+5,y+1,color);
    00900 9020 0100 LDS	R2,color
    00902 8228      ST	Y,R2
    00903 2F26      MOV	R18,R22
    00904 5F2F      SUBI	R18,0xFF
    00905 2F04      MOV	R16,R20
    00906 5F0B      SUBI	R16,0xFB
    00907 DB29      RCALL	_GLCD_SetPixel
(0139)     GLCD_Line(x-4,y+2,x-4,y+5);
    00908 2F86      MOV	R24,R22
    00909 2799      CLR	R25
    0090A 9605      ADIW	R24,5
    0090B 839B      STD	Y+3,R25
    0090C 838A      STD	Y+2,R24
    0090D 2F84      MOV	R24,R20
    0090E 2799      CLR	R25
    0090F 9704      SBIW	R24,4
    00910 015C      MOVW	R10,R24
    00911 82B9      STD	Y+1,R11
    00912 82A8      ST	Y,R10
    00913 2F26      MOV	R18,R22
    00914 2733      CLR	R19
    00915 5F2E      SUBI	R18,0xFE
    00916 4F3F      SBCI	R19,0xFF
    00917 018C      MOVW	R16,R24
    00918 D97B      RCALL	_GLCD_Line
(0140)     GLCD_Line(x-4,y+6,x-4,y+6);
    00919 2F86      MOV	R24,R22
    0091A 2799      CLR	R25
    0091B 9606      ADIW	R24,6
    0091C 016C      MOVW	R12,R24
    0091D 82DB      STD	Y+3,R13
    0091E 82CA      STD	Y+2,R12
    0091F 2F84      MOV	R24,R20
    00920 2799      CLR	R25
    00921 9704      SBIW	R24,4
    00922 015C      MOVW	R10,R24
    00923 82B9      STD	Y+1,R11
    00924 82A8      ST	Y,R10
    00925 0196      MOVW	R18,R12
    00926 018C      MOVW	R16,R24
    00927 D96C      RCALL	_GLCD_Line
(0141)     GLCD_Line(x+4,y+2,x+4,y+5);
    00928 2F86      MOV	R24,R22
    00929 2799      CLR	R25
    0092A 9605      ADIW	R24,5
    0092B 839B      STD	Y+3,R25
    0092C 838A      STD	Y+2,R24
    0092D 2F84      MOV	R24,R20
    0092E 2799      CLR	R25
    0092F 9604      ADIW	R24,4
    00930 015C      MOVW	R10,R24
    00931 82B9      STD	Y+1,R11
    00932 82A8      ST	Y,R10
    00933 2F26      MOV	R18,R22
    00934 2733      CLR	R19
    00935 5F2E      SUBI	R18,0xFE
    00936 4F3F      SBCI	R19,0xFF
    00937 018C      MOVW	R16,R24
    00938 D95B      RCALL	_GLCD_Line
(0142)     GLCD_Rectangle(x-2,y+2,5,3);
    00939 E083      LDI	R24,3
    0093A 838A      STD	Y+2,R24
    0093B E085      LDI	R24,5
    0093C 8388      ST	Y,R24
    0093D 2F26      MOV	R18,R22
    0093E 5F2E      SUBI	R18,0xFE
    0093F 2F04      MOV	R16,R20
    00940 5002      SUBI	R16,2
    00941 D886      RCALL	_GLCD_Rectangle
    00942 9624      ADIW	R28,4
    00943 940C 470C JMP	pop_xgsetF03C
_rGLCD_item:
  y                    --> R22
  x                    --> R20
  j                    --> R10
  i                    --> R12
    00945 940E 4703 CALL	push_xgsetF03C
    00947 0159      MOVW	R10,R18
    00948 0168      MOVW	R12,R16
    00949 9724      SBIW	R28,4
(0143) }
(0144) 
(0145) void rGLCD_item(int i,int j)//
(0146) {
(0147)     unsigned char x=133+13*i;
    0094A E00D      LDI	R16,0xD
    0094B E010      LDI	R17,0
    0094C 0196      MOVW	R18,R12
    0094D 940E 4674 CALL	empy16s
    0094F 01A8      MOVW	R20,R16
    00950 574B      SUBI	R20,0x7B
    00951 4F5F      SBCI	R21,0xFF
(0148)     unsigned char y=19+13*j;
    00952 E00D      LDI	R16,0xD
    00953 E010      LDI	R17,0
    00954 0195      MOVW	R18,R10
    00955 940E 4674 CALL	empy16s
    00957 01B8      MOVW	R22,R16
    00958 5E6D      SUBI	R22,0xED
    00959 4F7F      SBCI	R23,0xFF
(0149)     lGLCD_SemiCircle(x-3,y-3,3);
    0095A E083      LDI	R24,3
    0095B 8388      ST	Y,R24
    0095C 2F26      MOV	R18,R22
    0095D 5023      SUBI	R18,3
    0095E 2F04      MOV	R16,R20
    0095F 5003      SUBI	R16,3
    00960 D7DD      RCALL	_lGLCD_SemiCircle
(0150)     lGLCD_SemiCircle(x+3,y-3,3);
    00961 E083      LDI	R24,3
    00962 8388      ST	Y,R24
    00963 2F26      MOV	R18,R22
    00964 5023      SUBI	R18,3
    00965 2F04      MOV	R16,R20
    00966 5F0D      SUBI	R16,0xFD
    00967 D7D6      RCALL	_lGLCD_SemiCircle
(0151)     GLCD_Line(x-6,y-3,x-6,y);
    00968 2E26      MOV	R2,R22
    00969 2433      CLR	R3
    0096A 823B      STD	Y+3,R3
    0096B 822A      STD	Y+2,R2
    0096C 2F84      MOV	R24,R20
    0096D 2799      CLR	R25
    0096E 9706      SBIW	R24,6
    0096F 8399      STD	Y+1,R25
    00970 8388      ST	Y,R24
    00971 2D22      MOV	R18,R2
    00972 2733      CLR	R19
    00973 5023      SUBI	R18,3
    00974 4030      SBCI	R19,0
    00975 018C      MOVW	R16,R24
    00976 D91D      RCALL	_GLCD_Line
(0152)     GLCD_Line(x+6,y-3,x+6,y);
    00977 2E26      MOV	R2,R22
    00978 2433      CLR	R3
    00979 823B      STD	Y+3,R3
    0097A 822A      STD	Y+2,R2
    0097B 2F84      MOV	R24,R20
    0097C 2799      CLR	R25
    0097D 9606      ADIW	R24,6
    0097E 8399      STD	Y+1,R25
    0097F 8388      ST	Y,R24
    00980 2D22      MOV	R18,R2
    00981 2733      CLR	R19
    00982 5023      SUBI	R18,3
    00983 4030      SBCI	R19,0
    00984 018C      MOVW	R16,R24
    00985 D90E      RCALL	_GLCD_Line
(0153)     GLCD_Line(x-6,y,x,y+6);
    00986 2F86      MOV	R24,R22
    00987 2799      CLR	R25
    00988 9606      ADIW	R24,6
    00989 839B      STD	Y+3,R25
    0098A 838A      STD	Y+2,R24
    0098B 2E24      MOV	R2,R20
    0098C 2433      CLR	R3
    0098D 8239      STD	Y+1,R3
    0098E 8228      ST	Y,R2
    0098F 2F26      MOV	R18,R22
    00990 2733      CLR	R19
    00991 2D02      MOV	R16,R2
    00992 2711      CLR	R17
    00993 5006      SUBI	R16,6
    00994 4010      SBCI	R17,0
    00995 D8FE      RCALL	_GLCD_Line
(0154)     GLCD_Line(x+6,y,x,y+6);
    00996 2F86      MOV	R24,R22
    00997 2799      CLR	R25
    00998 9606      ADIW	R24,6
    00999 839B      STD	Y+3,R25
    0099A 838A      STD	Y+2,R24
    0099B 2E24      MOV	R2,R20
    0099C 2433      CLR	R3
    0099D 8239      STD	Y+1,R3
    0099E 8228      ST	Y,R2
    0099F 2F26      MOV	R18,R22
    009A0 2733      CLR	R19
    009A1 2D02      MOV	R16,R2
    009A2 2711      CLR	R17
    009A3 5F0A      SUBI	R16,0xFA
    009A4 4F1F      SBCI	R17,0xFF
    009A5 D8EE      RCALL	_GLCD_Line
    009A6 9624      ADIW	R28,4
    009A7 940C 470C JMP	pop_xgsetF03C
_rGLCD_fail:
  y                    --> R12
  x                    --> R10
  j                    --> R12
  i                    --> R10
    009A9 940E 46CE CALL	push_xgset003C
    009AB 0169      MOVW	R12,R18
    009AC 0158      MOVW	R10,R16
    009AD 9724      SBIW	R28,4
(0155) }
(0156) void rGLCD_fail(int i,int j)
(0157) {
(0158)     unsigned char x=133+13*i;
    009AE E00D      LDI	R16,0xD
    009AF E010      LDI	R17,0
    009B0 0195      MOVW	R18,R10
    009B1 940E 4674 CALL	empy16s
    009B3 01C8      MOVW	R24,R16
    009B4 578B      SUBI	R24,0x7B
    009B5 4F9F      SBCI	R25,0xFF
    009B6 2EA8      MOV	R10,R24
(0159)     unsigned char y=19+13*j;
    009B7 E00D      LDI	R16,0xD
    009B8 E010      LDI	R17,0
    009B9 0196      MOVW	R18,R12
    009BA 940E 4674 CALL	empy16s
    009BC 01C8      MOVW	R24,R16
    009BD 9643      ADIW	R24,0x13
    009BE 2EC8      MOV	R12,R24
(0160)     GLCD_Line(x-6,y-6,x+6,y+6);
    009BF 2799      CLR	R25
    009C0 9606      ADIW	R24,6
    009C1 839B      STD	Y+3,R25
    009C2 838A      STD	Y+2,R24
    009C3 2D8A      MOV	R24,R10
    009C4 2799      CLR	R25
    009C5 9606      ADIW	R24,6
    009C6 8399      STD	Y+1,R25
    009C7 8388      ST	Y,R24
    009C8 2D2C      MOV	R18,R12
    009C9 2733      CLR	R19
    009CA 5026      SUBI	R18,6
    009CB 4030      SBCI	R19,0
    009CC 2D0A      MOV	R16,R10
    009CD 2711      CLR	R17
    009CE 5006      SUBI	R16,6
    009CF 4010      SBCI	R17,0
    009D0 D8C3      RCALL	_GLCD_Line
(0161)     GLCD_Line(x+6,y-6,x-6,y+6);
    009D1 2D8C      MOV	R24,R12
    009D2 2799      CLR	R25
    009D3 9606      ADIW	R24,6
    009D4 839B      STD	Y+3,R25
    009D5 838A      STD	Y+2,R24
    009D6 2D8A      MOV	R24,R10
    009D7 2799      CLR	R25
    009D8 9706      SBIW	R24,6
    009D9 8399      STD	Y+1,R25
    009DA 8388      ST	Y,R24
    009DB 2D2C      MOV	R18,R12
    009DC 2733      CLR	R19
    009DD 5026      SUBI	R18,6
    009DE 4030      SBCI	R19,0
    009DF 2D0A      MOV	R16,R10
    009E0 2711      CLR	R17
    009E1 5F0A      SUBI	R16,0xFA
    009E2 4F1F      SBCI	R17,0xFF
    009E3 D8B0      RCALL	_GLCD_Line
(0162)     GLCD_Line(x-5,y-6,x+6,y+5);
    009E4 2D8C      MOV	R24,R12
    009E5 2799      CLR	R25
    009E6 9605      ADIW	R24,5
    009E7 839B      STD	Y+3,R25
    009E8 838A      STD	Y+2,R24
    009E9 2D8A      MOV	R24,R10
    009EA 2799      CLR	R25
    009EB 9606      ADIW	R24,6
    009EC 8399      STD	Y+1,R25
    009ED 8388      ST	Y,R24
    009EE 2D2C      MOV	R18,R12
    009EF 2733      CLR	R19
    009F0 5026      SUBI	R18,6
    009F1 4030      SBCI	R19,0
    009F2 2D0A      MOV	R16,R10
    009F3 2711      CLR	R17
    009F4 5005      SUBI	R16,5
    009F5 4010      SBCI	R17,0
    009F6 D89D      RCALL	_GLCD_Line
(0163)     GLCD_Line(x-6,y-5,x+5,y+6);
    009F7 2D8C      MOV	R24,R12
    009F8 2799      CLR	R25
    009F9 9606      ADIW	R24,6
    009FA 839B      STD	Y+3,R25
    009FB 838A      STD	Y+2,R24
    009FC 2D8A      MOV	R24,R10
    009FD 2799      CLR	R25
    009FE 9605      ADIW	R24,5
    009FF 8399      STD	Y+1,R25
    00A00 8388      ST	Y,R24
    00A01 2D2C      MOV	R18,R12
    00A02 2733      CLR	R19
    00A03 5025      SUBI	R18,5
    00A04 4030      SBCI	R19,0
    00A05 2D0A      MOV	R16,R10
    00A06 2711      CLR	R17
    00A07 5006      SUBI	R16,6
    00A08 4010      SBCI	R17,0
    00A09 D88A      RCALL	_GLCD_Line
(0164)     GLCD_Line(x-6,y+5,x+5,y-6);
    00A0A 2D8C      MOV	R24,R12
    00A0B 2799      CLR	R25
    00A0C 9706      SBIW	R24,6
    00A0D 839B      STD	Y+3,R25
    00A0E 838A      STD	Y+2,R24
    00A0F 2D8A      MOV	R24,R10
    00A10 2799      CLR	R25
    00A11 9605      ADIW	R24,5
    00A12 8399      STD	Y+1,R25
    00A13 8388      ST	Y,R24
    00A14 2D2C      MOV	R18,R12
    00A15 2733      CLR	R19
    00A16 5F2B      SUBI	R18,0xFB
    00A17 4F3F      SBCI	R19,0xFF
    00A18 2D0A      MOV	R16,R10
    00A19 2711      CLR	R17
    00A1A 5006      SUBI	R16,6
    00A1B 4010      SBCI	R17,0
    00A1C D877      RCALL	_GLCD_Line
(0165)     GLCD_Line(x-5,y+6,x+6,y-5);
    00A1D 2D8C      MOV	R24,R12
    00A1E 2799      CLR	R25
    00A1F 9705      SBIW	R24,5
    00A20 839B      STD	Y+3,R25
    00A21 838A      STD	Y+2,R24
    00A22 2D8A      MOV	R24,R10
    00A23 2799      CLR	R25
    00A24 9606      ADIW	R24,6
    00A25 8399      STD	Y+1,R25
    00A26 8388      ST	Y,R24
    00A27 2D2C      MOV	R18,R12
    00A28 2733      CLR	R19
    00A29 5F2A      SUBI	R18,0xFA
    00A2A 4F3F      SBCI	R19,0xFF
    00A2B 2D0A      MOV	R16,R10
    00A2C 2711      CLR	R17
    00A2D 5005      SUBI	R16,5
    00A2E 4010      SBCI	R17,0
    00A2F D864      RCALL	_GLCD_Line
    00A30 9624      ADIW	R28,4
    00A31 940C 46B8 JMP	pop_xgset003C
_rGLCD_rock:
  y                    --> R22
  x                    --> R20
  j                    --> R10
  i                    --> R12
    00A33 940E 4703 CALL	push_xgsetF03C
    00A35 0159      MOVW	R10,R18
    00A36 0168      MOVW	R12,R16
    00A37 9724      SBIW	R28,4
(0166) }
(0167) 
(0168) void rGLCD_rock(int i, int j)
(0169) {
(0170)     unsigned char x=133+13*i;
    00A38 E00D      LDI	R16,0xD
    00A39 E010      LDI	R17,0
    00A3A 0196      MOVW	R18,R12
    00A3B 940E 4674 CALL	empy16s
    00A3D 01A8      MOVW	R20,R16
    00A3E 574B      SUBI	R20,0x7B
    00A3F 4F5F      SBCI	R21,0xFF
(0171)     unsigned char y=19+13*j;
    00A40 E00D      LDI	R16,0xD
    00A41 E010      LDI	R17,0
    00A42 0195      MOVW	R18,R10
    00A43 940E 4674 CALL	empy16s
    00A45 01B8      MOVW	R22,R16
    00A46 5E6D      SUBI	R22,0xED
    00A47 4F7F      SBCI	R23,0xFF
(0172)     GLCD_Line(x-2,y-5,x-5,y-2);
    00A48 2F86      MOV	R24,R22
    00A49 2799      CLR	R25
    00A4A 9702      SBIW	R24,2
    00A4B 839B      STD	Y+3,R25
    00A4C 838A      STD	Y+2,R24
    00A4D 2F84      MOV	R24,R20
    00A4E 2799      CLR	R25
    00A4F 9705      SBIW	R24,5
    00A50 8399      STD	Y+1,R25
    00A51 8388      ST	Y,R24
    00A52 2F26      MOV	R18,R22
    00A53 2733      CLR	R19
    00A54 5025      SUBI	R18,5
    00A55 4030      SBCI	R19,0
    00A56 2F04      MOV	R16,R20
    00A57 2711      CLR	R17
    00A58 5002      SUBI	R16,2
    00A59 4010      SBCI	R17,0
    00A5A D839      RCALL	_GLCD_Line
(0173)     GLCD_Line(x-2,y-4,x-5,y-1);
    00A5B 2F86      MOV	R24,R22
    00A5C 2799      CLR	R25
    00A5D 9701      SBIW	R24,1
    00A5E 839B      STD	Y+3,R25
    00A5F 838A      STD	Y+2,R24
    00A60 2F84      MOV	R24,R20
    00A61 2799      CLR	R25
    00A62 9705      SBIW	R24,5
    00A63 8399      STD	Y+1,R25
    00A64 8388      ST	Y,R24
    00A65 2F26      MOV	R18,R22
    00A66 2733      CLR	R19
    00A67 5024      SUBI	R18,4
    00A68 4030      SBCI	R19,0
    00A69 2F04      MOV	R16,R20
    00A6A 2711      CLR	R17
    00A6B 5002      SUBI	R16,2
    00A6C 4010      SBCI	R17,0
    00A6D D826      RCALL	_GLCD_Line
(0174)     GLCD_SetPixel(x-3,y-5,color);
    00A6E 9020 0100 LDS	R2,color
    00A70 8228      ST	Y,R2
    00A71 2F26      MOV	R18,R22
    00A72 5025      SUBI	R18,5
    00A73 2F04      MOV	R16,R20
    00A74 5003      SUBI	R16,3
    00A75 D9BB      RCALL	_GLCD_SetPixel
(0175)     GLCD_Line(x-5,y-1,x-2,y+2);
    00A76 2F86      MOV	R24,R22
    00A77 2799      CLR	R25
    00A78 9602      ADIW	R24,2
    00A79 839B      STD	Y+3,R25
    00A7A 838A      STD	Y+2,R24
    00A7B 2F84      MOV	R24,R20
    00A7C 2799      CLR	R25
    00A7D 9702      SBIW	R24,2
    00A7E 8399      STD	Y+1,R25
    00A7F 8388      ST	Y,R24
    00A80 2F26      MOV	R18,R22
    00A81 2733      CLR	R19
    00A82 5021      SUBI	R18,1
    00A83 4030      SBCI	R19,0
    00A84 2F04      MOV	R16,R20
    00A85 2711      CLR	R17
    00A86 5005      SUBI	R16,5
    00A87 4010      SBCI	R17,0
    00A88 D80B      RCALL	_GLCD_Line
(0176)     GLCD_Line(x-5,y-2,x-2,y+1);
    00A89 2F86      MOV	R24,R22
    00A8A 2799      CLR	R25
    00A8B 9601      ADIW	R24,1
    00A8C 839B      STD	Y+3,R25
    00A8D 838A      STD	Y+2,R24
    00A8E 2F84      MOV	R24,R20
    00A8F 2799      CLR	R25
    00A90 9702      SBIW	R24,2
    00A91 8399      STD	Y+1,R25
    00A92 8388      ST	Y,R24
    00A93 2F26      MOV	R18,R22
    00A94 2733      CLR	R19
    00A95 5022      SUBI	R18,2
    00A96 4030      SBCI	R19,0
    00A97 2F04      MOV	R16,R20
    00A98 2711      CLR	R17
    00A99 5005      SUBI	R16,5
    00A9A 4010      SBCI	R17,0
    00A9B 940E 0294 CALL	_GLCD_Line
(0177)     GLCD_Line(x-2,y+1,x-5,y+4);
    00A9D 2F86      MOV	R24,R22
    00A9E 2799      CLR	R25
    00A9F 9604      ADIW	R24,4
    00AA0 839B      STD	Y+3,R25
    00AA1 838A      STD	Y+2,R24
    00AA2 2F84      MOV	R24,R20
    00AA3 2799      CLR	R25
    00AA4 9705      SBIW	R24,5
    00AA5 8399      STD	Y+1,R25
    00AA6 8388      ST	Y,R24
    00AA7 2F26      MOV	R18,R22
    00AA8 2733      CLR	R19
    00AA9 5F2F      SUBI	R18,0xFF
    00AAA 4F3F      SBCI	R19,0xFF
    00AAB 2F04      MOV	R16,R20
    00AAC 2711      CLR	R17
    00AAD 5002      SUBI	R16,2
    00AAE 4010      SBCI	R17,0
    00AAF 940E 0294 CALL	_GLCD_Line
(0178)     GLCD_Line(x-2,y+2,x-5,y+5);
    00AB1 2F86      MOV	R24,R22
    00AB2 2799      CLR	R25
    00AB3 9605      ADIW	R24,5
    00AB4 839B      STD	Y+3,R25
    00AB5 838A      STD	Y+2,R24
    00AB6 2F84      MOV	R24,R20
    00AB7 2799      CLR	R25
    00AB8 9705      SBIW	R24,5
    00AB9 8399      STD	Y+1,R25
    00ABA 8388      ST	Y,R24
    00ABB 2F26      MOV	R18,R22
    00ABC 2733      CLR	R19
    00ABD 5F2E      SUBI	R18,0xFE
    00ABE 4F3F      SBCI	R19,0xFF
    00ABF 2F04      MOV	R16,R20
    00AC0 2711      CLR	R17
    00AC1 5002      SUBI	R16,2
    00AC2 4010      SBCI	R17,0
    00AC3 940E 0294 CALL	_GLCD_Line
(0179)     GLCD_SetPixel(x-4,y+5,color);
    00AC5 9020 0100 LDS	R2,color
    00AC7 8228      ST	Y,R2
    00AC8 2F26      MOV	R18,R22
    00AC9 5F2B      SUBI	R18,0xFB
    00ACA 2F04      MOV	R16,R20
    00ACB 5004      SUBI	R16,4
    00ACC D964      RCALL	_GLCD_SetPixel
(0180)     GLCD_SetPixel(x+1,y-5,color);
    00ACD 9020 0100 LDS	R2,color
    00ACF 8228      ST	Y,R2
    00AD0 2F26      MOV	R18,R22
    00AD1 5025      SUBI	R18,5
    00AD2 2F04      MOV	R16,R20
    00AD3 5F0F      SUBI	R16,0xFF
    00AD4 D95C      RCALL	_GLCD_SetPixel
(0181)     GLCD_Line(x+2,y-5,x-1,y+2);
    00AD5 2F86      MOV	R24,R22
    00AD6 2799      CLR	R25
    00AD7 9602      ADIW	R24,2
    00AD8 839B      STD	Y+3,R25
    00AD9 838A      STD	Y+2,R24
    00ADA 2F84      MOV	R24,R20
    00ADB 2799      CLR	R25
    00ADC 9701      SBIW	R24,1
    00ADD 8399      STD	Y+1,R25
    00ADE 8388      ST	Y,R24
    00ADF 2F26      MOV	R18,R22
    00AE0 2733      CLR	R19
    00AE1 5025      SUBI	R18,5
    00AE2 4030      SBCI	R19,0
    00AE3 2F04      MOV	R16,R20
    00AE4 2711      CLR	R17
    00AE5 5F0E      SUBI	R16,0xFE
    00AE6 4F1F      SBCI	R17,0xFF
    00AE7 940E 0294 CALL	_GLCD_Line
(0182)     GLCD_Line(x+2,y-4,x-1,y+1);
    00AE9 2F86      MOV	R24,R22
    00AEA 2799      CLR	R25
    00AEB 9601      ADIW	R24,1
    00AEC 839B      STD	Y+3,R25
    00AED 838A      STD	Y+2,R24
    00AEE 2F84      MOV	R24,R20
    00AEF 2799      CLR	R25
    00AF0 9701      SBIW	R24,1
    00AF1 8399      STD	Y+1,R25
    00AF2 8388      ST	Y,R24
    00AF3 2F26      MOV	R18,R22
    00AF4 2733      CLR	R19
    00AF5 5024      SUBI	R18,4
    00AF6 4030      SBCI	R19,0
    00AF7 2F04      MOV	R16,R20
    00AF8 2711      CLR	R17
    00AF9 5F0E      SUBI	R16,0xFE
    00AFA 4F1F      SBCI	R17,0xFF
    00AFB 940E 0294 CALL	_GLCD_Line
(0183)     GLCD_Line(x-1,y+2,x+2,y+1);
    00AFD 2F86      MOV	R24,R22
    00AFE 2799      CLR	R25
    00AFF 9601      ADIW	R24,1
    00B00 839B      STD	Y+3,R25
    00B01 838A      STD	Y+2,R24
    00B02 2F84      MOV	R24,R20
    00B03 2799      CLR	R25
    00B04 9602      ADIW	R24,2
    00B05 8399      STD	Y+1,R25
    00B06 8388      ST	Y,R24
    00B07 2F26      MOV	R18,R22
    00B08 2733      CLR	R19
    00B09 5F2E      SUBI	R18,0xFE
    00B0A 4F3F      SBCI	R19,0xFF
    00B0B 2F04      MOV	R16,R20
    00B0C 2711      CLR	R17
    00B0D 5001      SUBI	R16,1
    00B0E 4010      SBCI	R17,0
    00B0F 940E 0294 CALL	_GLCD_Line
(0184)     GLCD_Line(x-1,y+1,x+2,y+2);
    00B11 2F86      MOV	R24,R22
    00B12 2799      CLR	R25
    00B13 9602      ADIW	R24,2
    00B14 839B      STD	Y+3,R25
    00B15 838A      STD	Y+2,R24
    00B16 2F84      MOV	R24,R20
    00B17 2799      CLR	R25
    00B18 9602      ADIW	R24,2
    00B19 8399      STD	Y+1,R25
    00B1A 8388      ST	Y,R24
    00B1B 2F26      MOV	R18,R22
    00B1C 2733      CLR	R19
    00B1D 5F2F      SUBI	R18,0xFF
    00B1E 4F3F      SBCI	R19,0xFF
    00B1F 2F04      MOV	R16,R20
    00B20 2711      CLR	R17
    00B21 5001      SUBI	R16,1
    00B22 4010      SBCI	R17,0
    00B23 940E 0294 CALL	_GLCD_Line
(0185)     GLCD_Line(x+2,y+1,x-1,y+4);
    00B25 2F86      MOV	R24,R22
    00B26 2799      CLR	R25
    00B27 9604      ADIW	R24,4
    00B28 839B      STD	Y+3,R25
    00B29 838A      STD	Y+2,R24
    00B2A 2F84      MOV	R24,R20
    00B2B 2799      CLR	R25
    00B2C 9701      SBIW	R24,1
    00B2D 8399      STD	Y+1,R25
    00B2E 8388      ST	Y,R24
    00B2F 2F26      MOV	R18,R22
    00B30 2733      CLR	R19
    00B31 5F2F      SUBI	R18,0xFF
    00B32 4F3F      SBCI	R19,0xFF
    00B33 2F04      MOV	R16,R20
    00B34 2711      CLR	R17
    00B35 5F0E      SUBI	R16,0xFE
    00B36 4F1F      SBCI	R17,0xFF
    00B37 940E 0294 CALL	_GLCD_Line
(0186)     GLCD_Line(x+2,y+2,x-1,y+5);
    00B39 2F86      MOV	R24,R22
    00B3A 2799      CLR	R25
    00B3B 9605      ADIW	R24,5
    00B3C 839B      STD	Y+3,R25
    00B3D 838A      STD	Y+2,R24
    00B3E 2F84      MOV	R24,R20
    00B3F 2799      CLR	R25
    00B40 9701      SBIW	R24,1
    00B41 8399      STD	Y+1,R25
    00B42 8388      ST	Y,R24
    00B43 2F26      MOV	R18,R22
    00B44 2733      CLR	R19
    00B45 5F2E      SUBI	R18,0xFE
    00B46 4F3F      SBCI	R19,0xFF
    00B47 2F04      MOV	R16,R20
    00B48 2711      CLR	R17
    00B49 5F0E      SUBI	R16,0xFE
    00B4A 4F1F      SBCI	R17,0xFF
    00B4B 940E 0294 CALL	_GLCD_Line
(0187)     GLCD_SetPixel(x,y+5,color);
    00B4D 9020 0100 LDS	R2,color
    00B4F 8228      ST	Y,R2
    00B50 2F26      MOV	R18,R22
    00B51 5F2B      SUBI	R18,0xFB
    00B52 2F04      MOV	R16,R20
    00B53 D8DD      RCALL	_GLCD_SetPixel
(0188)     GLCD_SetPixel(x+5,y-5,color);
    00B54 9020 0100 LDS	R2,color
    00B56 8228      ST	Y,R2
    00B57 2F26      MOV	R18,R22
    00B58 5025      SUBI	R18,5
    00B59 2F04      MOV	R16,R20
    00B5A 5F0B      SUBI	R16,0xFB
    00B5B D8D5      RCALL	_GLCD_SetPixel
(0189)     GLCD_Line(x+6,y-5,x+3,y-2);
    00B5C 2F86      MOV	R24,R22
    00B5D 2799      CLR	R25
    00B5E 9702      SBIW	R24,2
    00B5F 839B      STD	Y+3,R25
    00B60 838A      STD	Y+2,R24
    00B61 2F84      MOV	R24,R20
    00B62 2799      CLR	R25
    00B63 9603      ADIW	R24,3
    00B64 8399      STD	Y+1,R25
    00B65 8388      ST	Y,R24
    00B66 2F26      MOV	R18,R22
    00B67 2733      CLR	R19
    00B68 5025      SUBI	R18,5
    00B69 4030      SBCI	R19,0
    00B6A 2F04      MOV	R16,R20
    00B6B 2711      CLR	R17
    00B6C 5F0A      SUBI	R16,0xFA
    00B6D 4F1F      SBCI	R17,0xFF
    00B6E 940E 0294 CALL	_GLCD_Line
(0190)     GLCD_Line(x+6,y-4,x+3,y-1);
    00B70 2F86      MOV	R24,R22
    00B71 2799      CLR	R25
    00B72 9701      SBIW	R24,1
    00B73 839B      STD	Y+3,R25
    00B74 838A      STD	Y+2,R24
    00B75 2F84      MOV	R24,R20
    00B76 2799      CLR	R25
    00B77 9603      ADIW	R24,3
    00B78 8399      STD	Y+1,R25
    00B79 8388      ST	Y,R24
    00B7A 2F26      MOV	R18,R22
    00B7B 2733      CLR	R19
    00B7C 5024      SUBI	R18,4
    00B7D 4030      SBCI	R19,0
    00B7E 2F04      MOV	R16,R20
    00B7F 2711      CLR	R17
    00B80 5F0A      SUBI	R16,0xFA
    00B81 4F1F      SBCI	R17,0xFF
    00B82 940E 0294 CALL	_GLCD_Line
(0191)     GLCD_Line(x+3,y-2,x+6,y+1);
    00B84 2F86      MOV	R24,R22
    00B85 2799      CLR	R25
    00B86 9601      ADIW	R24,1
    00B87 839B      STD	Y+3,R25
    00B88 838A      STD	Y+2,R24
    00B89 2F84      MOV	R24,R20
    00B8A 2799      CLR	R25
    00B8B 9606      ADIW	R24,6
    00B8C 8399      STD	Y+1,R25
    00B8D 8388      ST	Y,R24
    00B8E 2F26      MOV	R18,R22
    00B8F 2733      CLR	R19
    00B90 5022      SUBI	R18,2
    00B91 4030      SBCI	R19,0
    00B92 2F04      MOV	R16,R20
    00B93 2711      CLR	R17
    00B94 5F0D      SUBI	R16,0xFD
    00B95 4F1F      SBCI	R17,0xFF
    00B96 940E 0294 CALL	_GLCD_Line
(0192)     GLCD_Line(x+3,y-1,x+6,y+2);
    00B98 2F86      MOV	R24,R22
    00B99 2799      CLR	R25
    00B9A 9602      ADIW	R24,2
    00B9B 839B      STD	Y+3,R25
    00B9C 838A      STD	Y+2,R24
    00B9D 2F84      MOV	R24,R20
    00B9E 2799      CLR	R25
    00B9F 9606      ADIW	R24,6
    00BA0 8399      STD	Y+1,R25
    00BA1 8388      ST	Y,R24
    00BA2 2F26      MOV	R18,R22
    00BA3 2733      CLR	R19
    00BA4 5021      SUBI	R18,1
    00BA5 4030      SBCI	R19,0
    00BA6 2F04      MOV	R16,R20
    00BA7 2711      CLR	R17
    00BA8 5F0D      SUBI	R16,0xFD
    00BA9 4F1F      SBCI	R17,0xFF
    00BAA 940E 0294 CALL	_GLCD_Line
(0193)     GLCD_Line(x+6,y+1,x+3,y+4);
    00BAC 2F86      MOV	R24,R22
    00BAD 2799      CLR	R25
    00BAE 9604      ADIW	R24,4
    00BAF 839B      STD	Y+3,R25
    00BB0 838A      STD	Y+2,R24
    00BB1 2F84      MOV	R24,R20
    00BB2 2799      CLR	R25
    00BB3 9603      ADIW	R24,3
    00BB4 8399      STD	Y+1,R25
    00BB5 8388      ST	Y,R24
    00BB6 2F26      MOV	R18,R22
    00BB7 2733      CLR	R19
    00BB8 5F2F      SUBI	R18,0xFF
    00BB9 4F3F      SBCI	R19,0xFF
    00BBA 2F04      MOV	R16,R20
    00BBB 2711      CLR	R17
    00BBC 5F0A      SUBI	R16,0xFA
    00BBD 4F1F      SBCI	R17,0xFF
    00BBE 940E 0294 CALL	_GLCD_Line
(0194)     GLCD_Line(x+6,y+2,x+3,y+5);
    00BC0 2F86      MOV	R24,R22
    00BC1 2799      CLR	R25
    00BC2 9605      ADIW	R24,5
    00BC3 839B      STD	Y+3,R25
    00BC4 838A      STD	Y+2,R24
    00BC5 2F84      MOV	R24,R20
    00BC6 2799      CLR	R25
    00BC7 9603      ADIW	R24,3
    00BC8 8399      STD	Y+1,R25
    00BC9 8388      ST	Y,R24
    00BCA 2F26      MOV	R18,R22
    00BCB 2733      CLR	R19
    00BCC 5F2E      SUBI	R18,0xFE
    00BCD 4F3F      SBCI	R19,0xFF
    00BCE 2F04      MOV	R16,R20
    00BCF 2711      CLR	R17
    00BD0 5F0A      SUBI	R16,0xFA
    00BD1 4F1F      SBCI	R17,0xFF
    00BD2 940E 0294 CALL	_GLCD_Line
(0195)     GLCD_SetPixel(x+4,y+5,color);
    00BD4 9020 0100 LDS	R2,color
(0196) }
_GLCD_screen:
  i                    --> R20
    00BDF 940E 46DD CALL	push_xgsetF000
    00BE1 9724      SBIW	R28,4
FILE: C:\Users\EE-01\Desktop\ÃÖÃÖÁ¾\lsetting.h
(0001) 
(0002) void GLCD_screen(void)
(0003) {
(0004)     int i;
(0005)     for(i=0;i<9;i++)
    00BE2 2744      CLR	R20
    00BE3 2755      CLR	R21
(0006)     {
(0007)         GLCD_Line(8+13*i,12,8+13*i,116);
    00BE4 E784      LDI	R24,0x74
    00BE5 E090      LDI	R25,0
    00BE6 839B      STD	Y+3,R25
    00BE7 838A      STD	Y+2,R24
    00BE8 E00D      LDI	R16,0xD
    00BE9 E010      LDI	R17,0
    00BEA 019A      MOVW	R18,R20
    00BEB 940E 4674 CALL	empy16s
    00BED 01C8      MOVW	R24,R16
    00BEE 9608      ADIW	R24,0x8
    00BEF 8399      STD	Y+1,R25
    00BF0 8388      ST	Y,R24
    00BF1 E02C      LDI	R18,0xC
    00BF2 E030      LDI	R19,0
    00BF3 018C      MOVW	R16,R24
    00BF4 940E 0294 CALL	_GLCD_Line
(0008)         GLCD_Line(8,12+13*i,112,12+13*i);
    00BF6 E00D      LDI	R16,0xD
    00BF7 E010      LDI	R17,0
    00BF8 019A      MOVW	R18,R20
    00BF9 940E 4674 CALL	empy16s
    00BFB 01C8      MOVW	R24,R16
    00BFC 960C      ADIW	R24,0xC
    00BFD 011C      MOVW	R2,R24
    00BFE 823B      STD	Y+3,R3
    00BFF 822A      STD	Y+2,R2
    00C00 E780      LDI	R24,0x70
    00C01 E090      LDI	R25,0
    00C02 8399      STD	Y+1,R25
    00C03 8388      ST	Y,R24
    00C04 0191      MOVW	R18,R2
    00C05 E008      LDI	R16,0x8
    00C06 E010      LDI	R17,0
    00C07 940E 0294 CALL	_GLCD_Line
(0009)         GLCD_Line(127+13*i,12,127+13*i,116);
    00C09 E784      LDI	R24,0x74
    00C0A E090      LDI	R25,0
    00C0B 839B      STD	Y+3,R25
    00C0C 838A      STD	Y+2,R24
    00C0D E00D      LDI	R16,0xD
    00C0E E010      LDI	R17,0
    00C0F 019A      MOVW	R18,R20
    00C10 940E 4674 CALL	empy16s
    00C12 01B8      MOVW	R22,R16
    00C13 5861      SUBI	R22,0x81
    00C14 4F7F      SBCI	R23,0xFF
    00C15 8379      STD	Y+1,R23
    00C16 8368      ST	Y,R22
    00C17 E02C      LDI	R18,0xC
    00C18 E030      LDI	R19,0
    00C19 018B      MOVW	R16,R22
    00C1A 940E 0294 CALL	_GLCD_Line
(0010)         GLCD_Line(127,12+13*i,231,12+13*i);
    00C1C E00D      LDI	R16,0xD
    00C1D E010      LDI	R17,0
    00C1E 019A      MOVW	R18,R20
    00C1F 940E 4674 CALL	empy16s
    00C21 01B8      MOVW	R22,R16
    00C22 5F64      SUBI	R22,0xF4
    00C23 4F7F      SBCI	R23,0xFF
    00C24 837B      STD	Y+3,R23
    00C25 836A      STD	Y+2,R22
    00C26 EE87      LDI	R24,0xE7
    00C27 E090      LDI	R25,0
    00C28 8399      STD	Y+1,R25
    00C29 8388      ST	Y,R24
    00C2A 019B      MOVW	R18,R22
    00C2B E70F      LDI	R16,0x7F
    00C2C E010      LDI	R17,0
    00C2D 940E 0294 CALL	_GLCD_Line
(0011)     }
    00C2F 5F4F      SUBI	R20,0xFF
    00C30 4F5F      SBCI	R21,0xFF
    00C31 3049      CPI	R20,0x9
    00C32 E0E0      LDI	R30,0
    00C33 075E      CPC	R21,R30
    00C34 F40C      BGE	0x0C36
    00C35 CFAE      RJMP	0x0BE4
    00C36 9624      ADIW	R28,4
    00C37 940C 46E2 JMP	pop_xgsetF000
_begin_cursoron:
  y                    --> R10
  x                    --> R12
    00C39 940E 46F5 CALL	push_xgset303C
    00C3B 2EA2      MOV	R10,R18
    00C3C 2EC0      MOV	R12,R16
    00C3D 9724      SBIW	R28,4
(0012) }
(0013) void begin_cursoron(unsigned char x, unsigned char y)
(0014) {
(0015)     GLCD_Line(x+2,y+9,x+2,y+12);
    00C3E 2D8A      MOV	R24,R10
    00C3F 2799      CLR	R25
    00C40 960C      ADIW	R24,0xC
    00C41 839B      STD	Y+3,R25
    00C42 838A      STD	Y+2,R24
    00C43 2D8C      MOV	R24,R12
    00C44 2799      CLR	R25
    00C45 9602      ADIW	R24,2
    00C46 8399      STD	Y+1,R25
    00C47 8388      ST	Y,R24
    00C48 2D2A      MOV	R18,R10
    00C49 2733      CLR	R19
    00C4A 5F27      SUBI	R18,0xF7
    00C4B 4F3F      SBCI	R19,0xFF
    00C4C 018C      MOVW	R16,R24
    00C4D 940E 0294 CALL	_GLCD_Line
(0016)     GLCD_Line(x+3,y+9,x+3,y+15);
    00C4F 2D8A      MOV	R24,R10
    00C50 2799      CLR	R25
    00C51 960F      ADIW	R24,0xF
    00C52 839B      STD	Y+3,R25
    00C53 838A      STD	Y+2,R24
    00C54 2D8C      MOV	R24,R12
    00C55 2799      CLR	R25
    00C56 9603      ADIW	R24,3
    00C57 8399      STD	Y+1,R25
    00C58 8388      ST	Y,R24
    00C59 2D2A      MOV	R18,R10
    00C5A 2733      CLR	R19
    00C5B 5F27      SUBI	R18,0xF7
    00C5C 4F3F      SBCI	R19,0xFF
    00C5D 018C      MOVW	R16,R24
    00C5E 940E 0294 CALL	_GLCD_Line
(0017)     GLCD_Line(x+4,y+9,x+4,y+15);
    00C60 2D8A      MOV	R24,R10
    00C61 2799      CLR	R25
    00C62 960F      ADIW	R24,0xF
    00C63 839B      STD	Y+3,R25
    00C64 838A      STD	Y+2,R24
    00C65 2D4C      MOV	R20,R12
    00C66 2755      CLR	R21
    00C67 5F4C      SUBI	R20,0xFC
    00C68 4F5F      SBCI	R21,0xFF
    00C69 8359      STD	Y+1,R21
    00C6A 8348      ST	Y,R20
    00C6B 2D2A      MOV	R18,R10
    00C6C 2733      CLR	R19
    00C6D 5F27      SUBI	R18,0xF7
    00C6E 4F3F      SBCI	R19,0xFF
    00C6F 018A      MOVW	R16,R20
    00C70 940E 0294 CALL	_GLCD_Line
(0018)     GLCD_Line(x+5,y+9,x+5,y+18);
    00C72 2D8A      MOV	R24,R10
    00C73 2799      CLR	R25
    00C74 9642      ADIW	R24,0x12
    00C75 839B      STD	Y+3,R25
    00C76 838A      STD	Y+2,R24
    00C77 2D4C      MOV	R20,R12
    00C78 2755      CLR	R21
    00C79 5F4B      SUBI	R20,0xFB
    00C7A 4F5F      SBCI	R21,0xFF
    00C7B 8359      STD	Y+1,R21
    00C7C 8348      ST	Y,R20
    00C7D 2D2A      MOV	R18,R10
    00C7E 2733      CLR	R19
    00C7F 5F27      SUBI	R18,0xF7
    00C80 4F3F      SBCI	R19,0xFF
    00C81 018A      MOVW	R16,R20
    00C82 940E 0294 CALL	_GLCD_Line
(0019)     GLCD_Line(x+6,y+11,x+6,y+21);
    00C84 2D8A      MOV	R24,R10
    00C85 2799      CLR	R25
    00C86 9645      ADIW	R24,0x15
    00C87 839B      STD	Y+3,R25
    00C88 838A      STD	Y+2,R24
    00C89 2D4C      MOV	R20,R12
    00C8A 2755      CLR	R21
    00C8B 5F4A      SUBI	R20,0xFA
    00C8C 4F5F      SBCI	R21,0xFF
    00C8D 8359      STD	Y+1,R21
    00C8E 8348      ST	Y,R20
    00C8F 2D2A      MOV	R18,R10
    00C90 2733      CLR	R19
    00C91 5F25      SUBI	R18,0xF5
    00C92 4F3F      SBCI	R19,0xFF
    00C93 018A      MOVW	R16,R20
    00C94 940E 0294 CALL	_GLCD_Line
(0020)     GLCD_Line(x+7,y+1,x+7,y+24);
    00C96 2D8A      MOV	R24,R10
    00C97 2799      CLR	R25
    00C98 9648      ADIW	R24,0x18
    00C99 839B      STD	Y+3,R25
    00C9A 838A      STD	Y+2,R24
    00C9B 2D4C      MOV	R20,R12
    00C9C 2755      CLR	R21
    00C9D 5F49      SUBI	R20,0xF9
    00C9E 4F5F      SBCI	R21,0xFF
    00C9F 8359      STD	Y+1,R21
    00CA0 8348      ST	Y,R20
    00CA1 2D2A      MOV	R18,R10
    00CA2 2733      CLR	R19
    00CA3 5F2F      SUBI	R18,0xFF
    00CA4 4F3F      SBCI	R19,0xFF
    00CA5 018A      MOVW	R16,R20
    00CA6 940E 0294 CALL	_GLCD_Line
(0021)     GLCD_Line(x+8,y,x+8,y+25);
    00CA8 2D8A      MOV	R24,R10
    00CA9 2799      CLR	R25
    00CAA 9649      ADIW	R24,0x19
    00CAB 839B      STD	Y+3,R25
    00CAC 838A      STD	Y+2,R24
    00CAD 2D4C      MOV	R20,R12
    00CAE 2755      CLR	R21
    00CAF 5F48      SUBI	R20,0xF8
    00CB0 4F5F      SBCI	R21,0xFF
    00CB1 8359      STD	Y+1,R21
    00CB2 8348      ST	Y,R20
    00CB3 2D2A      MOV	R18,R10
    00CB4 2733      CLR	R19
    00CB5 018A      MOVW	R16,R20
    00CB6 940E 0294 CALL	_GLCD_Line
(0022)     GLCD_Line(x+9,y,x+9,y+25);
    00CB8 2D8A      MOV	R24,R10
    00CB9 2799      CLR	R25
    00CBA 9649      ADIW	R24,0x19
    00CBB 839B      STD	Y+3,R25
    00CBC 838A      STD	Y+2,R24
    00CBD 2D4C      MOV	R20,R12
    00CBE 2755      CLR	R21
    00CBF 5F47      SUBI	R20,0xF7
    00CC0 4F5F      SBCI	R21,0xFF
    00CC1 8359      STD	Y+1,R21
    00CC2 8348      ST	Y,R20
    00CC3 2D2A      MOV	R18,R10
    00CC4 2733      CLR	R19
    00CC5 018A      MOVW	R16,R20
    00CC6 940E 0294 CALL	_GLCD_Line
(0023)     GLCD_Line(x+10,y+1,x+10,y+25);
    00CC8 2D8A      MOV	R24,R10
    00CC9 2799      CLR	R25
    00CCA 9649      ADIW	R24,0x19
    00CCB 839B      STD	Y+3,R25
    00CCC 838A      STD	Y+2,R24
    00CCD 2D4C      MOV	R20,R12
    00CCE 2755      CLR	R21
    00CCF 5F46      SUBI	R20,0xF6
    00CD0 4F5F      SBCI	R21,0xFF
    00CD1 8359      STD	Y+1,R21
    00CD2 8348      ST	Y,R20
    00CD3 2D2A      MOV	R18,R10
    00CD4 2733      CLR	R19
    00CD5 5F2F      SUBI	R18,0xFF
    00CD6 4F3F      SBCI	R19,0xFF
    00CD7 018A      MOVW	R16,R20
    00CD8 940E 0294 CALL	_GLCD_Line
(0024)     GLCD_Line(x+11,y+7,x+11,y+25);
    00CDA 2D8A      MOV	R24,R10
    00CDB 2799      CLR	R25
    00CDC 9649      ADIW	R24,0x19
    00CDD 839B      STD	Y+3,R25
    00CDE 838A      STD	Y+2,R24
    00CDF 2D4C      MOV	R20,R12
    00CE0 2755      CLR	R21
    00CE1 5F45      SUBI	R20,0xF5
    00CE2 4F5F      SBCI	R21,0xFF
    00CE3 8359      STD	Y+1,R21
    00CE4 8348      ST	Y,R20
    00CE5 2D2A      MOV	R18,R10
    00CE6 2733      CLR	R19
    00CE7 5F29      SUBI	R18,0xF9
    00CE8 4F3F      SBCI	R19,0xFF
    00CE9 018A      MOVW	R16,R20
    00CEA 940E 0294 CALL	_GLCD_Line
(0025)     GLCD_Line(x+12,y+7,x+12,y+25);
    00CEC 2D8A      MOV	R24,R10
    00CED 2799      CLR	R25
    00CEE 9649      ADIW	R24,0x19
    00CEF 839B      STD	Y+3,R25
    00CF0 838A      STD	Y+2,R24
    00CF1 2D4C      MOV	R20,R12
    00CF2 2755      CLR	R21
    00CF3 5F44      SUBI	R20,0xF4
    00CF4 4F5F      SBCI	R21,0xFF
    00CF5 8359      STD	Y+1,R21
    00CF6 8348      ST	Y,R20
    00CF7 2D2A      MOV	R18,R10
    00CF8 2733      CLR	R19
    00CF9 5F29      SUBI	R18,0xF9
    00CFA 4F3F      SBCI	R19,0xFF
    00CFB 018A      MOVW	R16,R20
    00CFC 940E 0294 CALL	_GLCD_Line
(0026)     GLCD_Line(x+13,y+8,x+13,y+25);
    00CFE 2D8A      MOV	R24,R10
    00CFF 2799      CLR	R25
    00D00 9649      ADIW	R24,0x19
    00D01 839B      STD	Y+3,R25
    00D02 838A      STD	Y+2,R24
    00D03 2D4C      MOV	R20,R12
    00D04 2755      CLR	R21
    00D05 5F43      SUBI	R20,0xF3
    00D06 4F5F      SBCI	R21,0xFF
    00D07 8359      STD	Y+1,R21
    00D08 8348      ST	Y,R20
    00D09 2D2A      MOV	R18,R10
    00D0A 2733      CLR	R19
    00D0B 5F28      SUBI	R18,0xF8
    00D0C 4F3F      SBCI	R19,0xFF
    00D0D 018A      MOVW	R16,R20
    00D0E 940E 0294 CALL	_GLCD_Line
(0027)     GLCD_Line(x+14,y+8,x+14,y+25);
    00D10 2D8A      MOV	R24,R10
    00D11 2799      CLR	R25
    00D12 9649      ADIW	R24,0x19
    00D13 839B      STD	Y+3,R25
    00D14 838A      STD	Y+2,R24
    00D15 2D4C      MOV	R20,R12
    00D16 2755      CLR	R21
    00D17 5F42      SUBI	R20,0xF2
    00D18 4F5F      SBCI	R21,0xFF
    00D19 8359      STD	Y+1,R21
    00D1A 8348      ST	Y,R20
    00D1B 2D2A      MOV	R18,R10
    00D1C 2733      CLR	R19
    00D1D 5F28      SUBI	R18,0xF8
    00D1E 4F3F      SBCI	R19,0xFF
    00D1F 018A      MOVW	R16,R20
    00D20 940E 0294 CALL	_GLCD_Line
(0028)     GLCD_Line(x+15,y+9,x+15,y+25);
    00D22 2D8A      MOV	R24,R10
    00D23 2799      CLR	R25
    00D24 9649      ADIW	R24,0x19
    00D25 839B      STD	Y+3,R25
    00D26 838A      STD	Y+2,R24
    00D27 2D4C      MOV	R20,R12
    00D28 2755      CLR	R21
    00D29 5F41      SUBI	R20,0xF1
    00D2A 4F5F      SBCI	R21,0xFF
    00D2B 8359      STD	Y+1,R21
    00D2C 8348      ST	Y,R20
    00D2D 2D2A      MOV	R18,R10
    00D2E 2733      CLR	R19
    00D2F 5F27      SUBI	R18,0xF7
    00D30 4F3F      SBCI	R19,0xFF
    00D31 018A      MOVW	R16,R20
    00D32 940E 0294 CALL	_GLCD_Line
(0029)     GLCD_Line(x+16,y+9,x+16,y+25);
    00D34 2D8A      MOV	R24,R10
    00D35 2799      CLR	R25
    00D36 9649      ADIW	R24,0x19
    00D37 839B      STD	Y+3,R25
    00D38 838A      STD	Y+2,R24
    00D39 2D4C      MOV	R20,R12
    00D3A 2755      CLR	R21
    00D3B 5F40      SUBI	R20,0xF0
    00D3C 4F5F      SBCI	R21,0xFF
    00D3D 8359      STD	Y+1,R21
    00D3E 8348      ST	Y,R20
    00D3F 2D2A      MOV	R18,R10
    00D40 2733      CLR	R19
    00D41 5F27      SUBI	R18,0xF7
    00D42 4F3F      SBCI	R19,0xFF
    00D43 018A      MOVW	R16,R20
    00D44 940E 0294 CALL	_GLCD_Line
(0030)     GLCD_Line(x+17,y+10,x+17,y+23);
    00D46 2D8A      MOV	R24,R10
    00D47 2799      CLR	R25
    00D48 9647      ADIW	R24,0x17
    00D49 839B      STD	Y+3,R25
    00D4A 838A      STD	Y+2,R24
    00D4B 2D4C      MOV	R20,R12
    00D4C 2755      CLR	R21
    00D4D 5E4F      SUBI	R20,0xEF
    00D4E 4F5F      SBCI	R21,0xFF
    00D4F 8359      STD	Y+1,R21
    00D50 8348      ST	Y,R20
    00D51 2D2A      MOV	R18,R10
    00D52 2733      CLR	R19
    00D53 5F26      SUBI	R18,0xF6
    00D54 4F3F      SBCI	R19,0xFF
    00D55 018A      MOVW	R16,R20
    00D56 940E 0294 CALL	_GLCD_Line
(0031)     GLCD_Line(x+18,y+10,x+18,y+20);
    00D58 2D8A      MOV	R24,R10
    00D59 2799      CLR	R25
    00D5A 9644      ADIW	R24,0x14
    00D5B 839B      STD	Y+3,R25
    00D5C 838A      STD	Y+2,R24
    00D5D 2D4C      MOV	R20,R12
    00D5E 2755      CLR	R21
    00D5F 5E4E      SUBI	R20,0xEE
    00D60 4F5F      SBCI	R21,0xFF
    00D61 8359      STD	Y+1,R21
    00D62 8348      ST	Y,R20
    00D63 2D2A      MOV	R18,R10
    00D64 2733      CLR	R19
    00D65 5F26      SUBI	R18,0xF6
    00D66 4F3F      SBCI	R19,0xFF
    00D67 018A      MOVW	R16,R20
    00D68 940E 0294 CALL	_GLCD_Line
(0032)     GLCD_Line(x+19,y+12,x+19,y+16);
    00D6A 2D8A      MOV	R24,R10
    00D6B 2799      CLR	R25
    00D6C 9640      ADIW	R24,0x10
    00D6D 839B      STD	Y+3,R25
    00D6E 838A      STD	Y+2,R24
    00D6F 2D4C      MOV	R20,R12
    00D70 2755      CLR	R21
    00D71 5E4D      SUBI	R20,0xED
    00D72 4F5F      SBCI	R21,0xFF
    00D73 8359      STD	Y+1,R21
    00D74 8348      ST	Y,R20
    00D75 2D2A      MOV	R18,R10
    00D76 2733      CLR	R19
    00D77 5F24      SUBI	R18,0xF4
    00D78 4F3F      SBCI	R19,0xFF
    00D79 018A      MOVW	R16,R20
    00D7A 940E 0294 CALL	_GLCD_Line
    00D7C 9624      ADIW	R28,4
    00D7D 940C 46FC JMP	pop_xgset303C
_begin_cursoroff:
  y                    --> R10
  x                    --> R12
    00D7F 940E 46F5 CALL	push_xgset303C
    00D81 2EA2      MOV	R10,R18
    00D82 2EC0      MOV	R12,R16
    00D83 9724      SBIW	R28,4
(0033) }
(0034) void begin_cursoroff(unsigned char x, unsigned char y)
(0035) {
(0036)     color=0;
    00D84 2422      CLR	R2
    00D85 9220 0100 STS	color,R2
(0037)     GLCD_Line(x+2,y+9,x+2,y+12);
    00D87 2D8A      MOV	R24,R10
    00D88 2799      CLR	R25
    00D89 960C      ADIW	R24,0xC
    00D8A 839B      STD	Y+3,R25
    00D8B 838A      STD	Y+2,R24
    00D8C 2D8C      MOV	R24,R12
    00D8D 2799      CLR	R25
    00D8E 9602      ADIW	R24,2
    00D8F 011C      MOVW	R2,R24
    00D90 8239      STD	Y+1,R3
    00D91 8228      ST	Y,R2
    00D92 2D2A      MOV	R18,R10
    00D93 2733      CLR	R19
    00D94 5F27      SUBI	R18,0xF7
    00D95 4F3F      SBCI	R19,0xFF
    00D96 018C      MOVW	R16,R24
    00D97 940E 0294 CALL	_GLCD_Line
(0038)     GLCD_Line(x+3,y+9,x+3,y+15);
    00D99 2D8A      MOV	R24,R10
    00D9A 2799      CLR	R25
    00D9B 960F      ADIW	R24,0xF
    00D9C 839B      STD	Y+3,R25
    00D9D 838A      STD	Y+2,R24
    00D9E 2D8C      MOV	R24,R12
    00D9F 2799      CLR	R25
    00DA0 9603      ADIW	R24,3
    00DA1 011C      MOVW	R2,R24
    00DA2 8239      STD	Y+1,R3
    00DA3 8228      ST	Y,R2
    00DA4 2D2A      MOV	R18,R10
    00DA5 2733      CLR	R19
    00DA6 5F27      SUBI	R18,0xF7
    00DA7 4F3F      SBCI	R19,0xFF
    00DA8 018C      MOVW	R16,R24
    00DA9 940E 0294 CALL	_GLCD_Line
(0039)     GLCD_Line(x+4,y+9,x+4,y+15);
    00DAB 2D8A      MOV	R24,R10
    00DAC 2799      CLR	R25
    00DAD 960F      ADIW	R24,0xF
    00DAE 839B      STD	Y+3,R25
    00DAF 838A      STD	Y+2,R24
    00DB0 2D4C      MOV	R20,R12
    00DB1 2755      CLR	R21
    00DB2 5F4C      SUBI	R20,0xFC
    00DB3 4F5F      SBCI	R21,0xFF
    00DB4 8359      STD	Y+1,R21
    00DB5 8348      ST	Y,R20
    00DB6 2D2A      MOV	R18,R10
    00DB7 2733      CLR	R19
    00DB8 5F27      SUBI	R18,0xF7
    00DB9 4F3F      SBCI	R19,0xFF
    00DBA 018A      MOVW	R16,R20
    00DBB 940E 0294 CALL	_GLCD_Line
(0040)     GLCD_Line(x+5,y+9,x+5,y+18);
    00DBD 2D8A      MOV	R24,R10
    00DBE 2799      CLR	R25
    00DBF 9642      ADIW	R24,0x12
    00DC0 839B      STD	Y+3,R25
    00DC1 838A      STD	Y+2,R24
    00DC2 2D4C      MOV	R20,R12
    00DC3 2755      CLR	R21
    00DC4 5F4B      SUBI	R20,0xFB
    00DC5 4F5F      SBCI	R21,0xFF
    00DC6 8359      STD	Y+1,R21
    00DC7 8348      ST	Y,R20
    00DC8 2D2A      MOV	R18,R10
    00DC9 2733      CLR	R19
    00DCA 5F27      SUBI	R18,0xF7
    00DCB 4F3F      SBCI	R19,0xFF
    00DCC 018A      MOVW	R16,R20
    00DCD 940E 0294 CALL	_GLCD_Line
(0041)     GLCD_Line(x+6,y+11,x+6,y+21);
    00DCF 2D8A      MOV	R24,R10
    00DD0 2799      CLR	R25
    00DD1 9645      ADIW	R24,0x15
    00DD2 839B      STD	Y+3,R25
    00DD3 838A      STD	Y+2,R24
    00DD4 2D4C      MOV	R20,R12
    00DD5 2755      CLR	R21
    00DD6 5F4A      SUBI	R20,0xFA
    00DD7 4F5F      SBCI	R21,0xFF
    00DD8 8359      STD	Y+1,R21
    00DD9 8348      ST	Y,R20
    00DDA 2D2A      MOV	R18,R10
    00DDB 2733      CLR	R19
    00DDC 5F25      SUBI	R18,0xF5
    00DDD 4F3F      SBCI	R19,0xFF
    00DDE 018A      MOVW	R16,R20
    00DDF 940E 0294 CALL	_GLCD_Line
(0042)     GLCD_Line(x+7,y+1,x+7,y+24);
    00DE1 2D8A      MOV	R24,R10
    00DE2 2799      CLR	R25
    00DE3 9648      ADIW	R24,0x18
    00DE4 839B      STD	Y+3,R25
    00DE5 838A      STD	Y+2,R24
    00DE6 2D4C      MOV	R20,R12
    00DE7 2755      CLR	R21
    00DE8 5F49      SUBI	R20,0xF9
    00DE9 4F5F      SBCI	R21,0xFF
    00DEA 8359      STD	Y+1,R21
    00DEB 8348      ST	Y,R20
    00DEC 2D2A      MOV	R18,R10
    00DED 2733      CLR	R19
    00DEE 5F2F      SUBI	R18,0xFF
    00DEF 4F3F      SBCI	R19,0xFF
    00DF0 018A      MOVW	R16,R20
    00DF1 940E 0294 CALL	_GLCD_Line
(0043)     GLCD_Line(x+8,y,x+8,y+25);
    00DF3 2D8A      MOV	R24,R10
    00DF4 2799      CLR	R25
    00DF5 9649      ADIW	R24,0x19
    00DF6 839B      STD	Y+3,R25
    00DF7 838A      STD	Y+2,R24
    00DF8 2D4C      MOV	R20,R12
    00DF9 2755      CLR	R21
    00DFA 5F48      SUBI	R20,0xF8
    00DFB 4F5F      SBCI	R21,0xFF
    00DFC 8359      STD	Y+1,R21
    00DFD 8348      ST	Y,R20
    00DFE 2D2A      MOV	R18,R10
    00DFF 2733      CLR	R19
    00E00 018A      MOVW	R16,R20
    00E01 940E 0294 CALL	_GLCD_Line
(0044)     GLCD_Line(x+9,y,x+9,y+25);
    00E03 2D8A      MOV	R24,R10
    00E04 2799      CLR	R25
    00E05 9649      ADIW	R24,0x19
    00E06 839B      STD	Y+3,R25
    00E07 838A      STD	Y+2,R24
    00E08 2D4C      MOV	R20,R12
    00E09 2755      CLR	R21
    00E0A 5F47      SUBI	R20,0xF7
    00E0B 4F5F      SBCI	R21,0xFF
    00E0C 8359      STD	Y+1,R21
    00E0D 8348      ST	Y,R20
    00E0E 2D2A      MOV	R18,R10
    00E0F 2733      CLR	R19
    00E10 018A      MOVW	R16,R20
    00E11 940E 0294 CALL	_GLCD_Line
(0045)     GLCD_Line(x+10,y+1,x+10,y+25);
    00E13 2D8A      MOV	R24,R10
    00E14 2799      CLR	R25
    00E15 9649      ADIW	R24,0x19
    00E16 839B      STD	Y+3,R25
    00E17 838A      STD	Y+2,R24
    00E18 2D4C      MOV	R20,R12
    00E19 2755      CLR	R21
    00E1A 5F46      SUBI	R20,0xF6
    00E1B 4F5F      SBCI	R21,0xFF
    00E1C 8359      STD	Y+1,R21
    00E1D 8348      ST	Y,R20
    00E1E 2D2A      MOV	R18,R10
    00E1F 2733      CLR	R19
    00E20 5F2F      SUBI	R18,0xFF
    00E21 4F3F      SBCI	R19,0xFF
    00E22 018A      MOVW	R16,R20
    00E23 940E 0294 CALL	_GLCD_Line
(0046)     GLCD_Line(x+11,y+7,x+11,y+25);
    00E25 2D8A      MOV	R24,R10
    00E26 2799      CLR	R25
    00E27 9649      ADIW	R24,0x19
    00E28 839B      STD	Y+3,R25
    00E29 838A      STD	Y+2,R24
    00E2A 2D4C      MOV	R20,R12
    00E2B 2755      CLR	R21
    00E2C 5F45      SUBI	R20,0xF5
    00E2D 4F5F      SBCI	R21,0xFF
    00E2E 8359      STD	Y+1,R21
    00E2F 8348      ST	Y,R20
    00E30 2D2A      MOV	R18,R10
    00E31 2733      CLR	R19
    00E32 5F29      SUBI	R18,0xF9
    00E33 4F3F      SBCI	R19,0xFF
    00E34 018A      MOVW	R16,R20
    00E35 940E 0294 CALL	_GLCD_Line
(0047)     GLCD_Line(x+12,y+7,x+12,y+25);
    00E37 2D8A      MOV	R24,R10
    00E38 2799      CLR	R25
    00E39 9649      ADIW	R24,0x19
    00E3A 839B      STD	Y+3,R25
    00E3B 838A      STD	Y+2,R24
    00E3C 2D4C      MOV	R20,R12
    00E3D 2755      CLR	R21
    00E3E 5F44      SUBI	R20,0xF4
    00E3F 4F5F      SBCI	R21,0xFF
    00E40 8359      STD	Y+1,R21
    00E41 8348      ST	Y,R20
    00E42 2D2A      MOV	R18,R10
    00E43 2733      CLR	R19
    00E44 5F29      SUBI	R18,0xF9
    00E45 4F3F      SBCI	R19,0xFF
    00E46 018A      MOVW	R16,R20
    00E47 940E 0294 CALL	_GLCD_Line
(0048)     GLCD_Line(x+13,y+8,x+13,y+25);
    00E49 2D8A      MOV	R24,R10
    00E4A 2799      CLR	R25
    00E4B 9649      ADIW	R24,0x19
    00E4C 839B      STD	Y+3,R25
    00E4D 838A      STD	Y+2,R24
    00E4E 2D4C      MOV	R20,R12
    00E4F 2755      CLR	R21
    00E50 5F43      SUBI	R20,0xF3
    00E51 4F5F      SBCI	R21,0xFF
    00E52 8359      STD	Y+1,R21
    00E53 8348      ST	Y,R20
    00E54 2D2A      MOV	R18,R10
    00E55 2733      CLR	R19
    00E56 5F28      SUBI	R18,0xF8
    00E57 4F3F      SBCI	R19,0xFF
    00E58 018A      MOVW	R16,R20
    00E59 940E 0294 CALL	_GLCD_Line
(0049)     GLCD_Line(x+14,y+8,x+14,y+25);
    00E5B 2D8A      MOV	R24,R10
    00E5C 2799      CLR	R25
    00E5D 9649      ADIW	R24,0x19
    00E5E 839B      STD	Y+3,R25
    00E5F 838A      STD	Y+2,R24
    00E60 2D4C      MOV	R20,R12
    00E61 2755      CLR	R21
    00E62 5F42      SUBI	R20,0xF2
    00E63 4F5F      SBCI	R21,0xFF
    00E64 8359      STD	Y+1,R21
    00E65 8348      ST	Y,R20
    00E66 2D2A      MOV	R18,R10
    00E67 2733      CLR	R19
    00E68 5F28      SUBI	R18,0xF8
    00E69 4F3F      SBCI	R19,0xFF
    00E6A 018A      MOVW	R16,R20
    00E6B 940E 0294 CALL	_GLCD_Line
(0050)     GLCD_Line(x+15,y+9,x+15,y+25);
    00E6D 2D8A      MOV	R24,R10
    00E6E 2799      CLR	R25
    00E6F 9649      ADIW	R24,0x19
    00E70 839B      STD	Y+3,R25
    00E71 838A      STD	Y+2,R24
    00E72 2D4C      MOV	R20,R12
    00E73 2755      CLR	R21
    00E74 5F41      SUBI	R20,0xF1
    00E75 4F5F      SBCI	R21,0xFF
    00E76 8359      STD	Y+1,R21
    00E77 8348      ST	Y,R20
    00E78 2D2A      MOV	R18,R10
    00E79 2733      CLR	R19
    00E7A 5F27      SUBI	R18,0xF7
    00E7B 4F3F      SBCI	R19,0xFF
    00E7C 018A      MOVW	R16,R20
    00E7D 940E 0294 CALL	_GLCD_Line
(0051)     GLCD_Line(x+16,y+9,x+16,y+25);
    00E7F 2D8A      MOV	R24,R10
    00E80 2799      CLR	R25
    00E81 9649      ADIW	R24,0x19
    00E82 839B      STD	Y+3,R25
    00E83 838A      STD	Y+2,R24
    00E84 2D4C      MOV	R20,R12
    00E85 2755      CLR	R21
    00E86 5F40      SUBI	R20,0xF0
    00E87 4F5F      SBCI	R21,0xFF
    00E88 8359      STD	Y+1,R21
    00E89 8348      ST	Y,R20
    00E8A 2D2A      MOV	R18,R10
    00E8B 2733      CLR	R19
    00E8C 5F27      SUBI	R18,0xF7
    00E8D 4F3F      SBCI	R19,0xFF
    00E8E 018A      MOVW	R16,R20
    00E8F 940E 0294 CALL	_GLCD_Line
(0052)     GLCD_Line(x+17,y+10,x+17,y+23);
    00E91 2D8A      MOV	R24,R10
    00E92 2799      CLR	R25
    00E93 9647      ADIW	R24,0x17
    00E94 839B      STD	Y+3,R25
    00E95 838A      STD	Y+2,R24
    00E96 2D4C      MOV	R20,R12
    00E97 2755      CLR	R21
    00E98 5E4F      SUBI	R20,0xEF
    00E99 4F5F      SBCI	R21,0xFF
    00E9A 8359      STD	Y+1,R21
    00E9B 8348      ST	Y,R20
    00E9C 2D2A      MOV	R18,R10
    00E9D 2733      CLR	R19
    00E9E 5F26      SUBI	R18,0xF6
    00E9F 4F3F      SBCI	R19,0xFF
    00EA0 018A      MOVW	R16,R20
    00EA1 940E 0294 CALL	_GLCD_Line
(0053)     GLCD_Line(x+18,y+10,x+18,y+20);
    00EA3 2D8A      MOV	R24,R10
    00EA4 2799      CLR	R25
    00EA5 9644      ADIW	R24,0x14
    00EA6 839B      STD	Y+3,R25
    00EA7 838A      STD	Y+2,R24
    00EA8 2D4C      MOV	R20,R12
    00EA9 2755      CLR	R21
    00EAA 5E4E      SUBI	R20,0xEE
    00EAB 4F5F      SBCI	R21,0xFF
    00EAC 8359      STD	Y+1,R21
    00EAD 8348      ST	Y,R20
    00EAE 2D2A      MOV	R18,R10
    00EAF 2733      CLR	R19
    00EB0 5F26      SUBI	R18,0xF6
    00EB1 4F3F      SBCI	R19,0xFF
    00EB2 018A      MOVW	R16,R20
    00EB3 940E 0294 CALL	_GLCD_Line
(0054)     GLCD_Line(x+19,y+12,x+19,y+16);
    00EB5 2D8A      MOV	R24,R10
    00EB6 2799      CLR	R25
    00EB7 9640      ADIW	R24,0x10
    00EB8 839B      STD	Y+3,R25
    00EB9 838A      STD	Y+2,R24
    00EBA 2D4C      MOV	R20,R12
    00EBB 2755      CLR	R21
    00EBC 5E4D      SUBI	R20,0xED
    00EBD 4F5F      SBCI	R21,0xFF
    00EBE 8359      STD	Y+1,R21
    00EBF 8348      ST	Y,R20
    00EC0 2D2A      MOV	R18,R10
    00EC1 2733      CLR	R19
    00EC2 5F24      SUBI	R18,0xF4
    00EC3 4F3F      SBCI	R19,0xFF
    00EC4 018A      MOVW	R16,R20
    00EC5 940E 0294 CALL	_GLCD_Line
(0055)     color=1;
    00EC7 E081      LDI	R24,1
    00EC8 9380 0100 STS	color,R24
    00ECA 9624      ADIW	R28,4
    00ECB 940C 46FC JMP	pop_xgset303C
_GLCD_TextGoTo1:
  address              --> R10
  i                    --> R20
  y                    --> R12
  x                    --> R10
    00ECD 940E 46F5 CALL	push_xgset303C
    00ECF 2EC2      MOV	R12,R18
    00ED0 2EA0      MOV	R10,R16
(0056) }
(0057) void GLCD_TextGoTo1(unsigned char x, unsigned char y)
(0058) {
(0059) unsigned int address;
(0060)     int i;
(0061) address = GLCD_TEXT_HOME +  x + (GLCD_TEXT_AREA * y);
    00ED1 E18E      LDI	R24,0x1E
    00ED2 9D8C      MUL	R24,R12
    00ED3 2C2A      MOV	R2,R10
    00ED4 2433      CLR	R3
    00ED5 0C20      ADD	R2,R0
    00ED6 1C31      ADC	R3,R1
    00ED7 0151      MOVW	R10,R2
(0062) 
(0063) GLCD_SetAddressPointer(address);
    00ED8 0181      MOVW	R16,R2
    00ED9 940E 03A9 CALL	_GLCD_SetAddressPointer
(0064) 
(0065) 	for (i = 0; i < 12; i++)
    00EDB 2744      CLR	R20
    00EDC 2755      CLR	R21
(0066) 	{
(0067) 		GLCD_WriteDisplayData(0);
    00EDD 2700      CLR	R16
    00EDE 940E 0468 CALL	_GLCD_WriteDisplayData
(0068) 	}
    00EE0 5F4F      SUBI	R20,0xFF
    00EE1 4F5F      SBCI	R21,0xFF
    00EE2 304C      CPI	R20,0xC
    00EE3 E0E0      LDI	R30,0
    00EE4 075E      CPC	R21,R30
    00EE5 F3BC      BLT	0x0EDD
    00EE6 940C 46FC JMP	pop_xgset303C
_lGLCD_success:
  color                --> R20
  y                    --> R12
  x                    --> R10
  j                    --> R12
  i                    --> R10
    00EE8 940E 46F5 CALL	push_xgset303C
    00EEA 0169      MOVW	R12,R18
    00EEB 0158      MOVW	R10,R16
    00EEC 9721      SBIW	R28,1
(0069) }
(0070) void lGLCD_success(int i, int j)
(0071) {
(0072)     unsigned char x;
(0073)     unsigned char y;
(0074)     unsigned char color=1;
    00EED E041      LDI	R20,1
(0075)     x=14+13*i;
    00EEE E00D      LDI	R16,0xD
    00EEF E010      LDI	R17,0
    00EF0 0195      MOVW	R18,R10
    00EF1 940E 4674 CALL	empy16s
    00EF3 01C8      MOVW	R24,R16
    00EF4 960E      ADIW	R24,0xE
    00EF5 2EA8      MOV	R10,R24
(0076)     y=18+13*j;
    00EF6 E00D      LDI	R16,0xD
    00EF7 E010      LDI	R17,0
    00EF8 0196      MOVW	R18,R12
    00EF9 940E 4674 CALL	empy16s
    00EFB 01C8      MOVW	R24,R16
    00EFC 9642      ADIW	R24,0x12
    00EFD 2EC8      MOV	R12,R24
(0077)     GLCD_Circle(x,y,6);
    00EFE E086      LDI	R24,6
    00EFF 8388      ST	Y,R24
    00F00 2D2C      MOV	R18,R12
    00F01 2D0A      MOV	R16,R10
    00F02 940E 01FC CALL	_GLCD_Circle
(0078)     GLCD_Circle(x,y,5);
    00F04 E085      LDI	R24,5
    00F05 8388      ST	Y,R24
    00F06 2D2C      MOV	R18,R12
    00F07 2D0A      MOV	R16,R10
    00F08 940E 01FC CALL	_GLCD_Circle
(0079)     GLCD_Circle(x,y,4);
    00F0A E084      LDI	R24,4
    00F0B 8388      ST	Y,R24
    00F0C 2D2C      MOV	R18,R12
    00F0D 2D0A      MOV	R16,R10
    00F0E 940E 01FC CALL	_GLCD_Circle
    00F10 9621      ADIW	R28,1
    00F11 940C 46FC JMP	pop_xgset303C
_lGLCD_cursor:
  y                    --> R10
  x                    --> R20
  j                    --> R10
  i                    --> R12
    00F13 940E 4703 CALL	push_xgsetF03C
    00F15 0159      MOVW	R10,R18
    00F16 0168      MOVW	R12,R16
    00F17 9724      SBIW	R28,4
(0080) }
(0081) void lGLCD_cursor(int i, int j)
(0082) {
(0083)     unsigned char x=14+13*i;
    00F18 E00D      LDI	R16,0xD
    00F19 E010      LDI	R17,0
    00F1A 0196      MOVW	R18,R12
    00F1B 940E 4674 CALL	empy16s
    00F1D 01A8      MOVW	R20,R16
    00F1E 5F42      SUBI	R20,0xF2
    00F1F 4F5F      SBCI	R21,0xFF
(0084)     unsigned char y=18+13*j;
    00F20 E00D      LDI	R16,0xD
    00F21 E010      LDI	R17,0
    00F22 0195      MOVW	R18,R10
    00F23 940E 4674 CALL	empy16s
    00F25 01C8      MOVW	R24,R16
    00F26 9642      ADIW	R24,0x12
    00F27 2EA8      MOV	R10,R24
(0085)     GLCD_Line(x-4,y-6,x-4,y+5);
    00F28 2799      CLR	R25
    00F29 9605      ADIW	R24,5
    00F2A 839B      STD	Y+3,R25
    00F2B 838A      STD	Y+2,R24
    00F2C 2F84      MOV	R24,R20
    00F2D 2799      CLR	R25
    00F2E 9704      SBIW	R24,4
    00F2F 8399      STD	Y+1,R25
    00F30 8388      ST	Y,R24
    00F31 2D2A      MOV	R18,R10
    00F32 2733      CLR	R19
    00F33 5026      SUBI	R18,6
    00F34 4030      SBCI	R19,0
    00F35 018C      MOVW	R16,R24
    00F36 940E 0294 CALL	_GLCD_Line
(0086)     GLCD_Line(x-3,y-5,x-3,y+4);
    00F38 2D8A      MOV	R24,R10
    00F39 2799      CLR	R25
    00F3A 9604      ADIW	R24,4
    00F3B 839B      STD	Y+3,R25
    00F3C 838A      STD	Y+2,R24
    00F3D 2F84      MOV	R24,R20
    00F3E 2799      CLR	R25
    00F3F 9703      SBIW	R24,3
    00F40 8399      STD	Y+1,R25
    00F41 8388      ST	Y,R24
    00F42 2D2A      MOV	R18,R10
    00F43 2733      CLR	R19
    00F44 5025      SUBI	R18,5
    00F45 4030      SBCI	R19,0
    00F46 018C      MOVW	R16,R24
    00F47 940E 0294 CALL	_GLCD_Line
(0087)     GLCD_Line(x-2,y-5,x-2,y+3);
    00F49 2D8A      MOV	R24,R10
    00F4A 2799      CLR	R25
    00F4B 9603      ADIW	R24,3
    00F4C 839B      STD	Y+3,R25
    00F4D 838A      STD	Y+2,R24
    00F4E 2F64      MOV	R22,R20
    00F4F 2777      CLR	R23
    00F50 5062      SUBI	R22,2
    00F51 4070      SBCI	R23,0
    00F52 8379      STD	Y+1,R23
    00F53 8368      ST	Y,R22
    00F54 2D2A      MOV	R18,R10
    00F55 2733      CLR	R19
    00F56 5025      SUBI	R18,5
    00F57 4030      SBCI	R19,0
    00F58 018B      MOVW	R16,R22
    00F59 940E 0294 CALL	_GLCD_Line
(0088)     GLCD_Line(x-1,y-4,x-1,y+2);
    00F5B 2D8A      MOV	R24,R10
    00F5C 2799      CLR	R25
    00F5D 9602      ADIW	R24,2
    00F5E 839B      STD	Y+3,R25
    00F5F 838A      STD	Y+2,R24
    00F60 2F64      MOV	R22,R20
    00F61 2777      CLR	R23
    00F62 5061      SUBI	R22,1
    00F63 4070      SBCI	R23,0
    00F64 8379      STD	Y+1,R23
    00F65 8368      ST	Y,R22
    00F66 2D2A      MOV	R18,R10
    00F67 2733      CLR	R19
    00F68 5024      SUBI	R18,4
    00F69 4030      SBCI	R19,0
    00F6A 018B      MOVW	R16,R22
    00F6B 940E 0294 CALL	_GLCD_Line
(0089)     GLCD_Line(x,y-4,x,y+3);
    00F6D 2D8A      MOV	R24,R10
    00F6E 2799      CLR	R25
    00F6F 9603      ADIW	R24,3
    00F70 839B      STD	Y+3,R25
    00F71 838A      STD	Y+2,R24
    00F72 2E24      MOV	R2,R20
    00F73 2433      CLR	R3
    00F74 8239      STD	Y+1,R3
    00F75 8228      ST	Y,R2
    00F76 2D2A      MOV	R18,R10
    00F77 2733      CLR	R19
    00F78 5024      SUBI	R18,4
    00F79 4030      SBCI	R19,0
    00F7A 2D02      MOV	R16,R2
    00F7B 2711      CLR	R17
    00F7C 940E 0294 CALL	_GLCD_Line
(0090)     GLCD_Line(x+1,y-3,x+1,y+5);
    00F7E 2D8A      MOV	R24,R10
    00F7F 2799      CLR	R25
    00F80 9605      ADIW	R24,5
    00F81 839B      STD	Y+3,R25
    00F82 838A      STD	Y+2,R24
    00F83 2F64      MOV	R22,R20
    00F84 2777      CLR	R23
    00F85 5F6F      SUBI	R22,0xFF
    00F86 4F7F      SBCI	R23,0xFF
    00F87 8379      STD	Y+1,R23
    00F88 8368      ST	Y,R22
    00F89 2D2A      MOV	R18,R10
    00F8A 2733      CLR	R19
    00F8B 5023      SUBI	R18,3
    00F8C 4030      SBCI	R19,0
    00F8D 018B      MOVW	R16,R22
    00F8E 940E 0294 CALL	_GLCD_Line
(0091)     GLCD_Line(x+2,y-3,x+2,y);
    00F90 2C2A      MOV	R2,R10
    00F91 2433      CLR	R3
    00F92 823B      STD	Y+3,R3
    00F93 822A      STD	Y+2,R2
    00F94 2F64      MOV	R22,R20
    00F95 2777      CLR	R23
    00F96 5F6E      SUBI	R22,0xFE
    00F97 4F7F      SBCI	R23,0xFF
    00F98 8379      STD	Y+1,R23
    00F99 8368      ST	Y,R22
    00F9A 2D22      MOV	R18,R2
    00F9B 2733      CLR	R19
    00F9C 5023      SUBI	R18,3
    00F9D 4030      SBCI	R19,0
    00F9E 018B      MOVW	R16,R22
    00F9F 940E 0294 CALL	_GLCD_Line
(0092)     GLCD_Line(x+3,y-2,x+3,y);
    00FA1 2C2A      MOV	R2,R10
    00FA2 2433      CLR	R3
    00FA3 823B      STD	Y+3,R3
    00FA4 822A      STD	Y+2,R2
    00FA5 2F64      MOV	R22,R20
    00FA6 2777      CLR	R23
    00FA7 5F6D      SUBI	R22,0xFD
    00FA8 4F7F      SBCI	R23,0xFF
    00FA9 8379      STD	Y+1,R23
    00FAA 8368      ST	Y,R22
    00FAB 2D22      MOV	R18,R2
    00FAC 2733      CLR	R19
    00FAD 5022      SUBI	R18,2
    00FAE 4030      SBCI	R19,0
    00FAF 018B      MOVW	R16,R22
    00FB0 940E 0294 CALL	_GLCD_Line
(0093)     GLCD_Line(x+4,y-1,x+4,y);
    00FB2 2C2A      MOV	R2,R10
    00FB3 2433      CLR	R3
    00FB4 823B      STD	Y+3,R3
    00FB5 822A      STD	Y+2,R2
    00FB6 2F64      MOV	R22,R20
    00FB7 2777      CLR	R23
    00FB8 5F6C      SUBI	R22,0xFC
    00FB9 4F7F      SBCI	R23,0xFF
    00FBA 8379      STD	Y+1,R23
    00FBB 8368      ST	Y,R22
    00FBC 2D22      MOV	R18,R2
    00FBD 2733      CLR	R19
    00FBE 5021      SUBI	R18,1
    00FBF 4030      SBCI	R19,0
    00FC0 018B      MOVW	R16,R22
    00FC1 940E 0294 CALL	_GLCD_Line
(0094)     GLCD_Line(x+5,y-1,x+5,y);
    00FC3 2C2A      MOV	R2,R10
    00FC4 2433      CLR	R3
    00FC5 823B      STD	Y+3,R3
    00FC6 822A      STD	Y+2,R2
    00FC7 2F64      MOV	R22,R20
    00FC8 2777      CLR	R23
    00FC9 5F6B      SUBI	R22,0xFB
    00FCA 4F7F      SBCI	R23,0xFF
    00FCB 8379      STD	Y+1,R23
    00FCC 8368      ST	Y,R22
    00FCD 2D22      MOV	R18,R2
    00FCE 2733      CLR	R19
    00FCF 5021      SUBI	R18,1
    00FD0 4030      SBCI	R19,0
    00FD1 018B      MOVW	R16,R22
    00FD2 940E 0294 CALL	_GLCD_Line
(0095)     GLCD_SetPixel(x+6,y,color);
    00FD4 9020 0100 LDS	R2,color
    00FD6 8228      ST	Y,R2
    00FD7 2D2A      MOV	R18,R10
    00FD8 2F04      MOV	R16,R20
    00FD9 5F0A      SUBI	R16,0xFA
    00FDA 940E 0431 CALL	_GLCD_SetPixel
(0096)     GLCD_Line(x+2,y+2,x+2,y+6);
    00FDC 2D8A      MOV	R24,R10
    00FDD 2799      CLR	R25
    00FDE 9606      ADIW	R24,6
    00FDF 839B      STD	Y+3,R25
    00FE0 838A      STD	Y+2,R24
    00FE1 2F64      MOV	R22,R20
    00FE2 2777      CLR	R23
    00FE3 5F6E      SUBI	R22,0xFE
    00FE4 4F7F      SBCI	R23,0xFF
    00FE5 8379      STD	Y+1,R23
    00FE6 8368      ST	Y,R22
    00FE7 2D2A      MOV	R18,R10
    00FE8 2733      CLR	R19
    00FE9 5F2E      SUBI	R18,0xFE
    00FEA 4F3F      SBCI	R19,0xFF
    00FEB 018B      MOVW	R16,R22
    00FEC 940E 0294 CALL	_GLCD_Line
(0097)     GLCD_Line(x+3,y+3,x+3,y+6);
    00FEE 2D8A      MOV	R24,R10
    00FEF 2799      CLR	R25
    00FF0 9606      ADIW	R24,6
    00FF1 839B      STD	Y+3,R25
    00FF2 838A      STD	Y+2,R24
    00FF3 2F64      MOV	R22,R20
    00FF4 2777      CLR	R23
    00FF5 5F6D      SUBI	R22,0xFD
    00FF6 4F7F      SBCI	R23,0xFF
    00FF7 8379      STD	Y+1,R23
    00FF8 8368      ST	Y,R22
    00FF9 2D2A      MOV	R18,R10
    00FFA 2733      CLR	R19
    00FFB 5F2D      SUBI	R18,0xFD
    00FFC 4F3F      SBCI	R19,0xFF
    00FFD 018B      MOVW	R16,R22
    00FFE 940E 0294 CALL	_GLCD_Line
(0098)     GLCD_Line(x+4,y+4,x+4,y+5);
    01000 2D8A      MOV	R24,R10
    01001 2799      CLR	R25
    01002 9605      ADIW	R24,5
    01003 839B      STD	Y+3,R25
    01004 838A      STD	Y+2,R24
    01005 2755      CLR	R21
    01006 5F4C      SUBI	R20,0xFC
    01007 4F5F      SBCI	R21,0xFF
    01008 8359      STD	Y+1,R21
    01009 8348      ST	Y,R20
    0100A 2D2A      MOV	R18,R10
    0100B 2733      CLR	R19
    0100C 5F2C      SUBI	R18,0xFC
    0100D 4F3F      SBCI	R19,0xFF
    0100E 018A      MOVW	R16,R20
    0100F 940E 0294 CALL	_GLCD_Line
    01011 9624      ADIW	R28,4
    01012 940C 470C JMP	pop_xgsetF03C
_lGLCD_mine:
  y                    --> R22
  x                    --> R20
  j                    --> R10
  i                    --> R12
    01014 940E 4703 CALL	push_xgsetF03C
    01016 0159      MOVW	R10,R18
    01017 0168      MOVW	R12,R16
    01018 9724      SBIW	R28,4
(0099) }
(0100) void lGLCD_mine(int i, int j)
(0101) {
(0102)     unsigned char x=14+13*i;
    01019 E00D      LDI	R16,0xD
    0101A E010      LDI	R17,0
    0101B 0196      MOVW	R18,R12
    0101C 940E 4674 CALL	empy16s
    0101E 01A8      MOVW	R20,R16
    0101F 5F42      SUBI	R20,0xF2
    01020 4F5F      SBCI	R21,0xFF
(0103)     unsigned char y=18+13*j;
    01021 E00D      LDI	R16,0xD
    01022 E010      LDI	R17,0
    01023 0195      MOVW	R18,R10
    01024 940E 4674 CALL	empy16s
    01026 01B8      MOVW	R22,R16
    01027 5E6E      SUBI	R22,0xEE
    01028 4F7F      SBCI	R23,0xFF
(0104)     GLCD_Line(x-4,y-6,x+4,y-6);
    01029 2F86      MOV	R24,R22
    0102A 2799      CLR	R25
    0102B 9706      SBIW	R24,6
    0102C 011C      MOVW	R2,R24
    0102D 823B      STD	Y+3,R3
    0102E 822A      STD	Y+2,R2
    0102F 2F84      MOV	R24,R20
    01030 2799      CLR	R25
    01031 9604      ADIW	R24,4
    01032 8399      STD	Y+1,R25
    01033 8388      ST	Y,R24
    01034 0191      MOVW	R18,R2
    01035 2F04      MOV	R16,R20
    01036 2711      CLR	R17
    01037 5004      SUBI	R16,4
    01038 4010      SBCI	R17,0
    01039 940E 0294 CALL	_GLCD_Line
(0105)     GLCD_SetPixel(x-5,y-5,color);
    0103B 9020 0100 LDS	R2,color
    0103D 8228      ST	Y,R2
    0103E 2F26      MOV	R18,R22
    0103F 5025      SUBI	R18,5
    01040 2F04      MOV	R16,R20
    01041 5005      SUBI	R16,5
    01042 940E 0431 CALL	_GLCD_SetPixel
(0106)     GLCD_SetPixel(x+5,y-5,color);
    01044 9020 0100 LDS	R2,color
    01046 8228      ST	Y,R2
    01047 2F26      MOV	R18,R22
    01048 5025      SUBI	R18,5
    01049 2F04      MOV	R16,R20
    0104A 5F0B      SUBI	R16,0xFB
    0104B 940E 0431 CALL	_GLCD_SetPixel
(0107)     GLCD_Line(x-6,y-4,x-6,y);
    0104D 2E26      MOV	R2,R22
    0104E 2433      CLR	R3
    0104F 823B      STD	Y+3,R3
    01050 822A      STD	Y+2,R2
    01051 2F84      MOV	R24,R20
    01052 2799      CLR	R25
    01053 9706      SBIW	R24,6
    01054 011C      MOVW	R2,R24
    01055 8239      STD	Y+1,R3
    01056 8228      ST	Y,R2
    01057 2F26      MOV	R18,R22
    01058 2733      CLR	R19
    01059 5024      SUBI	R18,4
    0105A 4030      SBCI	R19,0
    0105B 018C      MOVW	R16,R24
    0105C 940E 0294 CALL	_GLCD_Line
(0108)     GLCD_Line(x+6,y-4,x+6,y);
    0105E 2E26      MOV	R2,R22
    0105F 2433      CLR	R3
    01060 823B      STD	Y+3,R3
    01061 822A      STD	Y+2,R2
    01062 2F84      MOV	R24,R20
    01063 2799      CLR	R25
    01064 9606      ADIW	R24,6
    01065 015C      MOVW	R10,R24
    01066 82B9      STD	Y+1,R11
    01067 82A8      ST	Y,R10
    01068 2D22      MOV	R18,R2
    01069 2733      CLR	R19
    0106A 5024      SUBI	R18,4
    0106B 4030      SBCI	R19,0
    0106C 018C      MOVW	R16,R24
    0106D 940E 0294 CALL	_GLCD_Line
(0109)     GLCD_SetPixel(x-3,y-4,color);
    0106F 9020 0100 LDS	R2,color
    01071 8228      ST	Y,R2
    01072 2F26      MOV	R18,R22
    01073 5024      SUBI	R18,4
    01074 2F04      MOV	R16,R20
    01075 5003      SUBI	R16,3
    01076 940E 0431 CALL	_GLCD_SetPixel
(0110)     GLCD_Line(x-2,y-4,x-2,y-2);
    01078 2F86      MOV	R24,R22
    01079 2799      CLR	R25
    0107A 9702      SBIW	R24,2
    0107B 839B      STD	Y+3,R25
    0107C 838A      STD	Y+2,R24
    0107D 2F84      MOV	R24,R20
    0107E 2799      CLR	R25
    0107F 9702      SBIW	R24,2
    01080 015C      MOVW	R10,R24
    01081 82B9      STD	Y+1,R11
    01082 82A8      ST	Y,R10
    01083 2F26      MOV	R18,R22
    01084 2733      CLR	R19
    01085 5024      SUBI	R18,4
    01086 4030      SBCI	R19,0
    01087 018C      MOVW	R16,R24
    01088 940E 0294 CALL	_GLCD_Line
(0111)     GLCD_SetPixel(x-3,y-1,color);
    0108A 9020 0100 LDS	R2,color
    0108C 8228      ST	Y,R2
    0108D 2F26      MOV	R18,R22
    0108E 5021      SUBI	R18,1
    0108F 2F04      MOV	R16,R20
    01090 5003      SUBI	R16,3
    01091 940E 0431 CALL	_GLCD_SetPixel
(0112)     GLCD_SetPixel(x-3,y,color);
    01093 9020 0100 LDS	R2,color
    01095 8228      ST	Y,R2
    01096 2F26      MOV	R18,R22
    01097 2F04      MOV	R16,R20
    01098 5003      SUBI	R16,3
    01099 940E 0431 CALL	_GLCD_SetPixel
(0113)     GLCD_SetPixel(x-4,y-3,color);
    0109B 9020 0100 LDS	R2,color
    0109D 8228      ST	Y,R2
    0109E 2F26      MOV	R18,R22
    0109F 5023      SUBI	R18,3
    010A0 2F04      MOV	R16,R20
    010A1 5004      SUBI	R16,4
    010A2 940E 0431 CALL	_GLCD_SetPixel
(0114)     GLCD_SetPixel(x-4,y-2,color);
    010A4 9020 0100 LDS	R2,color
    010A6 8228      ST	Y,R2
    010A7 2F26      MOV	R18,R22
    010A8 5022      SUBI	R18,2
    010A9 2F04      MOV	R16,R20
    010AA 5004      SUBI	R16,4
    010AB 940E 0431 CALL	_GLCD_SetPixel
(0115)     GLCD_SetPixel(x+3,y-4,color);
    010AD 9020 0100 LDS	R2,color
    010AF 8228      ST	Y,R2
    010B0 2F26      MOV	R18,R22
    010B1 5024      SUBI	R18,4
    010B2 2F04      MOV	R16,R20
    010B3 5F0D      SUBI	R16,0xFD
    010B4 940E 0431 CALL	_GLCD_SetPixel
(0116)     GLCD_Line(x+2,y-4,x+2,y-2);
    010B6 2F86      MOV	R24,R22
    010B7 2799      CLR	R25
    010B8 9702      SBIW	R24,2
    010B9 839B      STD	Y+3,R25
    010BA 838A      STD	Y+2,R24
    010BB 2F84      MOV	R24,R20
    010BC 2799      CLR	R25
    010BD 9602      ADIW	R24,2
    010BE 015C      MOVW	R10,R24
    010BF 82B9      STD	Y+1,R11
    010C0 82A8      ST	Y,R10
    010C1 2F26      MOV	R18,R22
    010C2 2733      CLR	R19
    010C3 5024      SUBI	R18,4
    010C4 4030      SBCI	R19,0
    010C5 018C      MOVW	R16,R24
    010C6 940E 0294 CALL	_GLCD_Line
(0117)     GLCD_SetPixel(x+3,y-1,color);
    010C8 9020 0100 LDS	R2,color
    010CA 8228      ST	Y,R2
    010CB 2F26      MOV	R18,R22
    010CC 5021      SUBI	R18,1
    010CD 2F04      MOV	R16,R20
    010CE 5F0D      SUBI	R16,0xFD
    010CF 940E 0431 CALL	_GLCD_SetPixel
(0118)     GLCD_SetPixel(x+3,y,color);
    010D1 9020 0100 LDS	R2,color
    010D3 8228      ST	Y,R2
    010D4 2F26      MOV	R18,R22
    010D5 2F04      MOV	R16,R20
    010D6 5F0D      SUBI	R16,0xFD
    010D7 940E 0431 CALL	_GLCD_SetPixel
(0119)     GLCD_SetPixel(x+4,y-3,color);
    010D9 9020 0100 LDS	R2,color
    010DB 8228      ST	Y,R2
    010DC 2F26      MOV	R18,R22
    010DD 5023      SUBI	R18,3
    010DE 2F04      MOV	R16,R20
    010DF 5F0C      SUBI	R16,0xFC
    010E0 940E 0431 CALL	_GLCD_SetPixel
(0120)     GLCD_SetPixel(x+4,y-2,color);
    010E2 9020 0100 LDS	R2,color
    010E4 8228      ST	Y,R2
    010E5 2F26      MOV	R18,R22
    010E6 5022      SUBI	R18,2
    010E7 2F04      MOV	R16,R20
    010E8 5F0C      SUBI	R16,0xFC
    010E9 940E 0431 CALL	_GLCD_SetPixel
(0121)     GLCD_SetPixel(x-5,y+1,color);
    010EB 9020 0100 LDS	R2,color
    010ED 8228      ST	Y,R2
    010EE 2F26      MOV	R18,R22
    010EF 5F2F      SUBI	R18,0xFF
    010F0 2F04      MOV	R16,R20
    010F1 5005      SUBI	R16,5
    010F2 940E 0431 CALL	_GLCD_SetPixel
(0122)     GLCD_SetPixel(x+5,y+1,color);
    010F4 9020 0100 LDS	R2,color
    010F6 8228      ST	Y,R2
    010F7 2F26      MOV	R18,R22
    010F8 5F2F      SUBI	R18,0xFF
    010F9 2F04      MOV	R16,R20
    010FA 5F0B      SUBI	R16,0xFB
    010FB 940E 0431 CALL	_GLCD_SetPixel
(0123)     GLCD_Line(x-4,y+2,x-4,y+5);
    010FD 2F86      MOV	R24,R22
    010FE 2799      CLR	R25
    010FF 9605      ADIW	R24,5
    01100 839B      STD	Y+3,R25
    01101 838A      STD	Y+2,R24
    01102 2F84      MOV	R24,R20
    01103 2799      CLR	R25
    01104 9704      SBIW	R24,4
    01105 015C      MOVW	R10,R24
    01106 82B9      STD	Y+1,R11
    01107 82A8      ST	Y,R10
    01108 2F26      MOV	R18,R22
    01109 2733      CLR	R19
    0110A 5F2E      SUBI	R18,0xFE
    0110B 4F3F      SBCI	R19,0xFF
    0110C 018C      MOVW	R16,R24
    0110D 940E 0294 CALL	_GLCD_Line
(0124)     GLCD_Line(x-4,y+6,x-4,y+6);
    0110F 2F86      MOV	R24,R22
    01110 2799      CLR	R25
    01111 9606      ADIW	R24,6
    01112 016C      MOVW	R12,R24
    01113 82DB      STD	Y+3,R13
    01114 82CA      STD	Y+2,R12
    01115 2F84      MOV	R24,R20
    01116 2799      CLR	R25
    01117 9704      SBIW	R24,4
    01118 015C      MOVW	R10,R24
    01119 82B9      STD	Y+1,R11
    0111A 82A8      ST	Y,R10
    0111B 0196      MOVW	R18,R12
    0111C 018C      MOVW	R16,R24
    0111D 940E 0294 CALL	_GLCD_Line
(0125)     GLCD_Line(x+4,y+2,x+4,y+5);
    0111F 2F86      MOV	R24,R22
    01120 2799      CLR	R25
    01121 9605      ADIW	R24,5
    01122 839B      STD	Y+3,R25
    01123 838A      STD	Y+2,R24
    01124 2F84      MOV	R24,R20
    01125 2799      CLR	R25
    01126 9604      ADIW	R24,4
    01127 015C      MOVW	R10,R24
    01128 82B9      STD	Y+1,R11
    01129 82A8      ST	Y,R10
    0112A 2F26      MOV	R18,R22
    0112B 2733      CLR	R19
    0112C 5F2E      SUBI	R18,0xFE
    0112D 4F3F      SBCI	R19,0xFF
    0112E 018C      MOVW	R16,R24
    0112F 940E 0294 CALL	_GLCD_Line
(0126)     GLCD_Rectangle(x-2,y+2,5,3);
    01131 E083      LDI	R24,3
    01132 838A      STD	Y+2,R24
    01133 E085      LDI	R24,5
    01134 8388      ST	Y,R24
    01135 2F26      MOV	R18,R22
    01136 5F2E      SUBI	R18,0xFE
    01137 2F04      MOV	R16,R20
    01138 5002      SUBI	R16,2
    01139 940E 01C8 CALL	_GLCD_Rectangle
    0113B 9624      ADIW	R28,4
    0113C 940C 470C JMP	pop_xgsetF03C
_lGLCD_SemiCircle:
  ychange              --> R14
  xchange              --> R10
  radiusError          --> R12
  ax                   --> R20
  ay                   --> R22
  radius               --> R10
  cy                   --> Y,+13
  cx                   --> Y,+11
    0113E 940E 45B3 CALL	push_arg4
    01140 940E 46C8 CALL	push_xgsetF0FC
    01142 9721      SBIW	R28,1
    01143 84AF      LDD	R10,Y+15
(0127) 
(0128) }
(0129) 
(0130) void lGLCD_SemiCircle(unsigned char cx, unsigned char cy, unsigned char radius)
(0131) {
(0132) 	int ax, ay, xchange, ychange, radiusError;
(0133) 	ax = radius;
    01144 2D4A      MOV	R20,R10
    01145 2755      CLR	R21
(0134) 	ay = 0;
    01146 2766      CLR	R22
    01147 2777      CLR	R23
(0135) 	xchange = 1 - 2 * radius;
    01148 2C2A      MOV	R2,R10
    01149 2433      CLR	R3
    0114A 0C22      LSL	R2
    0114B 1C33      ROL	R3
    0114C E081      LDI	R24,1
    0114D E090      LDI	R25,0
    0114E 015C      MOVW	R10,R24
    0114F 18A2      SUB	R10,R2
    01150 08B3      SBC	R11,R3
(0136) 	ychange = 1;
    01151 017C      MOVW	R14,R24
(0137) 	radiusError = 0;
    01152 24CC      CLR	R12
    01153 24DD      CLR	R13
    01154 C04C      RJMP	0x11A1
(0138) 	while (ax >= ay)
(0139) 	{
(0140) 		GLCD_SetPixel(cx - ax, cy - ay, color);
    01155 9020 0100 LDS	R2,color
    01157 8228      ST	Y,R2
    01158 852D      LDD	R18,Y+13
    01159 2733      CLR	R19
    0115A 1B26      SUB	R18,R22
    0115B 0B37      SBC	R19,R23
    0115C 850B      LDD	R16,Y+11
    0115D 2711      CLR	R17
    0115E 1B04      SUB	R16,R20
    0115F 0B15      SBC	R17,R21
    01160 940E 0431 CALL	_GLCD_SetPixel
(0141) 		GLCD_SetPixel(cx + ax, cy - ay, color);
    01162 9020 0100 LDS	R2,color
    01164 8228      ST	Y,R2
    01165 852D      LDD	R18,Y+13
    01166 2733      CLR	R19
    01167 1B26      SUB	R18,R22
    01168 0B37      SBC	R19,R23
    01169 850B      LDD	R16,Y+11
    0116A 2711      CLR	R17
    0116B 0F04      ADD	R16,R20
    0116C 1F15      ADC	R17,R21
    0116D 940E 0431 CALL	_GLCD_SetPixel
(0142) 		GLCD_SetPixel(cx - ay, cy - ax, color);
    0116F 9020 0100 LDS	R2,color
    01171 8228      ST	Y,R2
    01172 852D      LDD	R18,Y+13
    01173 2733      CLR	R19
    01174 1B24      SUB	R18,R20
    01175 0B35      SBC	R19,R21
    01176 850B      LDD	R16,Y+11
    01177 2711      CLR	R17
    01178 1B06      SUB	R16,R22
    01179 0B17      SBC	R17,R23
    0117A 940E 0431 CALL	_GLCD_SetPixel
(0143) 		GLCD_SetPixel(cx + ay, cy - ax, color);
    0117C 9020 0100 LDS	R2,color
    0117E 8228      ST	Y,R2
    0117F 852D      LDD	R18,Y+13
    01180 2733      CLR	R19
    01181 1B24      SUB	R18,R20
    01182 0B35      SBC	R19,R21
    01183 850B      LDD	R16,Y+11
    01184 2711      CLR	R17
    01185 0F06      ADD	R16,R22
    01186 1F17      ADC	R17,R23
    01187 940E 0431 CALL	_GLCD_SetPixel
(0144) 		ay++;
    01189 5F6F      SUBI	R22,0xFF
    0118A 4F7F      SBCI	R23,0xFF
(0145) 		radiusError += ychange;
    0118B 0CCE      ADD	R12,R14
    0118C 1CDF      ADC	R13,R15
(0146) 		ychange += 2;
    0118D 01C7      MOVW	R24,R14
    0118E 9602      ADIW	R24,2
    0118F 017C      MOVW	R14,R24
(0147) 		if (2 * radiusError + xchange > 0)
    01190 0116      MOVW	R2,R12
    01191 0C22      LSL	R2
    01192 1C33      ROL	R3
    01193 0C2A      ADD	R2,R10
    01194 1C3B      ADC	R3,R11
    01195 2444      CLR	R4
    01196 2455      CLR	R5
    01197 1442      CP	R4,R2
    01198 0453      CPC	R5,R3
    01199 F43C      BGE	0x11A1
(0148) 		{
(0149) 			ax--;
    0119A 5041      SUBI	R20,1
    0119B 4050      SBCI	R21,0
(0150) 			radiusError += xchange;
    0119C 0CCA      ADD	R12,R10
    0119D 1CDB      ADC	R13,R11
(0151) 			xchange += 2;
    0119E 01C5      MOVW	R24,R10
    0119F 9602      ADIW	R24,2
    011A0 015C      MOVW	R10,R24
(0152) 		}
(0153) 	}
    011A1 1746      CP	R20,R22
    011A2 0757      CPC	R21,R23
    011A3 F00C      BLT	0x11A5
    011A4 CFB0      RJMP	0x1155
    011A5 9621      ADIW	R28,1
    011A6 940E 46BD CALL	pop_xgsetF0FC
    011A8 9624      ADIW	R28,4
    011A9 9508      RET
_lGLCD_item:
  y                    --> R22
  x                    --> R20
  j                    --> R10
  i                    --> R12
    011AA 940E 4703 CALL	push_xgsetF03C
    011AC 0159      MOVW	R10,R18
    011AD 0168      MOVW	R12,R16
    011AE 9724      SBIW	R28,4
(0154) }
(0155) void lGLCD_item(int i, int j)
(0156) {
(0157)     unsigned char x=14+13*i;
    011AF E00D      LDI	R16,0xD
    011B0 E010      LDI	R17,0
    011B1 0196      MOVW	R18,R12
    011B2 940E 4674 CALL	empy16s
    011B4 01A8      MOVW	R20,R16
    011B5 5F42      SUBI	R20,0xF2
    011B6 4F5F      SBCI	R21,0xFF
(0158)     unsigned char y=18+13*j;
    011B7 E00D      LDI	R16,0xD
    011B8 E010      LDI	R17,0
    011B9 0195      MOVW	R18,R10
    011BA 940E 4674 CALL	empy16s
    011BC 01B8      MOVW	R22,R16
    011BD 5E6E      SUBI	R22,0xEE
    011BE 4F7F      SBCI	R23,0xFF
(0159)     lGLCD_SemiCircle(x-3,y-3,3);
    011BF E083      LDI	R24,3
    011C0 8388      ST	Y,R24
    011C1 2F26      MOV	R18,R22
    011C2 5023      SUBI	R18,3
    011C3 2F04      MOV	R16,R20
    011C4 5003      SUBI	R16,3
    011C5 DF78      RCALL	_lGLCD_SemiCircle
(0160)     lGLCD_SemiCircle(x+3,y-3,3);
    011C6 E083      LDI	R24,3
    011C7 8388      ST	Y,R24
    011C8 2F26      MOV	R18,R22
    011C9 5023      SUBI	R18,3
    011CA 2F04      MOV	R16,R20
    011CB 5F0D      SUBI	R16,0xFD
    011CC DF71      RCALL	_lGLCD_SemiCircle
(0161)     GLCD_Line(x-6,y-3,x-6,y);
    011CD 2E26      MOV	R2,R22
    011CE 2433      CLR	R3
    011CF 823B      STD	Y+3,R3
    011D0 822A      STD	Y+2,R2
    011D1 2F84      MOV	R24,R20
    011D2 2799      CLR	R25
    011D3 9706      SBIW	R24,6
    011D4 8399      STD	Y+1,R25
    011D5 8388      ST	Y,R24
    011D6 2D22      MOV	R18,R2
    011D7 2733      CLR	R19
    011D8 5023      SUBI	R18,3
    011D9 4030      SBCI	R19,0
    011DA 018C      MOVW	R16,R24
    011DB 940E 0294 CALL	_GLCD_Line
(0162)     GLCD_Line(x+6,y-3,x+6,y);
    011DD 2E26      MOV	R2,R22
    011DE 2433      CLR	R3
    011DF 823B      STD	Y+3,R3
    011E0 822A      STD	Y+2,R2
    011E1 2F84      MOV	R24,R20
    011E2 2799      CLR	R25
    011E3 9606      ADIW	R24,6
    011E4 8399      STD	Y+1,R25
    011E5 8388      ST	Y,R24
    011E6 2D22      MOV	R18,R2
    011E7 2733      CLR	R19
    011E8 5023      SUBI	R18,3
    011E9 4030      SBCI	R19,0
    011EA 018C      MOVW	R16,R24
    011EB 940E 0294 CALL	_GLCD_Line
(0163)     GLCD_Line(x-6,y,x,y+6);
    011ED 2F86      MOV	R24,R22
    011EE 2799      CLR	R25
    011EF 9606      ADIW	R24,6
    011F0 839B      STD	Y+3,R25
    011F1 838A      STD	Y+2,R24
    011F2 2E24      MOV	R2,R20
    011F3 2433      CLR	R3
    011F4 8239      STD	Y+1,R3
    011F5 8228      ST	Y,R2
    011F6 2F26      MOV	R18,R22
    011F7 2733      CLR	R19
    011F8 2D02      MOV	R16,R2
    011F9 2711      CLR	R17
    011FA 5006      SUBI	R16,6
    011FB 4010      SBCI	R17,0
    011FC 940E 0294 CALL	_GLCD_Line
(0164)     GLCD_Line(x+6,y,x,y+6);
    011FE 2F86      MOV	R24,R22
    011FF 2799      CLR	R25
    01200 9606      ADIW	R24,6
    01201 839B      STD	Y+3,R25
    01202 838A      STD	Y+2,R24
    01203 2E24      MOV	R2,R20
    01204 2433      CLR	R3
    01205 8239      STD	Y+1,R3
    01206 8228      ST	Y,R2
    01207 2F26      MOV	R18,R22
    01208 2733      CLR	R19
    01209 2D02      MOV	R16,R2
    0120A 2711      CLR	R17
    0120B 5F0A      SUBI	R16,0xFA
    0120C 4F1F      SBCI	R17,0xFF
    0120D 940E 0294 CALL	_GLCD_Line
    0120F 9624      ADIW	R28,4
    01210 940C 470C JMP	pop_xgsetF03C
_lGLCD_rock:
  y                    --> R22
  x                    --> R20
  j                    --> R10
  i                    --> R12
    01212 940E 4703 CALL	push_xgsetF03C
    01214 0159      MOVW	R10,R18
    01215 0168      MOVW	R12,R16
    01216 9724      SBIW	R28,4
(0165) 
(0166) }
(0167) void lGLCD_rock(int i,int j)
(0168) {
(0169)     unsigned char x=14+13*i;
    01217 E00D      LDI	R16,0xD
    01218 E010      LDI	R17,0
    01219 0196      MOVW	R18,R12
    0121A 940E 4674 CALL	empy16s
    0121C 01A8      MOVW	R20,R16
    0121D 5F42      SUBI	R20,0xF2
    0121E 4F5F      SBCI	R21,0xFF
(0170)     unsigned char y=18+13*j;
    0121F E00D      LDI	R16,0xD
    01220 E010      LDI	R17,0
    01221 0195      MOVW	R18,R10
    01222 940E 4674 CALL	empy16s
    01224 01B8      MOVW	R22,R16
    01225 5E6E      SUBI	R22,0xEE
    01226 4F7F      SBCI	R23,0xFF
(0171)     GLCD_Line(x-4,y-4,x-4,y-3);
    01227 2F86      MOV	R24,R22
    01228 2799      CLR	R25
    01229 9703      SBIW	R24,3
    0122A 839B      STD	Y+3,R25
    0122B 838A      STD	Y+2,R24
    0122C 2F84      MOV	R24,R20
    0122D 2799      CLR	R25
    0122E 9704      SBIW	R24,4
    0122F 011C      MOVW	R2,R24
    01230 8239      STD	Y+1,R3
    01231 8228      ST	Y,R2
    01232 2F26      MOV	R18,R22
    01233 2733      CLR	R19
    01234 5024      SUBI	R18,4
    01235 4030      SBCI	R19,0
    01236 018C      MOVW	R16,R24
    01237 940E 0294 CALL	_GLCD_Line
(0172)     GLCD_Line(x-2,y-4,x-2,y-3);
    01239 2F86      MOV	R24,R22
    0123A 2799      CLR	R25
    0123B 9703      SBIW	R24,3
    0123C 839B      STD	Y+3,R25
    0123D 838A      STD	Y+2,R24
    0123E 2F84      MOV	R24,R20
    0123F 2799      CLR	R25
    01240 9702      SBIW	R24,2
    01241 011C      MOVW	R2,R24
    01242 8239      STD	Y+1,R3
    01243 8228      ST	Y,R2
    01244 2F26      MOV	R18,R22
    01245 2733      CLR	R19
    01246 5024      SUBI	R18,4
    01247 4030      SBCI	R19,0
    01248 018C      MOVW	R16,R24
    01249 940E 0294 CALL	_GLCD_Line
(0173)     GLCD_Line(x+2,y-4,x+2,y-3);
    0124B 2F86      MOV	R24,R22
    0124C 2799      CLR	R25
    0124D 9703      SBIW	R24,3
    0124E 839B      STD	Y+3,R25
    0124F 838A      STD	Y+2,R24
    01250 2F84      MOV	R24,R20
    01251 2799      CLR	R25
    01252 9602      ADIW	R24,2
    01253 015C      MOVW	R10,R24
    01254 82B9      STD	Y+1,R11
    01255 82A8      ST	Y,R10
    01256 2F26      MOV	R18,R22
    01257 2733      CLR	R19
    01258 5024      SUBI	R18,4
    01259 4030      SBCI	R19,0
    0125A 018C      MOVW	R16,R24
    0125B 940E 0294 CALL	_GLCD_Line
(0174)     GLCD_Line(x+4,y-4,x+4,y-3);
    0125D 2F86      MOV	R24,R22
    0125E 2799      CLR	R25
    0125F 9703      SBIW	R24,3
    01260 839B      STD	Y+3,R25
    01261 838A      STD	Y+2,R24
    01262 2F84      MOV	R24,R20
    01263 2799      CLR	R25
    01264 9604      ADIW	R24,4
    01265 015C      MOVW	R10,R24
    01266 82B9      STD	Y+1,R11
    01267 82A8      ST	Y,R10
    01268 2F26      MOV	R18,R22
    01269 2733      CLR	R19
    0126A 5024      SUBI	R18,4
    0126B 4030      SBCI	R19,0
    0126C 018C      MOVW	R16,R24
    0126D 940E 0294 CALL	_GLCD_Line
(0175)     GLCD_Line(x-4,y,x+4,y);
    0126F 2E26      MOV	R2,R22
    01270 2433      CLR	R3
    01271 823B      STD	Y+3,R3
    01272 822A      STD	Y+2,R2
    01273 2F84      MOV	R24,R20
    01274 2799      CLR	R25
    01275 9604      ADIW	R24,4
    01276 8399      STD	Y+1,R25
    01277 8388      ST	Y,R24
    01278 2D22      MOV	R18,R2
    01279 2733      CLR	R19
    0127A 2F04      MOV	R16,R20
    0127B 2711      CLR	R17
    0127C 5004      SUBI	R16,4
    0127D 4010      SBCI	R17,0
    0127E 940E 0294 CALL	_GLCD_Line
(0176)     GLCD_Line(x-3,y+1,x-3,y+3);
    01280 2F86      MOV	R24,R22
    01281 2799      CLR	R25
    01282 9603      ADIW	R24,3
    01283 839B      STD	Y+3,R25
    01284 838A      STD	Y+2,R24
    01285 2F84      MOV	R24,R20
    01286 2799      CLR	R25
    01287 9703      SBIW	R24,3
    01288 015C      MOVW	R10,R24
    01289 82B9      STD	Y+1,R11
    0128A 82A8      ST	Y,R10
    0128B 2F26      MOV	R18,R22
    0128C 2733      CLR	R19
    0128D 5F2F      SUBI	R18,0xFF
    0128E 4F3F      SBCI	R19,0xFF
    0128F 018C      MOVW	R16,R24
    01290 940E 0294 CALL	_GLCD_Line
(0177)     GLCD_Line(x+3,y+1,x+3,y+3);
    01292 2F86      MOV	R24,R22
    01293 2799      CLR	R25
    01294 9603      ADIW	R24,3
    01295 839B      STD	Y+3,R25
    01296 838A      STD	Y+2,R24
    01297 2F84      MOV	R24,R20
    01298 2799      CLR	R25
    01299 9603      ADIW	R24,3
    0129A 015C      MOVW	R10,R24
    0129B 82B9      STD	Y+1,R11
    0129C 82A8      ST	Y,R10
    0129D 2F26      MOV	R18,R22
    0129E 2733      CLR	R19
    0129F 5F2F      SUBI	R18,0xFF
    012A0 4F3F      SBCI	R19,0xFF
    012A1 018C      MOVW	R16,R24
    012A2 940E 0294 CALL	_GLCD_Line
(0178)     GLCD_Line(x,y+1,x,y+2);
    012A4 2F86      MOV	R24,R22
    012A5 2799      CLR	R25
    012A6 9602      ADIW	R24,2
    012A7 839B      STD	Y+3,R25
    012A8 838A      STD	Y+2,R24
    012A9 2E24      MOV	R2,R20
    012AA 2433      CLR	R3
    012AB 8239      STD	Y+1,R3
    012AC 8228      ST	Y,R2
    012AD 2F26      MOV	R18,R22
    012AE 2733      CLR	R19
    012AF 5F2F      SUBI	R18,0xFF
    012B0 4F3F      SBCI	R19,0xFF
    012B1 2D02      MOV	R16,R2
    012B2 2711      CLR	R17
    012B3 940E 0294 CALL	_GLCD_Line
(0179)     GLCD_Line(x-2,y+4,x-1,y+4);
    012B5 2F86      MOV	R24,R22
    012B6 2799      CLR	R25
    012B7 9604      ADIW	R24,4
    012B8 015C      MOVW	R10,R24
    012B9 82BB      STD	Y+3,R11
    012BA 82AA      STD	Y+2,R10
    012BB 2F84      MOV	R24,R20
    012BC 2799      CLR	R25
    012BD 9701      SBIW	R24,1
    012BE 8399      STD	Y+1,R25
    012BF 8388      ST	Y,R24
    012C0 0195      MOVW	R18,R10
    012C1 2F04      MOV	R16,R20
    012C2 2711      CLR	R17
    012C3 5002      SUBI	R16,2
    012C4 4010      SBCI	R17,0
    012C5 940E 0294 CALL	_GLCD_Line
(0180)     GLCD_Line(x+1,y+3,x+2,y+4);
    012C7 2F86      MOV	R24,R22
    012C8 2799      CLR	R25
    012C9 9604      ADIW	R24,4
    012CA 839B      STD	Y+3,R25
    012CB 838A      STD	Y+2,R24
    012CC 2F84      MOV	R24,R20
    012CD 2799      CLR	R25
    012CE 9602      ADIW	R24,2
    012CF 8399      STD	Y+1,R25
    012D0 8388      ST	Y,R24
    012D1 2F26      MOV	R18,R22
    012D2 2733      CLR	R19
    012D3 5F2D      SUBI	R18,0xFD
    012D4 4F3F      SBCI	R19,0xFF
    012D5 2F04      MOV	R16,R20
    012D6 2711      CLR	R17
    012D7 5F0F      SUBI	R16,0xFF
    012D8 4F1F      SBCI	R17,0xFF
    012D9 940E 0294 CALL	_GLCD_Line
(0181)     GLCD_Line(x-1,y+5,x+1,y+5);
    012DB 2F86      MOV	R24,R22
    012DC 2799      CLR	R25
    012DD 9605      ADIW	R24,5
    012DE 015C      MOVW	R10,R24
    012DF 82BB      STD	Y+3,R11
    012E0 82AA      STD	Y+2,R10
    012E1 2F84      MOV	R24,R20
    012E2 2799      CLR	R25
    012E3 9601      ADIW	R24,1
    012E4 8399      STD	Y+1,R25
    012E5 8388      ST	Y,R24
    012E6 0195      MOVW	R18,R10
    012E7 2F04      MOV	R16,R20
    012E8 2711      CLR	R17
    012E9 5001      SUBI	R16,1
    012EA 4010      SBCI	R17,0
    012EB 940E 0294 CALL	_GLCD_Line
(0182)     GLCD_SetPixel(x-3,y-5,1);
    012ED E081      LDI	R24,1
    012EE 8388      ST	Y,R24
    012EF 2F26      MOV	R18,R22
    012F0 5025      SUBI	R18,5
    012F1 2F04      MOV	R16,R20
    012F2 5003      SUBI	R16,3
    012F3 940E 0431 CALL	_GLCD_SetPixel
(0183)     GLCD_SetPixel(x-3,y-2,1);
    012F5 E081      LDI	R24,1
    012F6 8388      ST	Y,R24
    012F7 2F26      MOV	R18,R22
    012F8 5022      SUBI	R18,2
    012F9 2F04      MOV	R16,R20
    012FA 5003      SUBI	R16,3
    012FB 940E 0431 CALL	_GLCD_SetPixel
(0184)     GLCD_SetPixel(x+3,y-5,1);
    012FD E081      LDI	R24,1
    012FE 8388      ST	Y,R24
    012FF 2F26      MOV	R18,R22
    01300 5025      SUBI	R18,5
    01301 2F04      MOV	R16,R20
    01302 5F0D      SUBI	R16,0xFD
    01303 940E 0431 CALL	_GLCD_SetPixel
(0185)     GLCD_SetPixel(x+3,y-2,1);
    01305 E081      LDI	R24,1
    01306 8388      ST	Y,R24
    01307 2F26      MOV	R18,R22
    01308 5022      SUBI	R18,2
    01309 2F04      MOV	R16,R20
    0130A 5F0D      SUBI	R16,0xFD
    0130B 940E 0431 CALL	_GLCD_SetPixel
    0130D 9624      ADIW	R28,4
    0130E 940C 470C JMP	pop_xgsetF03C
_lGLCD_fail:
  y                    --> R12
  x                    --> R10
  j                    --> R12
  i                    --> R10
    01310 940E 46CE CALL	push_xgset003C
    01312 0169      MOVW	R12,R18
    01313 0158      MOVW	R10,R16
    01314 9724      SBIW	R28,4
(0186) }
(0187) void lGLCD_fail(int i,int j)
(0188) {
(0189)     unsigned char x=14+13*i;
    01315 E00D      LDI	R16,0xD
    01316 E010      LDI	R17,0
    01317 0195      MOVW	R18,R10
    01318 940E 4674 CALL	empy16s
    0131A 01C8      MOVW	R24,R16
    0131B 960E      ADIW	R24,0xE
    0131C 2EA8      MOV	R10,R24
(0190)     unsigned char y=18+13*j;
    0131D E00D      LDI	R16,0xD
    0131E E010      LDI	R17,0
    0131F 0196      MOVW	R18,R12
    01320 940E 4674 CALL	empy16s
    01322 01C8      MOVW	R24,R16
    01323 9642      ADIW	R24,0x12
    01324 2EC8      MOV	R12,R24
(0191)     GLCD_Line(x-6,y-6,x+6,y+6);
    01325 2799      CLR	R25
    01326 9606      ADIW	R24,6
    01327 839B      STD	Y+3,R25
    01328 838A      STD	Y+2,R24
    01329 2D8A      MOV	R24,R10
    0132A 2799      CLR	R25
    0132B 9606      ADIW	R24,6
    0132C 8399      STD	Y+1,R25
    0132D 8388      ST	Y,R24
    0132E 2D2C      MOV	R18,R12
    0132F 2733      CLR	R19
    01330 5026      SUBI	R18,6
    01331 4030      SBCI	R19,0
    01332 2D0A      MOV	R16,R10
    01333 2711      CLR	R17
    01334 5006      SUBI	R16,6
    01335 4010      SBCI	R17,0
    01336 940E 0294 CALL	_GLCD_Line
(0192)     GLCD_Line(x+6,y-6,x-6,y+6);
    01338 2D8C      MOV	R24,R12
    01339 2799      CLR	R25
    0133A 9606      ADIW	R24,6
    0133B 839B      STD	Y+3,R25
    0133C 838A      STD	Y+2,R24
    0133D 2D8A      MOV	R24,R10
    0133E 2799      CLR	R25
    0133F 9706      SBIW	R24,6
    01340 8399      STD	Y+1,R25
    01341 8388      ST	Y,R24
    01342 2D2C      MOV	R18,R12
    01343 2733      CLR	R19
    01344 5026      SUBI	R18,6
    01345 4030      SBCI	R19,0
    01346 2D0A      MOV	R16,R10
    01347 2711      CLR	R17
    01348 5F0A      SUBI	R16,0xFA
    01349 4F1F      SBCI	R17,0xFF
    0134A 940E 0294 CALL	_GLCD_Line
(0193)     GLCD_Line(x-5,y-6,x+6,y+5);
    0134C 2D8C      MOV	R24,R12
    0134D 2799      CLR	R25
    0134E 9605      ADIW	R24,5
    0134F 839B      STD	Y+3,R25
    01350 838A      STD	Y+2,R24
    01351 2D8A      MOV	R24,R10
    01352 2799      CLR	R25
    01353 9606      ADIW	R24,6
    01354 8399      STD	Y+1,R25
    01355 8388      ST	Y,R24
    01356 2D2C      MOV	R18,R12
    01357 2733      CLR	R19
    01358 5026      SUBI	R18,6
    01359 4030      SBCI	R19,0
    0135A 2D0A      MOV	R16,R10
    0135B 2711      CLR	R17
    0135C 5005      SUBI	R16,5
    0135D 4010      SBCI	R17,0
    0135E 940E 0294 CALL	_GLCD_Line
(0194)     GLCD_Line(x-6,y-5,x+5,y+6);
    01360 2D8C      MOV	R24,R12
    01361 2799      CLR	R25
    01362 9606      ADIW	R24,6
    01363 839B      STD	Y+3,R25
    01364 838A      STD	Y+2,R24
    01365 2D8A      MOV	R24,R10
    01366 2799      CLR	R25
    01367 9605      ADIW	R24,5
    01368 8399      STD	Y+1,R25
    01369 8388      ST	Y,R24
    0136A 2D2C      MOV	R18,R12
    0136B 2733      CLR	R19
    0136C 5025      SUBI	R18,5
    0136D 4030      SBCI	R19,0
    0136E 2D0A      MOV	R16,R10
    0136F 2711      CLR	R17
    01370 5006      SUBI	R16,6
    01371 4010      SBCI	R17,0
    01372 940E 0294 CALL	_GLCD_Line
(0195)     GLCD_Line(x-6,y+5,x+5,y-6);
    01374 2D8C      MOV	R24,R12
    01375 2799      CLR	R25
    01376 9706      SBIW	R24,6
    01377 839B      STD	Y+3,R25
    01378 838A      STD	Y+2,R24
    01379 2D8A      MOV	R24,R10
    0137A 2799      CLR	R25
    0137B 9605      ADIW	R24,5
    0137C 8399      STD	Y+1,R25
    0137D 8388      ST	Y,R24
    0137E 2D2C      MOV	R18,R12
    0137F 2733      CLR	R19
    01380 5F2B      SUBI	R18,0xFB
    01381 4F3F      SBCI	R19,0xFF
    01382 2D0A      MOV	R16,R10
    01383 2711      CLR	R17
    01384 5006      SUBI	R16,6
    01385 4010      SBCI	R17,0
    01386 940E 0294 CALL	_GLCD_Line
(0196)     GLCD_Line(x-5,y+6,x+6,y-5);
    01388 2D8C      MOV	R24,R12
    01389 2799      CLR	R25
    0138A 9705      SBIW	R24,5
    0138B 839B      STD	Y+3,R25
    0138C 838A      STD	Y+2,R24
    0138D 2D8A      MOV	R24,R10
    0138E 2799      CLR	R25
    0138F 9606      ADIW	R24,6
    01390 8399      STD	Y+1,R25
    01391 8388      ST	Y,R24
    01392 2D2C      MOV	R18,R12
    01393 2733      CLR	R19
    01394 5F2A      SUBI	R18,0xFA
    01395 4F3F      SBCI	R19,0xFF
    01396 2D0A      MOV	R16,R10
    01397 2711      CLR	R17
    01398 5005      SUBI	R16,5
    01399 4010      SBCI	R17,0
    0139A 940E 0294 CALL	_GLCD_Line
    0139C 9624      ADIW	R28,4
    0139D 940C 46B8 JMP	pop_xgset003C
_GLCD_cursor_off:
  y                    --> R12
  x                    --> R10
  color                --> R20
  a                    --> R22
  b                    --> R14
  j                    --> R12
  i                    --> R10
    0139F 940E 46C8 CALL	push_xgsetF0FC
    013A1 0169      MOVW	R12,R18
    013A2 0158      MOVW	R10,R16
    013A3 9721      SBIW	R28,1
(0197) 
(0198) }
(0199) 
(0200) void GLCD_cursor_off(int i,int j)
(0201) {
(0202)     unsigned char color=0;
(0203)     int x=14+13*i,y=18+13*j;
    013A4 E00D      LDI	R16,0xD
    013A5 E010      LDI	R17,0
    013A6 0195      MOVW	R18,R10
    013A7 940E 4674 CALL	empy16s
    013A9 01C8      MOVW	R24,R16
    013AA 960E      ADIW	R24,0xE
    013AB 015C      MOVW	R10,R24
    013AC E00D      LDI	R16,0xD
    013AD E010      LDI	R17,0
    013AE 0196      MOVW	R18,R12
    013AF 940E 4674 CALL	empy16s
    013B1 01C8      MOVW	R24,R16
    013B2 9642      ADIW	R24,0x12
    013B3 016C      MOVW	R12,R24
(0204)     int a,b;
(0205)     color=0;
    013B4 2744      CLR	R20
(0206)     for(a=-5;a<7;a++)
    013B5 EF6B      LDI	R22,0xFB
    013B6 EF7F      LDI	R23,0xFF
(0207)         for(b=-5;b<7;b++)
    013B7 EF8B      LDI	R24,0xFB
    013B8 EF9F      LDI	R25,0xFF
    013B9 017C      MOVW	R14,R24
(0208)             GLCD_SetPixel(x+a,y+b,color);
    013BA 8348      ST	Y,R20
    013BB 0196      MOVW	R18,R12
    013BC 0D2E      ADD	R18,R14
    013BD 1D3F      ADC	R19,R15
    013BE 0185      MOVW	R16,R10
    013BF 0F06      ADD	R16,R22
    013C0 1F17      ADC	R17,R23
    013C1 940E 0431 CALL	_GLCD_SetPixel
    013C3 01C7      MOVW	R24,R14
    013C4 9601      ADIW	R24,1
    013C5 017C      MOVW	R14,R24
    013C6 3087      CPI	R24,7
    013C7 E0E0      LDI	R30,0
    013C8 079E      CPC	R25,R30
    013C9 F384      BLT	0x13BA
    013CA 5F6F      SUBI	R22,0xFF
    013CB 4F7F      SBCI	R23,0xFF
    013CC 3067      CPI	R22,7
    013CD E0E0      LDI	R30,0
    013CE 077E      CPC	R23,R30
    013CF F33C      BLT	0x13B7
(0209)     color=1;
    013D0 E041      LDI	R20,1
(0210) }
_rGLCD_success:
  color                --> R20
  y                    --> R12
  x                    --> R10
  j                    --> R12
  i                    --> R10
    013D4 940E 46F5 CALL	push_xgset303C
    013D6 0169      MOVW	R12,R18
    013D7 0158      MOVW	R10,R16
    013D8 9721      SBIW	R28,1
FILE: C:\Users\EE-01\Desktop\ÃÖÃÖÁ¾\main.c
(0001) #include <iom128v.h>
(0002) #include <stdlib.h>
(0003) #include "graphic.h"
(0004) #include "t6963c.h"
(0005) #include "rsetting.h"
(0006) #include "lsetting.h"
(0007) 
(0008) void is_found_rock(void);
(0009) 
(0010) int i=0, j=1;
(0011) int game_set[8][8];
(0012) int counter_set[8][8]={0};
(0013) int counter_detect[8][8]={0};
(0014) int my_detect[8][8]={0};
(0015) char flag=0;
(0016) unsigned char sleep=0;
(0017) int destroy[4]={-1,-1,-1,-1};
(0018) char ship_cnt=0, item_cnt=0, mine_cnt=0;
(0019) unsigned char outdata;
(0020) unsigned int timercounter=0;
(0021) unsigned char timer_sec=16;
(0022) unsigned char time_flag=1;
(0023) unsigned char mode=0;
(0024) void timeover_select(void);
(0025) unsigned char difficult=7; //³­ÀÌµµ-³ôÀ»¼ö·Ï ½¬¿ò
(0026) unsigned char select=0;
(0027) int imax, imin, jmax, jmin;
(0028) int ship1x, ship1y, ship2x, ship2y, ship3x, ship3y, ship4x, ship4y, item1x, item1y,
(0029)     item2x, item2y, mine1x, mine1y, mine2x, mine2y, rock1x, rock1y, rock2x, rock2y;
(0030) int cship1x[4],cship1y[4],cship2x[5],cship2y[5],cship3x[2],cship3y[2],cship4x[4],cship4y[4],
(0031)     citemx[2],citemy[2],cminex[2],cminey[2],crockx[2],crocky[2];
(0032) signed char n, state=0;
(0033) char cnt=0;
(0034) int p_i=0, p_j=0;
(0035) char error=0;
(0036) int val_x, val_y;
(0037) int rand_i,rand_j,rand_k,rand_l;
(0038) char rest_ship;
(0039) int AtoD_cnt=0;
(0040) int rate;
(0041) int com_rest_ship=15;
(0042) int cnt_x,cnt_y;
(0043) 
(0044) void rGLCD_success(int i, int j)
(0045) {
(0046)     unsigned char x;
(0047)     unsigned char y;
(0048)     unsigned char color=1;
    013D9 E041      LDI	R20,1
(0049)     x=133+13*i;
    013DA E00D      LDI	R16,0xD
    013DB E010      LDI	R17,0
    013DC 0195      MOVW	R18,R10
    013DD 940E 4674 CALL	empy16s
    013DF 01C8      MOVW	R24,R16
    013E0 578B      SUBI	R24,0x7B
    013E1 4F9F      SBCI	R25,0xFF
    013E2 2EA8      MOV	R10,R24
(0050)     y=19+13*j;
    013E3 E00D      LDI	R16,0xD
    013E4 E010      LDI	R17,0
    013E5 0196      MOVW	R18,R12
    013E6 940E 4674 CALL	empy16s
    013E8 01C8      MOVW	R24,R16
    013E9 9643      ADIW	R24,0x13
    013EA 2EC8      MOV	R12,R24
(0051)     GLCD_Circle(x,y,6);
    013EB E086      LDI	R24,6
    013EC 8388      ST	Y,R24
    013ED 2D2C      MOV	R18,R12
    013EE 2D0A      MOV	R16,R10
    013EF 940E 01FC CALL	_GLCD_Circle
(0052)     GLCD_Circle(x,y,5);
    013F1 E085      LDI	R24,5
    013F2 8388      ST	Y,R24
    013F3 2D2C      MOV	R18,R12
    013F4 2D0A      MOV	R16,R10
    013F5 940E 01FC CALL	_GLCD_Circle
(0053)     GLCD_Circle(x,y,4);
    013F7 E084      LDI	R24,4
    013F8 8388      ST	Y,R24
    013F9 2D2C      MOV	R18,R12
    013FA 2D0A      MOV	R16,R10
    013FB 940E 01FC CALL	_GLCD_Circle
    013FD 9621      ADIW	R28,1
    013FE 940C 46FC JMP	pop_xgset303C
_po_down_on:
    01400 920A      ST	-Y,R0
    01401 921A      ST	-Y,R1
    01402 922A      ST	-Y,R2
    01403 923A      ST	-Y,R3
    01404 924A      ST	-Y,R4
    01405 925A      ST	-Y,R5
    01406 926A      ST	-Y,R6
    01407 927A      ST	-Y,R7
    01408 928A      ST	-Y,R8
    01409 929A      ST	-Y,R9
    0140A 930A      ST	-Y,R16
    0140B 931A      ST	-Y,R17
    0140C 932A      ST	-Y,R18
    0140D 933A      ST	-Y,R19
    0140E 938A      ST	-Y,R24
    0140F 939A      ST	-Y,R25
    01410 93AA      ST	-Y,R26
    01411 93BA      ST	-Y,R27
    01412 93EA      ST	-Y,R30
    01413 93FA      ST	-Y,R31
    01414 B60F      IN	R0,0x3F
    01415 920A      ST	-Y,R0
(0054) }
(0055) 
(0056) //nothing ship item mine rock foundrock
(0057) #pragma interrupt_handler po_down_on:iv_EXT_INT1
(0058) void po_down_on(void)
(0059) {
(0060)     if(sleep==0){
    01416 9020 02D6 LDS	R2,sleep
    01418 2022      TST	R2
    01419 F479      BNE	0x1429
(0061)         MCUCR=0x30;
    0141A E380      LDI	R24,0x30
    0141B BF85      OUT	0x35,R24
(0062)         delay_ms(500);
    0141C EF04      LDI	R16,0xF4
    0141D E011      LDI	R17,1
    0141E 940E 04B0 CALL	_delay_ms
(0063)         SREG=0x80;
    01420 E880      LDI	R24,0x80
    01421 BF8F      OUT	0x3F,R24
(0064)         sleep++;
    01422 9180 02D6 LDS	R24,sleep
    01424 5F8F      SUBI	R24,0xFF
    01425 9380 02D6 STS	sleep,R24
(0065)         asm("SLEEP");
    01427 9588      SLEEP
(0066)     }
    01428 C00B      RJMP	0x1434
(0067)     else{
(0068)         MCUCR=0x00;
    01429 2422      CLR	R2
    0142A BE25      OUT	0x35,R2
(0069)         delay_ms(500);
    0142B EF04      LDI	R16,0xF4
    0142C E011      LDI	R17,1
    0142D 940E 04B0 CALL	_delay_ms
(0070)         sleep--;
    0142F 9180 02D6 LDS	R24,sleep
    01431 5081      SUBI	R24,1
    01432 9380 02D6 STS	sleep,R24
(0071)     }
    01434 9009      LD	R0,Y+
    01435 BE0F      OUT	0x3F,R0
    01436 91F9      LD	R31,Y+
    01437 91E9      LD	R30,Y+
    01438 91B9      LD	R27,Y+
    01439 91A9      LD	R26,Y+
    0143A 9199      LD	R25,Y+
    0143B 9189      LD	R24,Y+
    0143C 9139      LD	R19,Y+
    0143D 9129      LD	R18,Y+
    0143E 9119      LD	R17,Y+
    0143F 9109      LD	R16,Y+
    01440 9099      LD	R9,Y+
    01441 9089      LD	R8,Y+
    01442 9079      LD	R7,Y+
    01443 9069      LD	R6,Y+
    01444 9059      LD	R5,Y+
    01445 9049      LD	R4,Y+
    01446 9039      LD	R3,Y+
    01447 9029      LD	R2,Y+
    01448 9019      LD	R1,Y+
    01449 9009      LD	R0,Y+
    0144A 9518      RETI
_timer2_ovf:
    0144B 920A      ST	-Y,R0
    0144C 921A      ST	-Y,R1
    0144D 922A      ST	-Y,R2
    0144E 923A      ST	-Y,R3
    0144F 924A      ST	-Y,R4
    01450 925A      ST	-Y,R5
    01451 926A      ST	-Y,R6
    01452 927A      ST	-Y,R7
    01453 928A      ST	-Y,R8
    01454 929A      ST	-Y,R9
    01455 930A      ST	-Y,R16
    01456 931A      ST	-Y,R17
    01457 932A      ST	-Y,R18
    01458 933A      ST	-Y,R19
    01459 938A      ST	-Y,R24
    0145A 939A      ST	-Y,R25
    0145B 93AA      ST	-Y,R26
    0145C 93BA      ST	-Y,R27
    0145D 93EA      ST	-Y,R30
    0145E 93FA      ST	-Y,R31
    0145F B60F      IN	R0,0x3F
    01460 920A      ST	-Y,R0
(0072) }
(0073) 
(0074) #pragma interrupt_handler timer2_ovf:iv_TIMER2_OVF
(0075) void timer2_ovf(void)
(0076) {
(0077)     timercounter++;
    01461 9180 02E2 LDS	R24,timercounter
    01463 9190 02E3 LDS	R25,timercounter+1
    01465 9601      ADIW	R24,1
    01466 9390 02E3 STS	timercounter+1,R25
    01468 9380 02E2 STS	timercounter,R24
(0078)     if(timercounter==125)
    0146A 378D      CPI	R24,0x7D
    0146B E0E0      LDI	R30,0
    0146C 079E      CPC	R25,R30
    0146D F009      BEQ	0x146F
    0146E C05E      RJMP	0x14CD
(0079)     {
(0080)         timer_sec--;
    0146F 9180 02E4 LDS	R24,timer_sec
    01471 5081      SUBI	R24,1
    01472 9380 02E4 STS	timer_sec,R24
(0081)         if(timer_sec>=10){
    01474 308A      CPI	R24,0xA
    01475 F0E0      BCS	0x1492
(0082)             GLCD_TextGoTo(14,0);
    01476 2722      CLR	R18
    01477 E00E      LDI	R16,0xE
    01478 940E 0405 CALL	_GLCD_TextGoTo
(0083)             GLCD_WriteChar(timer_sec/10+'0');
    0147A E01A      LDI	R17,0xA
    0147B 9100 02E4 LDS	R16,timer_sec
    0147D 940E 465E CALL	div8u
    0147F 5D00      SUBI	R16,0xD0
    01480 940E 03EF CALL	_GLCD_WriteChar
(0084)             GLCD_WriteChar(timer_sec%10+'0');
    01482 E01A      LDI	R17,0xA
    01483 9100 02E4 LDS	R16,timer_sec
    01485 940E 465C CALL	mod8u
    01487 5D00      SUBI	R16,0xD0
    01488 940E 03EF CALL	_GLCD_WriteChar
(0085)             GLCD_TextGoTo(16,0);
    0148A 2722      CLR	R18
    0148B E100      LDI	R16,0x10
    0148C 940E 0405 CALL	_GLCD_TextGoTo
(0086)             GLCD_WriteDisplayData(0);
    0148E 2700      CLR	R16
    0148F 940E 0468 CALL	_GLCD_WriteDisplayData
(0087)         }
    01491 C017      RJMP	0x14A9
(0088)         else
(0089)         {
(0090)             GLCD_TextGoTo(14,0);
    01492 2722      CLR	R18
    01493 E00E      LDI	R16,0xE
    01494 940E 0405 CALL	_GLCD_TextGoTo
(0091)             GLCD_WriteDisplayData(0);
    01496 2700      CLR	R16
    01497 940E 0468 CALL	_GLCD_WriteDisplayData
(0092)             GLCD_TextGoTo(15,0);
    01499 2722      CLR	R18
    0149A E00F      LDI	R16,0xF
    0149B 940E 0405 CALL	_GLCD_TextGoTo
(0093)             GLCD_WriteChar(timer_sec+'0');
    0149D 9100 02E4 LDS	R16,timer_sec
    0149F 5D00      SUBI	R16,0xD0
    014A0 940E 03EF CALL	_GLCD_WriteChar
(0094)             GLCD_TextGoTo(16,0);
    014A2 2722      CLR	R18
    014A3 E100      LDI	R16,0x10
    014A4 940E 0405 CALL	_GLCD_TextGoTo
(0095)             GLCD_WriteDisplayData(0);
    014A6 2700      CLR	R16
    014A7 940E 0468 CALL	_GLCD_WriteDisplayData
(0096)         }
(0097)             if(!timer_sec){
    014A9 9020 02E4 LDS	R2,timer_sec
    014AB 2022      TST	R2
    014AC F4A1      BNE	0x14C1
(0098)             GLCD_TextGoTo(15,0);
    014AD 2722      CLR	R18
    014AE E00F      LDI	R16,0xF
    014AF 940E 0405 CALL	_GLCD_TextGoTo
(0099)             GLCD_WriteDisplayData(0);
    014B1 2700      CLR	R16
    014B2 940E 0468 CALL	_GLCD_WriteDisplayData
(0100)             GLCD_WriteDisplayData(0);
    014B4 2700      CLR	R16
    014B5 940E 0468 CALL	_GLCD_WriteDisplayData
(0101)             GLCD_WriteDisplayData(0);
    014B7 2700      CLR	R16
    014B8 940E 0468 CALL	_GLCD_WriteDisplayData
(0102)                 //flag--;
(0103)                 timer_sec=16;
    014BA E180      LDI	R24,0x10
    014BB 9380 02E4 STS	timer_sec,R24
(0104)                 time_flag=0;
    014BD 2422      CLR	R2
    014BE 9220 02E5 STS	time_flag,R2
(0105)             timeover_select();
    014C0 D6F9      RCALL	_timeover_select
(0106) 
(0107)             }
(0108)             if(!flag) {
    014C1 9020 02D5 LDS	R2,flag
    014C3 2022      TST	R2
    014C4 F411      BNE	0x14C7
(0109)                     TIMSK=0x00;
    014C5 2422      CLR	R2
    014C6 BE27      OUT	0x37,R2
(0110)         }
(0111)         timercounter=0;
    014C7 2422      CLR	R2
    014C8 2433      CLR	R3
    014C9 9230 02E3 STS	timercounter+1,R3
    014CB 9220 02E2 STS	timercounter,R2
(0112)     }
(0113)     TCNT2=131;
    014CD E883      LDI	R24,0x83
    014CE BD84      OUT	0x24,R24
    014CF 9009      LD	R0,Y+
    014D0 BE0F      OUT	0x3F,R0
    014D1 91F9      LD	R31,Y+
    014D2 91E9      LD	R30,Y+
    014D3 91B9      LD	R27,Y+
    014D4 91A9      LD	R26,Y+
    014D5 9199      LD	R25,Y+
    014D6 9189      LD	R24,Y+
    014D7 9139      LD	R19,Y+
    014D8 9129      LD	R18,Y+
    014D9 9119      LD	R17,Y+
    014DA 9109      LD	R16,Y+
    014DB 9099      LD	R9,Y+
    014DC 9089      LD	R8,Y+
    014DD 9079      LD	R7,Y+
    014DE 9069      LD	R6,Y+
    014DF 9059      LD	R5,Y+
    014E0 9049      LD	R4,Y+
    014E1 9039      LD	R3,Y+
    014E2 9029      LD	R2,Y+
    014E3 9019      LD	R1,Y+
    014E4 9009      LD	R0,Y+
    014E5 9518      RETI
(0114) }
(0115) 
(0116) 
(0117) void USART0_Transmit( char data )
(0118) {
(0119)     while(!(UCSR0A&0x20));
_USART0_Transmit:
  data                 --> R16
    014E6 9B5D      SBIS	0x0B,5
    014E7 CFFE      RJMP	_USART0_Transmit
(0120)     UDR0 = data;
    014E8 B90C      OUT	0x0C,R16
    014E9 9508      RET
(0121) }
(0122) 
(0123) void AtoD(void)
(0124) {
(0125)     ADMUX =0x00;
_AtoD:
    014EA 2422      CLR	R2
    014EB B827      OUT	0x07,R2
(0126)     ADCSRA |= 0x40;
    014EC 9A36      SBI	0x06,6
(0127)     while((ADCSRA&0x10)==0);
    014ED 9B34      SBIS	0x06,4
    014EE CFFE      RJMP	0x14ED
(0128)     val_x=(int)ADCL;
    014EF B024      IN	R2,0x04
    014F0 2433      CLR	R3
    014F1 9230 03D0 STS	val_x+1,R3
    014F3 9220 03CF STS	val_x,R2
(0129)     val_x+=(int)ADCH*256;
    014F5 B125      IN	R18,0x05
    014F6 2733      CLR	R19
    014F7 E000      LDI	R16,0
    014F8 E011      LDI	R17,1
    014F9 940E 4674 CALL	empy16s
    014FB 9020 03CF LDS	R2,val_x
    014FD 9030 03D0 LDS	R3,val_x+1
    014FF 0E20      ADD	R2,R16
    01500 1E31      ADC	R3,R17
    01501 9230 03D0 STS	val_x+1,R3
    01503 9220 03CF STS	val_x,R2
(0130)     ADMUX =0x01;
    01505 E081      LDI	R24,1
    01506 B987      OUT	0x07,R24
(0131)     ADCSRA |= 0x40;
    01507 9A36      SBI	0x06,6
(0132)     while((ADCSRA&0x10)==0);
    01508 9B34      SBIS	0x06,4
    01509 CFFE      RJMP	0x1508
(0133)     val_y=(int)ADCL;
    0150A B024      IN	R2,0x04
    0150B 2433      CLR	R3
    0150C 9230 03CE STS	val_y+1,R3
    0150E 9220 03CD STS	val_y,R2
(0134)     val_y+=(int)ADCH*256;
    01510 B125      IN	R18,0x05
    01511 2733      CLR	R19
    01512 E000      LDI	R16,0
    01513 E011      LDI	R17,1
    01514 940E 4674 CALL	empy16s
    01516 9020 03CD LDS	R2,val_y
    01518 9030 03CE LDS	R3,val_y+1
    0151A 0E20      ADD	R2,R16
    0151B 1E31      ADC	R3,R17
    0151C 9230 03CE STS	val_y+1,R3
    0151E 9220 03CD STS	val_y,R2
(0135)     AtoD_cnt++;
    01520 9180 02F0 LDS	R24,AtoD_cnt
    01522 9190 02F1 LDS	R25,AtoD_cnt+1
    01524 9601      ADIW	R24,1
    01525 9390 02F1 STS	AtoD_cnt+1,R25
    01527 9380 02F0 STS	AtoD_cnt,R24
(0136)     AtoD_cnt=AtoD_cnt%300;
    01529 E22C      LDI	R18,0x2C
    0152A E031      LDI	R19,1
    0152B 018C      MOVW	R16,R24
    0152C 940E 45B8 CALL	mod16s
    0152E 9310 02F1 STS	AtoD_cnt+1,R17
    01530 9300 02F0 STS	AtoD_cnt,R16
    01532 9508      RET
(0137) }
(0138) 
(0139) void vibrating(void)
(0140) {
(0141)     PORTD|=0x10;
_vibrating:
    01533 9A94      SBI	0x12,4
(0142)     delay_ms(500);
    01534 EF04      LDI	R16,0xF4
    01535 E011      LDI	R17,1
    01536 940E 04B0 CALL	_delay_ms
(0143)     PORTD&=0xef;
    01538 B382      IN	R24,0x12
    01539 7E8F      ANDI	R24,0xEF
    0153A BB82      OUT	0x12,R24
    0153B 9508      RET
(0144) }
(0145) 
(0146) void mode_select(void)
(0147) {
(0148)      select=0;
_mode_select:
    0153C 2422      CLR	R2
    0153D 9220 02E8 STS	select,R2
(0149)      GLCD_TextGoTo(8,3);
    0153F E023      LDI	R18,3
    01540 E008      LDI	R16,0x8
    01541 940E 0405 CALL	_GLCD_TextGoTo
(0150)      GLCD_WriteString("BATTLESHIP GAME");
    01543 EA00      LDI	R16,0xA0
    01544 E013      LDI	R17,3
    01545 940E 03F6 CALL	_GLCD_WriteString
(0151)      GLCD_TextGoTo(2,8);
    01547 E028      LDI	R18,0x8
    01548 E002      LDI	R16,2
    01549 940E 0405 CALL	_GLCD_TextGoTo
(0152)      GLCD_WriteString("SINGLE MODE");
    0154B E904      LDI	R16,0x94
    0154C E013      LDI	R17,3
    0154D 940E 03F6 CALL	_GLCD_WriteString
(0153)      GLCD_TextGoTo(17,8);
    0154F E028      LDI	R18,0x8
    01550 E101      LDI	R16,0x11
    01551 940E 0405 CALL	_GLCD_TextGoTo
(0154)      GLCD_WriteString("MULTI MODE");
    01553 E809      LDI	R16,0x89
    01554 E013      LDI	R17,3
    01555 940E 03F6 CALL	_GLCD_WriteString
    01557 C0D9      RJMP	0x1631
(0155)     while(select==0)
(0156)     {
(0157)         while(select==0&&mode==0){
(0158)             GLCD_TextGoTo(17,8);
    01558 E028      LDI	R18,0x8
    01559 E101      LDI	R16,0x11
    0155A 940E 0405 CALL	_GLCD_TextGoTo
(0159)             GLCD_WriteString("MULTI MODE");
    0155C E809      LDI	R16,0x89
    0155D E013      LDI	R17,3
    0155E 940E 03F6 CALL	_GLCD_WriteString
(0160)             begin_cursoron(50,80);
    01560 E520      LDI	R18,0x50
    01561 E302      LDI	R16,0x32
    01562 940E 0C39 CALL	_begin_cursoron
(0161)             begin_cursoroff(170,80);
    01564 E520      LDI	R18,0x50
    01565 EA0A      LDI	R16,0xAA
    01566 D818      RCALL	_begin_cursoroff
(0162)             AtoD();
    01567 DF82      RCALL	_AtoD
(0163)             if(val_x>900) { mode=1; break;}
    01568 E884      LDI	R24,0x84
    01569 E093      LDI	R25,3
    0156A 9020 03CF LDS	R2,val_x
    0156C 9030 03D0 LDS	R3,val_x+1
    0156E 1582      CP	R24,R2
    0156F 0593      CPC	R25,R3
    01570 F424      BGE	0x1575
    01571 E081      LDI	R24,1
    01572 9380 02E6 STS	mode,R24
    01574 C0B3      RJMP	0x1628
(0164)             if((PINF&0x08)==0x00) {select++; break;}
    01575 9903      SBIC	0x00,3
    01576 C006      RJMP	0x157D
    01577 9180 02E8 LDS	R24,select
    01579 5F8F      SUBI	R24,0xFF
    0157A 9380 02E8 STS	select,R24
    0157C C0AB      RJMP	0x1628
(0165)             delay_ms(300);
    0157D E20C      LDI	R16,0x2C
    0157E E011      LDI	R17,1
    0157F 940E 04B0 CALL	_delay_ms
(0166)             GLCD_TextGoTo1(2,8);
    01581 E028      LDI	R18,0x8
    01582 E002      LDI	R16,2
    01583 D949      RCALL	_GLCD_TextGoTo1
(0167)             AtoD();
    01584 DF65      RCALL	_AtoD
(0168)             if(val_x>900) { mode=1; break;}
    01585 E884      LDI	R24,0x84
    01586 E093      LDI	R25,3
    01587 9020 03CF LDS	R2,val_x
    01589 9030 03D0 LDS	R3,val_x+1
    0158B 1582      CP	R24,R2
    0158C 0593      CPC	R25,R3
    0158D F424      BGE	0x1592
    0158E E081      LDI	R24,1
    0158F 9380 02E6 STS	mode,R24
    01591 C096      RJMP	0x1628
(0169)             if((PINF&0x08)==0x00) {select++; break;}
    01592 9903      SBIC	0x00,3
    01593 C006      RJMP	0x159A
    01594 9180 02E8 LDS	R24,select
    01596 5F8F      SUBI	R24,0xFF
    01597 9380 02E8 STS	select,R24
    01599 C08E      RJMP	0x1628
(0170)             delay_ms(300);
    0159A E20C      LDI	R16,0x2C
    0159B E011      LDI	R17,1
    0159C 940E 04B0 CALL	_delay_ms
(0171)             GLCD_TextGoTo(2,8);
    0159E E028      LDI	R18,0x8
    0159F E002      LDI	R16,2
    015A0 940E 0405 CALL	_GLCD_TextGoTo
(0172)             GLCD_WriteString("SINGLE MODE");
    015A2 E904      LDI	R16,0x94
    015A3 E013      LDI	R17,3
    015A4 940E 03F6 CALL	_GLCD_WriteString
(0173)             AtoD();
    015A6 DF43      RCALL	_AtoD
(0174)             if(val_x>900) { mode=1; break;}
    015A7 E884      LDI	R24,0x84
    015A8 E093      LDI	R25,3
    015A9 9020 03CF LDS	R2,val_x
    015AB 9030 03D0 LDS	R3,val_x+1
    015AD 1582      CP	R24,R2
    015AE 0593      CPC	R25,R3
    015AF F424      BGE	0x15B4
    015B0 E081      LDI	R24,1
    015B1 9380 02E6 STS	mode,R24
    015B3 C074      RJMP	0x1628
(0175)             if((PINF&0x08)==0x00) {select++; break;}
    015B4 9903      SBIC	0x00,3
    015B5 C006      RJMP	0x15BC
    015B6 9180 02E8 LDS	R24,select
    015B8 5F8F      SUBI	R24,0xFF
    015B9 9380 02E8 STS	select,R24
    015BB C06C      RJMP	0x1628
(0176)         }
    015BC 9020 02E8 LDS	R2,select
    015BE 2022      TST	R2
    015BF F429      BNE	0x15C5
    015C0 9020 02E6 LDS	R2,mode
    015C2 2022      TST	R2
    015C3 F409      BNE	0x15C5
    015C4 CF93      RJMP	0x1558
    015C5 C062      RJMP	0x1628
(0177)         while(select==0&&mode==1){
(0178)             GLCD_TextGoTo(2,8);
    015C6 E028      LDI	R18,0x8
    015C7 E002      LDI	R16,2
    015C8 940E 0405 CALL	_GLCD_TextGoTo
(0179)             GLCD_WriteString("SINGLE MODE");
    015CA E904      LDI	R16,0x94
    015CB E013      LDI	R17,3
    015CC 940E 03F6 CALL	_GLCD_WriteString
(0180)             begin_cursoron(170,80);
    015CE E520      LDI	R18,0x50
    015CF EA0A      LDI	R16,0xAA
    015D0 940E 0C39 CALL	_begin_cursoron
(0181)             begin_cursoroff(50,80);
    015D2 E520      LDI	R18,0x50
    015D3 E302      LDI	R16,0x32
    015D4 940E 0D7F CALL	_begin_cursoroff
(0182)             AtoD();
    015D6 DF13      RCALL	_AtoD
(0183)             if(val_x<100) { mode=0; break;}
    015D7 9180 03CF LDS	R24,val_x
    015D9 9190 03D0 LDS	R25,val_x+1
    015DB 3684      CPI	R24,0x64
    015DC E0E0      LDI	R30,0
    015DD 079E      CPC	R25,R30
    015DE F424      BGE	0x15E3
    015DF 2422      CLR	R2
    015E0 9220 02E6 STS	mode,R2
    015E2 C04E      RJMP	0x1631
(0184)             if((PINF&0x08)==0x00) {select++; break;}
    015E3 9903      SBIC	0x00,3
    015E4 C006      RJMP	0x15EB
    015E5 9180 02E8 LDS	R24,select
    015E7 5F8F      SUBI	R24,0xFF
    015E8 9380 02E8 STS	select,R24
    015EA C046      RJMP	0x1631
(0185)             delay_ms(300);
    015EB E20C      LDI	R16,0x2C
    015EC E011      LDI	R17,1
    015ED 940E 04B0 CALL	_delay_ms
(0186)             GLCD_TextGoTo1(17,8);
    015EF E028      LDI	R18,0x8
    015F0 E101      LDI	R16,0x11
    015F1 D8DB      RCALL	_GLCD_TextGoTo1
(0187)             AtoD();
    015F2 DEF7      RCALL	_AtoD
(0188)             if(val_x<100) { mode=0; break;}
    015F3 9180 03CF LDS	R24,val_x
    015F5 9190 03D0 LDS	R25,val_x+1
    015F7 3684      CPI	R24,0x64
    015F8 E0E0      LDI	R30,0
    015F9 079E      CPC	R25,R30
    015FA F424      BGE	0x15FF
    015FB 2422      CLR	R2
    015FC 9220 02E6 STS	mode,R2
    015FE C032      RJMP	0x1631
(0189)             if((PINF&0x08)==0x00) {select++; break;}
    015FF 9903      SBIC	0x00,3
    01600 C006      RJMP	0x1607
    01601 9180 02E8 LDS	R24,select
    01603 5F8F      SUBI	R24,0xFF
    01604 9380 02E8 STS	select,R24
    01606 C02A      RJMP	0x1631
(0190)             delay_ms(300);
    01607 E20C      LDI	R16,0x2C
    01608 E011      LDI	R17,1
    01609 940E 04B0 CALL	_delay_ms
(0191)             GLCD_TextGoTo(17,8);
    0160B E028      LDI	R18,0x8
    0160C E101      LDI	R16,0x11
    0160D 940E 0405 CALL	_GLCD_TextGoTo
(0192)             GLCD_WriteString("MULTI MODE");
    0160F E809      LDI	R16,0x89
    01610 E013      LDI	R17,3
    01611 940E 03F6 CALL	_GLCD_WriteString
(0193)             AtoD();
    01613 DED6      RCALL	_AtoD
(0194)             if(val_x<100) { mode=0; break;}
    01614 9180 03CF LDS	R24,val_x
    01616 9190 03D0 LDS	R25,val_x+1
    01618 3684      CPI	R24,0x64
    01619 E0E0      LDI	R30,0
    0161A 079E      CPC	R25,R30
    0161B F424      BGE	0x1620
    0161C 2422      CLR	R2
    0161D 9220 02E6 STS	mode,R2
    0161F C011      RJMP	0x1631
(0195)             if((PINF&0x08)==0x00) {select++; break;}
    01620 9903      SBIC	0x00,3
    01621 C006      RJMP	0x1628
    01622 9180 02E8 LDS	R24,select
    01624 5F8F      SUBI	R24,0xFF
    01625 9380 02E8 STS	select,R24
    01627 C009      RJMP	0x1631
(0196)         }
    01628 9020 02E8 LDS	R2,select
    0162A 2022      TST	R2
    0162B F429      BNE	0x1631
    0162C 9180 02E6 LDS	R24,mode
    0162E 3081      CPI	R24,1
    0162F F409      BNE	0x1631
    01630 CF95      RJMP	0x15C6
(0197)     }
    01631 9020 02E8 LDS	R2,select
    01633 2022      TST	R2
    01634 F409      BNE	0x1636
    01635 CF86      RJMP	0x15BC
(0198)     if(mode==1) USART0_Transmit('a');
    01636 9180 02E6 LDS	R24,mode
    01638 3081      CPI	R24,1
    01639 F411      BNE	0x163C
    0163A E601      LDI	R16,0x61
    0163B DEAA      RCALL	_USART0_Transmit
    0163C 9508      RET
(0199) }
(0200) 
(0201) void difficulty_select(void)
(0202) {
(0203)      select=0;
_difficulty_select:
    0163D 2422      CLR	R2
    0163E 9220 02E8 STS	select,R2
(0204)      GLCD_TextGoTo(7,3);
    01640 E023      LDI	R18,3
    01641 E007      LDI	R16,7
    01642 940E 0405 CALL	_GLCD_TextGoTo
(0205)      GLCD_WriteString("CHOOSE DIFFICULY");
    01644 E708      LDI	R16,0x78
    01645 E013      LDI	R17,3
    01646 940E 03F6 CALL	_GLCD_WriteString
(0206)      GLCD_TextGoTo(2,8);
    01648 E028      LDI	R18,0x8
    01649 E002      LDI	R16,2
    0164A 940E 0405 CALL	_GLCD_TextGoTo
(0207)      GLCD_WriteString("EASY MODE");
    0164C E60E      LDI	R16,0x6E
    0164D E013      LDI	R17,3
    0164E 940E 03F6 CALL	_GLCD_WriteString
(0208)      GLCD_TextGoTo(17,8);
    01650 E028      LDI	R18,0x8
    01651 E101      LDI	R16,0x11
    01652 940E 0405 CALL	_GLCD_TextGoTo
(0209)      GLCD_WriteString("HARD MODE");
    01654 E604      LDI	R16,0x64
    01655 E013      LDI	R17,3
    01656 940E 03F6 CALL	_GLCD_WriteString
    01658 C0DB      RJMP	0x1734
(0210)     while(select==0)
(0211)     {
(0212)         while(select==0&&difficult==7){
(0213)             GLCD_TextGoTo(17,8);
    01659 E028      LDI	R18,0x8
    0165A E101      LDI	R16,0x11
    0165B 940E 0405 CALL	_GLCD_TextGoTo
(0214)             GLCD_WriteString("HARD MODE");
    0165D E604      LDI	R16,0x64
    0165E E013      LDI	R17,3
    0165F 940E 03F6 CALL	_GLCD_WriteString
(0215)             begin_cursoron(50,80);
    01661 E520      LDI	R18,0x50
    01662 E302      LDI	R16,0x32
    01663 940E 0C39 CALL	_begin_cursoron
(0216)             begin_cursoroff(170,80);
    01665 E520      LDI	R18,0x50
    01666 EA0A      LDI	R16,0xAA
    01667 940E 0D7F CALL	_begin_cursoroff
(0217)             AtoD();
    01669 DE80      RCALL	_AtoD
(0218)             if(val_x>900) { difficult=5; break;}
    0166A E884      LDI	R24,0x84
    0166B E093      LDI	R25,3
    0166C 9020 03CF LDS	R2,val_x
    0166E 9030 03D0 LDS	R3,val_x+1
    01670 1582      CP	R24,R2
    01671 0593      CPC	R25,R3
    01672 F424      BGE	0x1677
    01673 E085      LDI	R24,5
    01674 9380 02E7 STS	difficult,R24
    01676 C0B4      RJMP	0x172B
(0219)             if((PINF&0x08)==0x00) {select++; break;}
    01677 9903      SBIC	0x00,3
    01678 C006      RJMP	0x167F
    01679 9180 02E8 LDS	R24,select
    0167B 5F8F      SUBI	R24,0xFF
    0167C 9380 02E8 STS	select,R24
    0167E C0AC      RJMP	0x172B
(0220)             delay_ms(300);
    0167F E20C      LDI	R16,0x2C
    01680 E011      LDI	R17,1
    01681 940E 04B0 CALL	_delay_ms
(0221)             GLCD_TextGoTo1(2,8);
    01683 E028      LDI	R18,0x8
    01684 E002      LDI	R16,2
    01685 D847      RCALL	_GLCD_TextGoTo1
(0222)             AtoD();
    01686 DE63      RCALL	_AtoD
(0223)             if(val_x>900) { difficult=5; break;}
    01687 E884      LDI	R24,0x84
    01688 E093      LDI	R25,3
    01689 9020 03CF LDS	R2,val_x
    0168B 9030 03D0 LDS	R3,val_x+1
    0168D 1582      CP	R24,R2
    0168E 0593      CPC	R25,R3
    0168F F424      BGE	0x1694
    01690 E085      LDI	R24,5
    01691 9380 02E7 STS	difficult,R24
    01693 C097      RJMP	0x172B
(0224)             if((PINF&0x08)==0x00) {select++; break;}
    01694 9903      SBIC	0x00,3
    01695 C006      RJMP	0x169C
    01696 9180 02E8 LDS	R24,select
    01698 5F8F      SUBI	R24,0xFF
    01699 9380 02E8 STS	select,R24
    0169B C08F      RJMP	0x172B
(0225)             delay_ms(300);
    0169C E20C      LDI	R16,0x2C
    0169D E011      LDI	R17,1
    0169E 940E 04B0 CALL	_delay_ms
(0226)             GLCD_TextGoTo(2,8);
    016A0 E028      LDI	R18,0x8
    016A1 E002      LDI	R16,2
    016A2 940E 0405 CALL	_GLCD_TextGoTo
(0227)             GLCD_WriteString("EASY MODE");
    016A4 E60E      LDI	R16,0x6E
    016A5 E013      LDI	R17,3
    016A6 940E 03F6 CALL	_GLCD_WriteString
(0228)             AtoD();
    016A8 DE41      RCALL	_AtoD
(0229)             if(val_x>900) { difficult=5; break;}
    016A9 E884      LDI	R24,0x84
    016AA E093      LDI	R25,3
    016AB 9020 03CF LDS	R2,val_x
    016AD 9030 03D0 LDS	R3,val_x+1
    016AF 1582      CP	R24,R2
    016B0 0593      CPC	R25,R3
    016B1 F424      BGE	0x16B6
    016B2 E085      LDI	R24,5
    016B3 9380 02E7 STS	difficult,R24
    016B5 C075      RJMP	0x172B
(0230)             if((PINF&0x08)==0x00) {select++; break;}
    016B6 9903      SBIC	0x00,3
    016B7 C006      RJMP	0x16BE
    016B8 9180 02E8 LDS	R24,select
    016BA 5F8F      SUBI	R24,0xFF
    016BB 9380 02E8 STS	select,R24
    016BD C06D      RJMP	0x172B
(0231)         }
    016BE 9020 02E8 LDS	R2,select
    016C0 2022      TST	R2
    016C1 F429      BNE	0x16C7
    016C2 9180 02E7 LDS	R24,difficult
    016C4 3087      CPI	R24,7
    016C5 F409      BNE	0x16C7
    016C6 CF92      RJMP	0x1659
    016C7 C063      RJMP	0x172B
(0232)         while(select==0&&difficult==5){
(0233)             GLCD_TextGoTo(2,8);
    016C8 E028      LDI	R18,0x8
    016C9 E002      LDI	R16,2
    016CA 940E 0405 CALL	_GLCD_TextGoTo
(0234)             GLCD_WriteString("EASY MODE");
    016CC E60E      LDI	R16,0x6E
    016CD E013      LDI	R17,3
    016CE 940E 03F6 CALL	_GLCD_WriteString
(0235)             begin_cursoron(170,80);
    016D0 E520      LDI	R18,0x50
    016D1 EA0A      LDI	R16,0xAA
    016D2 940E 0C39 CALL	_begin_cursoron
(0236)             begin_cursoroff(50,80);
    016D4 E520      LDI	R18,0x50
    016D5 E302      LDI	R16,0x32
    016D6 940E 0D7F CALL	_begin_cursoroff
(0237)             AtoD();
    016D8 DE11      RCALL	_AtoD
(0238)             if(val_x<100) { difficult=7; break;}
    016D9 9180 03CF LDS	R24,val_x
    016DB 9190 03D0 LDS	R25,val_x+1
    016DD 3684      CPI	R24,0x64
    016DE E0E0      LDI	R30,0
    016DF 079E      CPC	R25,R30
    016E0 F424      BGE	0x16E5
    016E1 E087      LDI	R24,7
    016E2 9380 02E7 STS	difficult,R24
    016E4 C04F      RJMP	0x1734
(0239)             if((PINF&0x08)==0x00) {select++; break;}
    016E5 9903      SBIC	0x00,3
    016E6 C006      RJMP	0x16ED
    016E7 9180 02E8 LDS	R24,select
    016E9 5F8F      SUBI	R24,0xFF
    016EA 9380 02E8 STS	select,R24
    016EC C047      RJMP	0x1734
(0240)             delay_ms(300);
    016ED E20C      LDI	R16,0x2C
    016EE E011      LDI	R17,1
    016EF 940E 04B0 CALL	_delay_ms
(0241)             GLCD_TextGoTo1(17,8);
    016F1 E028      LDI	R18,0x8
    016F2 E101      LDI	R16,0x11
    016F3 940E 0ECD CALL	_GLCD_TextGoTo1
(0242)             AtoD();
    016F5 DDF4      RCALL	_AtoD
(0243)             if(val_x<100) { difficult=7; break;}
    016F6 9180 03CF LDS	R24,val_x
    016F8 9190 03D0 LDS	R25,val_x+1
    016FA 3684      CPI	R24,0x64
    016FB E0E0      LDI	R30,0
    016FC 079E      CPC	R25,R30
    016FD F424      BGE	0x1702
    016FE E087      LDI	R24,7
    016FF 9380 02E7 STS	difficult,R24
    01701 C032      RJMP	0x1734
(0244)             if((PINF&0x08)==0x00) {select++; break;}
    01702 9903      SBIC	0x00,3
    01703 C006      RJMP	0x170A
    01704 9180 02E8 LDS	R24,select
    01706 5F8F      SUBI	R24,0xFF
    01707 9380 02E8 STS	select,R24
    01709 C02A      RJMP	0x1734
(0245)             delay_ms(300);
    0170A E20C      LDI	R16,0x2C
    0170B E011      LDI	R17,1
    0170C 940E 04B0 CALL	_delay_ms
(0246)             GLCD_TextGoTo(17,8);
    0170E E028      LDI	R18,0x8
    0170F E101      LDI	R16,0x11
    01710 940E 0405 CALL	_GLCD_TextGoTo
(0247)             GLCD_WriteString("HARD MODE");
    01712 E604      LDI	R16,0x64
    01713 E013      LDI	R17,3
    01714 940E 03F6 CALL	_GLCD_WriteString
(0248)             AtoD();
    01716 DDD3      RCALL	_AtoD
(0249)             if(val_x<100) { difficult=7; break;}
    01717 9180 03CF LDS	R24,val_x
    01719 9190 03D0 LDS	R25,val_x+1
    0171B 3684      CPI	R24,0x64
    0171C E0E0      LDI	R30,0
    0171D 079E      CPC	R25,R30
    0171E F424      BGE	0x1723
    0171F E087      LDI	R24,7
    01720 9380 02E7 STS	difficult,R24
    01722 C011      RJMP	0x1734
(0250)             if((PINF&0x08)==0x00) {select++; break;}
    01723 9903      SBIC	0x00,3
    01724 C006      RJMP	0x172B
    01725 9180 02E8 LDS	R24,select
    01727 5F8F      SUBI	R24,0xFF
    01728 9380 02E8 STS	select,R24
    0172A C009      RJMP	0x1734
(0251)         }
    0172B 9020 02E8 LDS	R2,select
    0172D 2022      TST	R2
    0172E F429      BNE	0x1734
    0172F 9180 02E7 LDS	R24,difficult
    01731 3085      CPI	R24,5
    01732 F409      BNE	0x1734
    01733 CF94      RJMP	0x16C8
(0252)     }
    01734 9020 02E8 LDS	R2,select
    01736 2022      TST	R2
    01737 F409      BNE	0x1739
    01738 CF85      RJMP	0x16BE
    01739 9508      RET
(0253) }
(0254) 
(0255) 
(0256) void joystick_setting(void)
(0257) {
_joystick_setting:
    0173A C09D      RJMP	0x17D8
(0258)     while(1){
(0259)         AtoD();
    0173B DDAE      RCALL	_AtoD
(0260)         if(val_x>900)
    0173C E884      LDI	R24,0x84
    0173D E093      LDI	R25,3
    0173E 9020 03CF LDS	R2,val_x
    01740 9030 03D0 LDS	R3,val_x+1
    01742 1582      CP	R24,R2
    01743 0593      CPC	R25,R3
    01744 F504      BGE	0x1765
(0261)         {
(0262)             i++;
    01745 9180 0151 LDS	R24,i
    01747 9190 0152 LDS	R25,i+1
    01749 9601      ADIW	R24,1
    0174A 9390 0152 STS	i+1,R25
    0174C 9380 0151 STS	i,R24
(0263)             if(i+imax>7) i--;
    0174E 9020 0454 LDS	R2,imax
    01750 9030 0455 LDS	R3,imax+1
    01752 012C      MOVW	R4,R24
    01753 0C42      ADD	R4,R2
    01754 1C53      ADC	R5,R3
    01755 E087      LDI	R24,7
    01756 E090      LDI	R25,0
    01757 1584      CP	R24,R4
    01758 0595      CPC	R25,R5
    01759 F00C      BLT	0x175B
    0175A C07E      RJMP	0x17D9
    0175B 9180 0151 LDS	R24,i
    0175D 9190 0152 LDS	R25,i+1
    0175F 9701      SBIW	R24,1
    01760 9390 0152 STS	i+1,R25
    01762 9380 0151 STS	i,R24
(0264)             break;
    01764 C074      RJMP	0x17D9
(0265)         }
(0266)         else if(val_x<100)
    01765 9180 03CF LDS	R24,val_x
    01767 9190 03D0 LDS	R25,val_x+1
    01769 3684      CPI	R24,0x64
    0176A E0E0      LDI	R30,0
    0176B 079E      CPC	R25,R30
    0176C F4F4      BGE	0x178B
(0267)         {
(0268)             i--;
    0176D 9180 0151 LDS	R24,i
    0176F 9190 0152 LDS	R25,i+1
    01771 9701      SBIW	R24,1
    01772 9390 0152 STS	i+1,R25
    01774 9380 0151 STS	i,R24
(0269)             if(i+imin<0) i++;
    01776 9020 0452 LDS	R2,imin
    01778 9030 0453 LDS	R3,imin+1
    0177A 0D82      ADD	R24,R2
    0177B 1D93      ADC	R25,R3
    0177C 3080      CPI	R24,0
    0177D E0E0      LDI	R30,0
    0177E 079E      CPC	R25,R30
    0177F F00C      BLT	0x1781
    01780 C058      RJMP	0x17D9
    01781 9180 0151 LDS	R24,i
    01783 9190 0152 LDS	R25,i+1
    01785 9601      ADIW	R24,1
    01786 9390 0152 STS	i+1,R25
    01788 9380 0151 STS	i,R24
(0270)             break;
    0178A C04E      RJMP	0x17D9
(0271)         }
(0272)         else if(val_y>900)
    0178B E884      LDI	R24,0x84
    0178C E093      LDI	R25,3
    0178D 9020 03CD LDS	R2,val_y
    0178F 9030 03CE LDS	R3,val_y+1
    01791 1582      CP	R24,R2
    01792 0593      CPC	R25,R3
    01793 F4FC      BGE	0x17B3
(0273)         {
(0274)             j++;
    01794 9180 0153 LDS	R24,j
    01796 9190 0154 LDS	R25,j+1
    01798 9601      ADIW	R24,1
    01799 9390 0154 STS	j+1,R25
    0179B 9380 0153 STS	j,R24
(0275)             if(j+jmax>7) j--;
    0179D 9020 0450 LDS	R2,jmax
    0179F 9030 0451 LDS	R3,jmax+1
    017A1 012C      MOVW	R4,R24
    017A2 0C42      ADD	R4,R2
    017A3 1C53      ADC	R5,R3
    017A4 E087      LDI	R24,7
    017A5 E090      LDI	R25,0
    017A6 1584      CP	R24,R4
    017A7 0595      CPC	R25,R5
    017A8 F584      BGE	0x17D9
    017A9 9180 0153 LDS	R24,j
    017AB 9190 0154 LDS	R25,j+1
    017AD 9701      SBIW	R24,1
    017AE 9390 0154 STS	j+1,R25
    017B0 9380 0153 STS	j,R24
(0276)             break;
    017B2 C026      RJMP	0x17D9
(0277)         }
(0278)         else if(val_y<100)
    017B3 9180 03CD LDS	R24,val_y
    017B5 9190 03CE LDS	R25,val_y+1
    017B7 3684      CPI	R24,0x64
    017B8 E0E0      LDI	R30,0
    017B9 079E      CPC	R25,R30
    017BA F4EC      BGE	0x17D8
(0279)         {
(0280)             j--;
    017BB 9180 0153 LDS	R24,j
    017BD 9190 0154 LDS	R25,j+1
    017BF 9701      SBIW	R24,1
    017C0 9390 0154 STS	j+1,R25
    017C2 9380 0153 STS	j,R24
(0281)             if(j+jmin<0) j++;
    017C4 9020 044E LDS	R2,jmin
    017C6 9030 044F LDS	R3,jmin+1
    017C8 0D82      ADD	R24,R2
    017C9 1D93      ADC	R25,R3
    017CA 3080      CPI	R24,0
    017CB E0E0      LDI	R30,0
    017CC 079E      CPC	R25,R30
    017CD F45C      BGE	0x17D9
    017CE 9180 0153 LDS	R24,j
    017D0 9190 0154 LDS	R25,j+1
    017D2 9601      ADIW	R24,1
    017D3 9390 0154 STS	j+1,R25
    017D5 9380 0153 STS	j,R24
(0282)             break;
    017D7 C001      RJMP	0x17D9
(0283)         }
(0284)     }
    017D8 CF62      RJMP	0x173B
    017D9 9508      RET
_joystick_playing:
    017DA 934A      ST	-Y,R20
    017DB 935A      ST	-Y,R21
(0285) }
(0286) 
(0287) void joystick_playing(void)
(0288) {
(0289)     AtoD();
    017DC DD0D      RCALL	_AtoD
(0290)     if(val_x>900){
    017DD E884      LDI	R24,0x84
    017DE E093      LDI	R25,3
    017DF 9020 03CF LDS	R2,val_x
    017E1 9030 03D0 LDS	R3,val_x+1
    017E3 1582      CP	R24,R2
    017E4 0593      CPC	R25,R3
    017E5 F00C      BLT	0x17E7
    017E6 C0EE      RJMP	0x18D5
(0291)         GLCD_cursor_off(i,j);
    017E7 9120 0153 LDS	R18,j
    017E9 9130 0154 LDS	R19,j+1
    017EB 9100 0151 LDS	R16,i
    017ED 9110 0152 LDS	R17,i+1
    017EF DBAF      RCALL	_GLCD_cursor_off
(0292)         if(counter_detect[i][j]){
    017F0 9120 0151 LDS	R18,i
    017F2 9130 0152 LDS	R19,i+1
    017F4 E100      LDI	R16,0x10
    017F5 E010      LDI	R17,0
    017F6 940E 4674 CALL	empy16s
    017F8 ED85      LDI	R24,0xD5
    017F9 E091      LDI	R25,1
    017FA 0118      MOVW	R2,R16
    017FB 0E28      ADD	R2,R24
    017FC 1E39      ADC	R3,R25
    017FD 91E0 0153 LDS	R30,j
    017FF 91F0 0154 LDS	R31,j+1
    01801 0FEE      LSL	R30
    01802 1FFF      ROL	R31
    01803 0DE2      ADD	R30,R2
    01804 1DF3      ADC	R31,R3
    01805 8020      LD	R2,Z
    01806 8031      LDD	R3,Z+1
    01807 2022      TST	R2
    01808 F419      BNE	0x180C
    01809 2033      TST	R3
    0180A F409      BNE	0x180C
    0180B C0A4      RJMP	0x18B0
(0293)             if(counter_set[i][j]==0) lGLCD_fail(i,j);
    0180C 9120 0151 LDS	R18,i
    0180E 9130 0152 LDS	R19,i+1
    01810 E100      LDI	R16,0x10
    01811 E010      LDI	R17,0
    01812 940E 4674 CALL	empy16s
    01814 E585      LDI	R24,0x55
    01815 E091      LDI	R25,1
    01816 0118      MOVW	R2,R16
    01817 0E28      ADD	R2,R24
    01818 1E39      ADC	R3,R25
    01819 91E0 0153 LDS	R30,j
    0181B 91F0 0154 LDS	R31,j+1
    0181D 0FEE      LSL	R30
    0181E 1FFF      ROL	R31
    0181F 0DE2      ADD	R30,R2
    01820 1DF3      ADC	R31,R3
    01821 8020      LD	R2,Z
    01822 8031      LDD	R3,Z+1
    01823 2022      TST	R2
    01824 F461      BNE	0x1831
    01825 2033      TST	R3
    01826 F451      BNE	0x1831
    01827 9120 0153 LDS	R18,j
    01829 9130 0154 LDS	R19,j+1
    0182B 9100 0151 LDS	R16,i
    0182D 9110 0152 LDS	R17,i+1
    0182F DAE0      RCALL	_lGLCD_fail
    01830 C07F      RJMP	0x18B0
(0294)             else if(counter_set[i][j]==1||counter_set[i][j]==4) lGLCD_success(i,j);
    01831 9120 0151 LDS	R18,i
    01833 9130 0152 LDS	R19,i+1
    01835 E100      LDI	R16,0x10
    01836 E010      LDI	R17,0
    01837 940E 4674 CALL	empy16s
    01839 E585      LDI	R24,0x55
    0183A E091      LDI	R25,1
    0183B 0118      MOVW	R2,R16
    0183C 0E28      ADD	R2,R24
    0183D 1E39      ADC	R3,R25
    0183E 91E0 0153 LDS	R30,j
    01840 91F0 0154 LDS	R31,j+1
    01842 0FEE      LSL	R30
    01843 1FFF      ROL	R31
    01844 0DE2      ADD	R30,R2
    01845 1DF3      ADC	R31,R3
    01846 8020      LD	R2,Z
    01847 8031      LDD	R3,Z+1
    01848 01C1      MOVW	R24,R2
    01849 3081      CPI	R24,1
    0184A E0E0      LDI	R30,0
    0184B 079E      CPC	R25,R30
    0184C F021      BEQ	0x1851
    0184D 3084      CPI	R24,4
    0184E E0E0      LDI	R30,0
    0184F 079E      CPC	R25,R30
    01850 F459      BNE	0x185C
    01851 9120 0153 LDS	R18,j
    01853 9130 0154 LDS	R19,j+1
    01855 9100 0151 LDS	R16,i
    01857 9110 0152 LDS	R17,i+1
    01859 940E 0EE8 CALL	_lGLCD_success
    0185B C054      RJMP	0x18B0
(0295)             else if(counter_set[i][j]==2) lGLCD_item(i,j);
    0185C 9120 0151 LDS	R18,i
    0185E 9130 0152 LDS	R19,i+1
    01860 E100      LDI	R16,0x10
    01861 E010      LDI	R17,0
    01862 940E 4674 CALL	empy16s
    01864 E585      LDI	R24,0x55
    01865 E091      LDI	R25,1
    01866 0118      MOVW	R2,R16
    01867 0E28      ADD	R2,R24
    01868 1E39      ADC	R3,R25
    01869 91E0 0153 LDS	R30,j
    0186B 91F0 0154 LDS	R31,j+1
    0186D 0FEE      LSL	R30
    0186E 1FFF      ROL	R31
    0186F 0DE2      ADD	R30,R2
    01870 1DF3      ADC	R31,R3
    01871 8180      LD	R24,Z
    01872 8191      LDD	R25,Z+1
    01873 3082      CPI	R24,2
    01874 E0E0      LDI	R30,0
    01875 079E      CPC	R25,R30
    01876 F451      BNE	0x1881
    01877 9120 0153 LDS	R18,j
    01879 9130 0154 LDS	R19,j+1
    0187B 9100 0151 LDS	R16,i
    0187D 9110 0152 LDS	R17,i+1
    0187F D92A      RCALL	_lGLCD_item
    01880 C02F      RJMP	0x18B0
(0296)             else if(counter_set[i][j]==3) lGLCD_mine(i,j);
    01881 9120 0151 LDS	R18,i
    01883 9130 0152 LDS	R19,i+1
    01885 E100      LDI	R16,0x10
    01886 E010      LDI	R17,0
    01887 940E 4674 CALL	empy16s
    01889 E585      LDI	R24,0x55
    0188A E091      LDI	R25,1
    0188B 0118      MOVW	R2,R16
    0188C 0E28      ADD	R2,R24
    0188D 1E39      ADC	R3,R25
    0188E 91E0 0153 LDS	R30,j
    01890 91F0 0154 LDS	R31,j+1
    01892 0FEE      LSL	R30
    01893 1FFF      ROL	R31
    01894 0DE2      ADD	R30,R2
    01895 1DF3      ADC	R31,R3
    01896 8180      LD	R24,Z
    01897 8191      LDD	R25,Z+1
    01898 3083      CPI	R24,3
    01899 E0E0      LDI	R30,0
    0189A 079E      CPC	R25,R30
    0189B F459      BNE	0x18A7
    0189C 9120 0153 LDS	R18,j
    0189E 9130 0154 LDS	R19,j+1
    018A0 9100 0151 LDS	R16,i
    018A2 9110 0152 LDS	R17,i+1
    018A4 940E 1014 CALL	_lGLCD_mine
    018A6 C009      RJMP	0x18B0
(0297)             else lGLCD_rock(i,j);
    018A7 9120 0153 LDS	R18,j
    018A9 9130 0154 LDS	R19,j+1
    018AB 9100 0151 LDS	R16,i
    018AD 9110 0152 LDS	R17,i+1
    018AF D962      RCALL	_lGLCD_rock
(0298)         }
(0299)         i++;
    018B0 9180 0151 LDS	R24,i
    018B2 9190 0152 LDS	R25,i+1
    018B4 9601      ADIW	R24,1
    018B5 9390 0152 STS	i+1,R25
    018B7 9380 0151 STS	i,R24
(0300)         if(i>7) i=7;
    018B9 E087      LDI	R24,7
    018BA E090      LDI	R25,0
    018BB 9020 0151 LDS	R2,i
    018BD 9030 0152 LDS	R3,i+1
    018BF 1582      CP	R24,R2
    018C0 0593      CPC	R25,R3
    018C1 F424      BGE	0x18C6
    018C2 9390 0152 STS	i+1,R25
    018C4 9380 0151 STS	i,R24
(0301)         lGLCD_cursor(i,j);
    018C6 9120 0153 LDS	R18,j
    018C8 9130 0154 LDS	R19,j+1
    018CA 9100 0151 LDS	R16,i
    018CC 9110 0152 LDS	R17,i+1
    018CE 940E 0F13 CALL	_lGLCD_cursor
(0302)         delay_ms(200);
    018D0 EC08      LDI	R16,0xC8
    018D1 E010      LDI	R17,0
    018D2 940E 04B0 CALL	_delay_ms
(0303)     }
    018D4 C2E2      RJMP	0x1BB7
(0304)     else if(val_x<100){
    018D5 9180 03CF LDS	R24,val_x
    018D7 9190 03D0 LDS	R25,val_x+1
    018D9 3684      CPI	R24,0x64
    018DA E0E0      LDI	R30,0
    018DB 079E      CPC	R25,R30
    018DC F00C      BLT	0x18DE
    018DD C0EB      RJMP	0x19C9
(0305)         GLCD_cursor_off(i,j);
    018DE 9120 0153 LDS	R18,j
    018E0 9130 0154 LDS	R19,j+1
    018E2 9100 0151 LDS	R16,i
    018E4 9110 0152 LDS	R17,i+1
    018E6 DAB8      RCALL	_GLCD_cursor_off
(0306)         if(counter_detect[i][j]){
    018E7 9120 0151 LDS	R18,i
    018E9 9130 0152 LDS	R19,i+1
    018EB E100      LDI	R16,0x10
    018EC E010      LDI	R17,0
    018ED 940E 4674 CALL	empy16s
    018EF ED85      LDI	R24,0xD5
    018F0 E091      LDI	R25,1
    018F1 0118      MOVW	R2,R16
    018F2 0E28      ADD	R2,R24
    018F3 1E39      ADC	R3,R25
    018F4 91E0 0153 LDS	R30,j
    018F6 91F0 0154 LDS	R31,j+1
    018F8 0FEE      LSL	R30
    018F9 1FFF      ROL	R31
    018FA 0DE2      ADD	R30,R2
    018FB 1DF3      ADC	R31,R3
    018FC 8020      LD	R2,Z
    018FD 8031      LDD	R3,Z+1
    018FE 2022      TST	R2
    018FF F419      BNE	0x1903
    01900 2033      TST	R3
    01901 F409      BNE	0x1903
    01902 C0A4      RJMP	0x19A7
(0307)             if(counter_set[i][j]==0) lGLCD_fail(i,j);
    01903 9120 0151 LDS	R18,i
    01905 9130 0152 LDS	R19,i+1
    01907 E100      LDI	R16,0x10
    01908 E010      LDI	R17,0
    01909 940E 4674 CALL	empy16s
    0190B E585      LDI	R24,0x55
    0190C E091      LDI	R25,1
    0190D 0118      MOVW	R2,R16
    0190E 0E28      ADD	R2,R24
    0190F 1E39      ADC	R3,R25
    01910 91E0 0153 LDS	R30,j
    01912 91F0 0154 LDS	R31,j+1
    01914 0FEE      LSL	R30
    01915 1FFF      ROL	R31
    01916 0DE2      ADD	R30,R2
    01917 1DF3      ADC	R31,R3
    01918 8020      LD	R2,Z
    01919 8031      LDD	R3,Z+1
    0191A 2022      TST	R2
    0191B F461      BNE	0x1928
    0191C 2033      TST	R3
    0191D F451      BNE	0x1928
    0191E 9120 0153 LDS	R18,j
    01920 9130 0154 LDS	R19,j+1
    01922 9100 0151 LDS	R16,i
    01924 9110 0152 LDS	R17,i+1
    01926 D9E9      RCALL	_lGLCD_fail
    01927 C07F      RJMP	0x19A7
(0308)             else if(counter_set[i][j]==1||counter_set[i][j]==4) lGLCD_success(i,j);
    01928 9120 0151 LDS	R18,i
    0192A 9130 0152 LDS	R19,i+1
    0192C E100      LDI	R16,0x10
    0192D E010      LDI	R17,0
    0192E 940E 4674 CALL	empy16s
    01930 E585      LDI	R24,0x55
    01931 E091      LDI	R25,1
    01932 0118      MOVW	R2,R16
    01933 0E28      ADD	R2,R24
    01934 1E39      ADC	R3,R25
    01935 91E0 0153 LDS	R30,j
    01937 91F0 0154 LDS	R31,j+1
    01939 0FEE      LSL	R30
    0193A 1FFF      ROL	R31
    0193B 0DE2      ADD	R30,R2
    0193C 1DF3      ADC	R31,R3
    0193D 8020      LD	R2,Z
    0193E 8031      LDD	R3,Z+1
    0193F 01C1      MOVW	R24,R2
    01940 3081      CPI	R24,1
    01941 E0E0      LDI	R30,0
    01942 079E      CPC	R25,R30
    01943 F021      BEQ	0x1948
    01944 3084      CPI	R24,4
    01945 E0E0      LDI	R30,0
    01946 079E      CPC	R25,R30
    01947 F459      BNE	0x1953
    01948 9120 0153 LDS	R18,j
    0194A 9130 0154 LDS	R19,j+1
    0194C 9100 0151 LDS	R16,i
    0194E 9110 0152 LDS	R17,i+1
    01950 940E 0EE8 CALL	_lGLCD_success
    01952 C054      RJMP	0x19A7
(0309)             else if(counter_set[i][j]==2) lGLCD_item(i,j);
    01953 9120 0151 LDS	R18,i
    01955 9130 0152 LDS	R19,i+1
    01957 E100      LDI	R16,0x10
    01958 E010      LDI	R17,0
    01959 940E 4674 CALL	empy16s
    0195B E585      LDI	R24,0x55
    0195C E091      LDI	R25,1
    0195D 0118      MOVW	R2,R16
    0195E 0E28      ADD	R2,R24
    0195F 1E39      ADC	R3,R25
    01960 91E0 0153 LDS	R30,j
    01962 91F0 0154 LDS	R31,j+1
    01964 0FEE      LSL	R30
    01965 1FFF      ROL	R31
    01966 0DE2      ADD	R30,R2
    01967 1DF3      ADC	R31,R3
    01968 8180      LD	R24,Z
    01969 8191      LDD	R25,Z+1
    0196A 3082      CPI	R24,2
    0196B E0E0      LDI	R30,0
    0196C 079E      CPC	R25,R30
    0196D F451      BNE	0x1978
    0196E 9120 0153 LDS	R18,j
    01970 9130 0154 LDS	R19,j+1
    01972 9100 0151 LDS	R16,i
    01974 9110 0152 LDS	R17,i+1
    01976 D833      RCALL	_lGLCD_item
    01977 C02F      RJMP	0x19A7
(0310)             else if(counter_set[i][j]==3) lGLCD_mine(i,j);
    01978 9120 0151 LDS	R18,i
    0197A 9130 0152 LDS	R19,i+1
    0197C E100      LDI	R16,0x10
    0197D E010      LDI	R17,0
    0197E 940E 4674 CALL	empy16s
    01980 E585      LDI	R24,0x55
    01981 E091      LDI	R25,1
    01982 0118      MOVW	R2,R16
    01983 0E28      ADD	R2,R24
    01984 1E39      ADC	R3,R25
    01985 91E0 0153 LDS	R30,j
    01987 91F0 0154 LDS	R31,j+1
    01989 0FEE      LSL	R30
    0198A 1FFF      ROL	R31
    0198B 0DE2      ADD	R30,R2
    0198C 1DF3      ADC	R31,R3
    0198D 8180      LD	R24,Z
    0198E 8191      LDD	R25,Z+1
    0198F 3083      CPI	R24,3
    01990 E0E0      LDI	R30,0
    01991 079E      CPC	R25,R30
    01992 F459      BNE	0x199E
    01993 9120 0153 LDS	R18,j
    01995 9130 0154 LDS	R19,j+1
    01997 9100 0151 LDS	R16,i
    01999 9110 0152 LDS	R17,i+1
    0199B 940E 1014 CALL	_lGLCD_mine
    0199D C009      RJMP	0x19A7
(0311)             else lGLCD_rock(i,j);
    0199E 9120 0153 LDS	R18,j
    019A0 9130 0154 LDS	R19,j+1
    019A2 9100 0151 LDS	R16,i
    019A4 9110 0152 LDS	R17,i+1
    019A6 D86B      RCALL	_lGLCD_rock
(0312)         }
(0313)         i--;
    019A7 9180 0151 LDS	R24,i
    019A9 9190 0152 LDS	R25,i+1
    019AB 9701      SBIW	R24,1
    019AC 9390 0152 STS	i+1,R25
    019AE 9380 0151 STS	i,R24
(0314)         if(i<0) i=0;
    019B0 3080      CPI	R24,0
    019B1 E0E0      LDI	R30,0
    019B2 079E      CPC	R25,R30
    019B3 F434      BGE	0x19BA
    019B4 2422      CLR	R2
    019B5 2433      CLR	R3
    019B6 9230 0152 STS	i+1,R3
    019B8 9220 0151 STS	i,R2
(0315)         lGLCD_cursor(i,j);
    019BA 9120 0153 LDS	R18,j
    019BC 9130 0154 LDS	R19,j+1
    019BE 9100 0151 LDS	R16,i
    019C0 9110 0152 LDS	R17,i+1
    019C2 940E 0F13 CALL	_lGLCD_cursor
(0316)         delay_ms(200);
    019C4 EC08      LDI	R16,0xC8
    019C5 E010      LDI	R17,0
    019C6 940E 04B0 CALL	_delay_ms
(0317)     }
    019C8 C1EE      RJMP	0x1BB7
(0318)     else if(val_y>900){
    019C9 E884      LDI	R24,0x84
    019CA E093      LDI	R25,3
    019CB 9020 03CD LDS	R2,val_y
    019CD 9030 03CE LDS	R3,val_y+1
    019CF 1582      CP	R24,R2
    019D0 0593      CPC	R25,R3
    019D1 F00C      BLT	0x19D3
    019D2 C0EF      RJMP	0x1AC2
(0319)         GLCD_cursor_off(i,j);
    019D3 9120 0153 LDS	R18,j
    019D5 9130 0154 LDS	R19,j+1
    019D7 9100 0151 LDS	R16,i
    019D9 9110 0152 LDS	R17,i+1
    019DB D9C3      RCALL	_GLCD_cursor_off
(0320)         if(counter_detect[i][j]){
    019DC 9120 0151 LDS	R18,i
    019DE 9130 0152 LDS	R19,i+1
    019E0 E100      LDI	R16,0x10
    019E1 E010      LDI	R17,0
    019E2 940E 4674 CALL	empy16s
    019E4 ED85      LDI	R24,0xD5
    019E5 E091      LDI	R25,1
    019E6 0118      MOVW	R2,R16
    019E7 0E28      ADD	R2,R24
    019E8 1E39      ADC	R3,R25
    019E9 91E0 0153 LDS	R30,j
    019EB 91F0 0154 LDS	R31,j+1
    019ED 0FEE      LSL	R30
    019EE 1FFF      ROL	R31
    019EF 0DE2      ADD	R30,R2
    019F0 1DF3      ADC	R31,R3
    019F1 8020      LD	R2,Z
    019F2 8031      LDD	R3,Z+1
    019F3 2022      TST	R2
    019F4 F419      BNE	0x19F8
    019F5 2033      TST	R3
    019F6 F409      BNE	0x19F8
    019F7 C0A5      RJMP	0x1A9D
(0321)             if(counter_set[i][j]==0) lGLCD_fail(i,j);
    019F8 9120 0151 LDS	R18,i
    019FA 9130 0152 LDS	R19,i+1
    019FC E100      LDI	R16,0x10
    019FD E010      LDI	R17,0
    019FE 940E 4674 CALL	empy16s
    01A00 E585      LDI	R24,0x55
    01A01 E091      LDI	R25,1
    01A02 0118      MOVW	R2,R16
    01A03 0E28      ADD	R2,R24
    01A04 1E39      ADC	R3,R25
    01A05 91E0 0153 LDS	R30,j
    01A07 91F0 0154 LDS	R31,j+1
    01A09 0FEE      LSL	R30
    01A0A 1FFF      ROL	R31
    01A0B 0DE2      ADD	R30,R2
    01A0C 1DF3      ADC	R31,R3
    01A0D 8020      LD	R2,Z
    01A0E 8031      LDD	R3,Z+1
    01A0F 2022      TST	R2
    01A10 F461      BNE	0x1A1D
    01A11 2033      TST	R3
    01A12 F451      BNE	0x1A1D
    01A13 9120 0153 LDS	R18,j
    01A15 9130 0154 LDS	R19,j+1
    01A17 9100 0151 LDS	R16,i
    01A19 9110 0152 LDS	R17,i+1
    01A1B D8F4      RCALL	_lGLCD_fail
    01A1C C080      RJMP	0x1A9D
(0322)             else if(counter_set[i][j]==1||counter_set[i][j]==4) lGLCD_success(i,j);
    01A1D 9120 0151 LDS	R18,i
    01A1F 9130 0152 LDS	R19,i+1
    01A21 E100      LDI	R16,0x10
    01A22 E010      LDI	R17,0
    01A23 940E 4674 CALL	empy16s
    01A25 E585      LDI	R24,0x55
    01A26 E091      LDI	R25,1
    01A27 0118      MOVW	R2,R16
    01A28 0E28      ADD	R2,R24
    01A29 1E39      ADC	R3,R25
    01A2A 91E0 0153 LDS	R30,j
    01A2C 91F0 0154 LDS	R31,j+1
    01A2E 0FEE      LSL	R30
    01A2F 1FFF      ROL	R31
    01A30 0DE2      ADD	R30,R2
    01A31 1DF3      ADC	R31,R3
    01A32 8140      LD	R20,Z
    01A33 8151      LDD	R21,Z+1
    01A34 3041      CPI	R20,1
    01A35 E0E0      LDI	R30,0
    01A36 075E      CPC	R21,R30
    01A37 F021      BEQ	0x1A3C
    01A38 3044      CPI	R20,4
    01A39 E0E0      LDI	R30,0
    01A3A 075E      CPC	R21,R30
    01A3B F459      BNE	0x1A47
    01A3C 9120 0153 LDS	R18,j
    01A3E 9130 0154 LDS	R19,j+1
    01A40 9100 0151 LDS	R16,i
    01A42 9110 0152 LDS	R17,i+1
    01A44 940E 0EE8 CALL	_lGLCD_success
    01A46 C056      RJMP	0x1A9D
(0323)             else if(counter_set[i][j]==2) lGLCD_item(i,j);
    01A47 9120 0151 LDS	R18,i
    01A49 9130 0152 LDS	R19,i+1
    01A4B E100      LDI	R16,0x10
    01A4C E010      LDI	R17,0
    01A4D 940E 4674 CALL	empy16s
    01A4F E585      LDI	R24,0x55
    01A50 E091      LDI	R25,1
    01A51 0118      MOVW	R2,R16
    01A52 0E28      ADD	R2,R24
    01A53 1E39      ADC	R3,R25
    01A54 91E0 0153 LDS	R30,j
    01A56 91F0 0154 LDS	R31,j+1
    01A58 0FEE      LSL	R30
    01A59 1FFF      ROL	R31
    01A5A 0DE2      ADD	R30,R2
    01A5B 1DF3      ADC	R31,R3
    01A5C 8180      LD	R24,Z
    01A5D 8191      LDD	R25,Z+1
    01A5E 3082      CPI	R24,2
    01A5F E0E0      LDI	R30,0
    01A60 079E      CPC	R25,R30
    01A61 F459      BNE	0x1A6D
    01A62 9120 0153 LDS	R18,j
    01A64 9130 0154 LDS	R19,j+1
    01A66 9100 0151 LDS	R16,i
    01A68 9110 0152 LDS	R17,i+1
    01A6A 940E 11AA CALL	_lGLCD_item
    01A6C C030      RJMP	0x1A9D
(0324)             else if(counter_set[i][j]==3) lGLCD_mine(i,j);
    01A6D 9120 0151 LDS	R18,i
    01A6F 9130 0152 LDS	R19,i+1
    01A71 E100      LDI	R16,0x10
    01A72 E010      LDI	R17,0
    01A73 940E 4674 CALL	empy16s
    01A75 E585      LDI	R24,0x55
    01A76 E091      LDI	R25,1
    01A77 0118      MOVW	R2,R16
    01A78 0E28      ADD	R2,R24
    01A79 1E39      ADC	R3,R25
    01A7A 91E0 0153 LDS	R30,j
    01A7C 91F0 0154 LDS	R31,j+1
    01A7E 0FEE      LSL	R30
    01A7F 1FFF      ROL	R31
    01A80 0DE2      ADD	R30,R2
    01A81 1DF3      ADC	R31,R3
    01A82 8180      LD	R24,Z
    01A83 8191      LDD	R25,Z+1
    01A84 3083      CPI	R24,3
    01A85 E0E0      LDI	R30,0
    01A86 079E      CPC	R25,R30
    01A87 F459      BNE	0x1A93
    01A88 9120 0153 LDS	R18,j
    01A8A 9130 0154 LDS	R19,j+1
    01A8C 9100 0151 LDS	R16,i
    01A8E 9110 0152 LDS	R17,i+1
    01A90 940E 1014 CALL	_lGLCD_mine
    01A92 C00A      RJMP	0x1A9D
(0325)             else lGLCD_rock(i,j);
    01A93 9120 0153 LDS	R18,j
    01A95 9130 0154 LDS	R19,j+1
    01A97 9100 0151 LDS	R16,i
    01A99 9110 0152 LDS	R17,i+1
    01A9B 940E 1212 CALL	_lGLCD_rock
(0326)         }
(0327)         j++;
    01A9D 9180 0153 LDS	R24,j
    01A9F 9190 0154 LDS	R25,j+1
    01AA1 9601      ADIW	R24,1
    01AA2 9390 0154 STS	j+1,R25
    01AA4 9380 0153 STS	j,R24
(0328)         if(j>7) j=7;
    01AA6 E087      LDI	R24,7
    01AA7 E090      LDI	R25,0
    01AA8 9020 0153 LDS	R2,j
    01AAA 9030 0154 LDS	R3,j+1
    01AAC 1582      CP	R24,R2
    01AAD 0593      CPC	R25,R3
    01AAE F424      BGE	0x1AB3
    01AAF 9390 0154 STS	j+1,R25
    01AB1 9380 0153 STS	j,R24
(0329)         lGLCD_cursor(i,j);
    01AB3 9120 0153 LDS	R18,j
    01AB5 9130 0154 LDS	R19,j+1
    01AB7 9100 0151 LDS	R16,i
    01AB9 9110 0152 LDS	R17,i+1
    01ABB 940E 0F13 CALL	_lGLCD_cursor
(0330)         delay_ms(200);
    01ABD EC08      LDI	R16,0xC8
    01ABE E010      LDI	R17,0
    01ABF 940E 04B0 CALL	_delay_ms
(0331)     }
    01AC1 C0F5      RJMP	0x1BB7
(0332)     else if(val_y<100){
    01AC2 9180 03CD LDS	R24,val_y
    01AC4 9190 03CE LDS	R25,val_y+1
    01AC6 3684      CPI	R24,0x64
    01AC7 E0E0      LDI	R30,0
    01AC8 079E      CPC	R25,R30
    01AC9 F00C      BLT	0x1ACB
    01ACA C0EC      RJMP	0x1BB7
(0333)         GLCD_cursor_off(i,j);
    01ACB 9120 0153 LDS	R18,j
    01ACD 9130 0154 LDS	R19,j+1
    01ACF 9100 0151 LDS	R16,i
    01AD1 9110 0152 LDS	R17,i+1
    01AD3 D8CB      RCALL	_GLCD_cursor_off
(0334)         if(counter_detect[i][j]){
    01AD4 9120 0151 LDS	R18,i
    01AD6 9130 0152 LDS	R19,i+1
    01AD8 E100      LDI	R16,0x10
    01AD9 E010      LDI	R17,0
    01ADA 940E 4674 CALL	empy16s
    01ADC ED85      LDI	R24,0xD5
    01ADD E091      LDI	R25,1
    01ADE 0118      MOVW	R2,R16
    01ADF 0E28      ADD	R2,R24
    01AE0 1E39      ADC	R3,R25
    01AE1 91E0 0153 LDS	R30,j
    01AE3 91F0 0154 LDS	R31,j+1
    01AE5 0FEE      LSL	R30
    01AE6 1FFF      ROL	R31
    01AE7 0DE2      ADD	R30,R2
    01AE8 1DF3      ADC	R31,R3
    01AE9 8020      LD	R2,Z
    01AEA 8031      LDD	R3,Z+1
    01AEB 2022      TST	R2
    01AEC F419      BNE	0x1AF0
    01AED 2033      TST	R3
    01AEE F409      BNE	0x1AF0
    01AEF C0A6      RJMP	0x1B96
(0335)             if(counter_set[i][j]==0) lGLCD_fail(i,j);
    01AF0 9120 0151 LDS	R18,i
    01AF2 9130 0152 LDS	R19,i+1
    01AF4 E100      LDI	R16,0x10
    01AF5 E010      LDI	R17,0
    01AF6 940E 4674 CALL	empy16s
    01AF8 E585      LDI	R24,0x55
    01AF9 E091      LDI	R25,1
    01AFA 0118      MOVW	R2,R16
    01AFB 0E28      ADD	R2,R24
    01AFC 1E39      ADC	R3,R25
    01AFD 91E0 0153 LDS	R30,j
    01AFF 91F0 0154 LDS	R31,j+1
    01B01 0FEE      LSL	R30
    01B02 1FFF      ROL	R31
    01B03 0DE2      ADD	R30,R2
    01B04 1DF3      ADC	R31,R3
    01B05 8020      LD	R2,Z
    01B06 8031      LDD	R3,Z+1
    01B07 2022      TST	R2
    01B08 F469      BNE	0x1B16
    01B09 2033      TST	R3
    01B0A F459      BNE	0x1B16
    01B0B 9120 0153 LDS	R18,j
    01B0D 9130 0154 LDS	R19,j+1
    01B0F 9100 0151 LDS	R16,i
    01B11 9110 0152 LDS	R17,i+1
    01B13 940E 1310 CALL	_lGLCD_fail
    01B15 C080      RJMP	0x1B96
(0336)             else if(counter_set[i][j]==1||counter_set[i][j]==4) lGLCD_success(i,j);
    01B16 9120 0151 LDS	R18,i
    01B18 9130 0152 LDS	R19,i+1
    01B1A E100      LDI	R16,0x10
    01B1B E010      LDI	R17,0
    01B1C 940E 4674 CALL	empy16s
    01B1E E585      LDI	R24,0x55
    01B1F E091      LDI	R25,1
    01B20 0118      MOVW	R2,R16
    01B21 0E28      ADD	R2,R24
    01B22 1E39      ADC	R3,R25
    01B23 91E0 0153 LDS	R30,j
    01B25 91F0 0154 LDS	R31,j+1
    01B27 0FEE      LSL	R30
    01B28 1FFF      ROL	R31
    01B29 0DE2      ADD	R30,R2
    01B2A 1DF3      ADC	R31,R3
    01B2B 8140      LD	R20,Z
    01B2C 8151      LDD	R21,Z+1
    01B2D 3041      CPI	R20,1
    01B2E E0E0      LDI	R30,0
    01B2F 075E      CPC	R21,R30
    01B30 F021      BEQ	0x1B35
    01B31 3044      CPI	R20,4
    01B32 E0E0      LDI	R30,0
    01B33 075E      CPC	R21,R30
    01B34 F459      BNE	0x1B40
    01B35 9120 0153 LDS	R18,j
    01B37 9130 0154 LDS	R19,j+1
    01B39 9100 0151 LDS	R16,i
    01B3B 9110 0152 LDS	R17,i+1
    01B3D 940E 0EE8 CALL	_lGLCD_success
    01B3F C056      RJMP	0x1B96
(0337)             else if(counter_set[i][j]==2) lGLCD_item(i,j);
    01B40 9120 0151 LDS	R18,i
    01B42 9130 0152 LDS	R19,i+1
    01B44 E100      LDI	R16,0x10
    01B45 E010      LDI	R17,0
    01B46 940E 4674 CALL	empy16s
    01B48 E585      LDI	R24,0x55
    01B49 E091      LDI	R25,1
    01B4A 0118      MOVW	R2,R16
    01B4B 0E28      ADD	R2,R24
    01B4C 1E39      ADC	R3,R25
    01B4D 91E0 0153 LDS	R30,j
    01B4F 91F0 0154 LDS	R31,j+1
    01B51 0FEE      LSL	R30
    01B52 1FFF      ROL	R31
    01B53 0DE2      ADD	R30,R2
    01B54 1DF3      ADC	R31,R3
    01B55 8180      LD	R24,Z
    01B56 8191      LDD	R25,Z+1
    01B57 3082      CPI	R24,2
    01B58 E0E0      LDI	R30,0
    01B59 079E      CPC	R25,R30
    01B5A F459      BNE	0x1B66
    01B5B 9120 0153 LDS	R18,j
    01B5D 9130 0154 LDS	R19,j+1
    01B5F 9100 0151 LDS	R16,i
    01B61 9110 0152 LDS	R17,i+1
    01B63 940E 11AA CALL	_lGLCD_item
    01B65 C030      RJMP	0x1B96
(0338)             else if(counter_set[i][j]==3) lGLCD_mine(i,j);
    01B66 9120 0151 LDS	R18,i
    01B68 9130 0152 LDS	R19,i+1
    01B6A E100      LDI	R16,0x10
    01B6B E010      LDI	R17,0
    01B6C 940E 4674 CALL	empy16s
    01B6E E585      LDI	R24,0x55
    01B6F E091      LDI	R25,1
    01B70 0118      MOVW	R2,R16
    01B71 0E28      ADD	R2,R24
    01B72 1E39      ADC	R3,R25
    01B73 91E0 0153 LDS	R30,j
    01B75 91F0 0154 LDS	R31,j+1
    01B77 0FEE      LSL	R30
    01B78 1FFF      ROL	R31
    01B79 0DE2      ADD	R30,R2
    01B7A 1DF3      ADC	R31,R3
    01B7B 8180      LD	R24,Z
    01B7C 8191      LDD	R25,Z+1
    01B7D 3083      CPI	R24,3
    01B7E E0E0      LDI	R30,0
    01B7F 079E      CPC	R25,R30
    01B80 F459      BNE	0x1B8C
    01B81 9120 0153 LDS	R18,j
    01B83 9130 0154 LDS	R19,j+1
    01B85 9100 0151 LDS	R16,i
    01B87 9110 0152 LDS	R17,i+1
    01B89 940E 1014 CALL	_lGLCD_mine
    01B8B C00A      RJMP	0x1B96
(0339)             else lGLCD_rock(i,j);
    01B8C 9120 0153 LDS	R18,j
    01B8E 9130 0154 LDS	R19,j+1
    01B90 9100 0151 LDS	R16,i
    01B92 9110 0152 LDS	R17,i+1
    01B94 940E 1212 CALL	_lGLCD_rock
(0340)         }
(0341)         j--;
    01B96 9180 0153 LDS	R24,j
    01B98 9190 0154 LDS	R25,j+1
    01B9A 9701      SBIW	R24,1
    01B9B 9390 0154 STS	j+1,R25
    01B9D 9380 0153 STS	j,R24
(0342)         if(j<0) j=0;
    01B9F 3080      CPI	R24,0
    01BA0 E0E0      LDI	R30,0
    01BA1 079E      CPC	R25,R30
    01BA2 F434      BGE	0x1BA9
    01BA3 2422      CLR	R2
    01BA4 2433      CLR	R3
    01BA5 9230 0154 STS	j+1,R3
    01BA7 9220 0153 STS	j,R2
(0343)         lGLCD_cursor(i,j);
    01BA9 9120 0153 LDS	R18,j
    01BAB 9130 0154 LDS	R19,j+1
    01BAD 9100 0151 LDS	R16,i
    01BAF 9110 0152 LDS	R17,i+1
    01BB1 940E 0F13 CALL	_lGLCD_cursor
(0344)         delay_ms(200);
    01BB3 EC08      LDI	R16,0xC8
    01BB4 E010      LDI	R17,0
    01BB5 940E 04B0 CALL	_delay_ms
(0345)     }
    01BB7 9159      LD	R21,Y+
    01BB8 9149      LD	R20,Y+
    01BB9 9508      RET
_timeover_select:
    01BBA 940E 46F5 CALL	push_xgset303C
(0346) }
(0347) void timeover_select(void)
(0348) {
(0349)     rand_i=rand()%8;
    01BBC 940E 0823 CALL	_rand
    01BBE E028      LDI	R18,0x8
    01BBF E030      LDI	R19,0
    01BC0 940E 45B8 CALL	mod16s
    01BC2 9310 03CC STS	rand_i+1,R17
    01BC4 9300 03CB STS	rand_i,R16
(0350)     rand_j=rand()%8;
    01BC6 940E 0823 CALL	_rand
    01BC8 E028      LDI	R18,0x8
    01BC9 E030      LDI	R19,0
    01BCA 940E 45B8 CALL	mod16s
    01BCC 9310 03CA STS	rand_j+1,R17
    01BCE 9300 03C9 STS	rand_j,R16
(0351)     if(!counter_set[rand_i][rand_j]){ //blank
    01BD0 9120 03CB LDS	R18,rand_i
    01BD2 9130 03CC LDS	R19,rand_i+1
    01BD4 E100      LDI	R16,0x10
    01BD5 E010      LDI	R17,0
    01BD6 940E 4674 CALL	empy16s
    01BD8 E585      LDI	R24,0x55
    01BD9 E091      LDI	R25,1
    01BDA 0118      MOVW	R2,R16
    01BDB 0E28      ADD	R2,R24
    01BDC 1E39      ADC	R3,R25
    01BDD 91E0 03C9 LDS	R30,rand_j
    01BDF 91F0 03CA LDS	R31,rand_j+1
    01BE1 0FEE      LSL	R30
    01BE2 1FFF      ROL	R31
    01BE3 0DE2      ADD	R30,R2
    01BE4 1DF3      ADC	R31,R3
    01BE5 8020      LD	R2,Z
    01BE6 8031      LDD	R3,Z+1
    01BE7 2022      TST	R2
    01BE8 F529      BNE	0x1C0E
    01BE9 2033      TST	R3
    01BEA F519      BNE	0x1C0E
(0352)         flag--;
    01BEB 9180 02D5 LDS	R24,flag
    01BED 5081      SUBI	R24,1
    01BEE 9380 02D5 STS	flag,R24
(0353)         GLCD_cursor_off(i,j);
    01BF0 9120 0153 LDS	R18,j
    01BF2 9130 0154 LDS	R19,j+1
    01BF4 9100 0151 LDS	R16,i
    01BF6 9110 0152 LDS	R17,i+1
    01BF8 940E 139F CALL	_GLCD_cursor_off
(0354)         lGLCD_fail(rand_i,rand_j);
    01BFA 9120 03C9 LDS	R18,rand_j
    01BFC 9130 03CA LDS	R19,rand_j+1
    01BFE 9100 03CB LDS	R16,rand_i
    01C00 9110 03CC LDS	R17,rand_i+1
    01C02 940E 1310 CALL	_lGLCD_fail
(0355)         time_flag++;
    01C04 9180 02E5 LDS	R24,time_flag
    01C06 5F8F      SUBI	R24,0xFF
    01C07 9380 02E5 STS	time_flag,R24
(0356)         TIMSK=0X00;
    01C09 2422      CLR	R2
    01C0A BE27      OUT	0x37,R2
(0357)         timer_sec=16;
    01C0B E180      LDI	R24,0x10
    01C0C 9380 02E4 STS	timer_sec,R24
(0358)     }
(0359)     if(counter_set[rand_i][rand_j]>=1&&counter_set[rand_i][rand_j]<=4||counter_set[rand_i][rand_j]==7){//ship or rock
    01C0E 9120 03CB LDS	R18,rand_i
    01C10 9130 03CC LDS	R19,rand_i+1
    01C12 E100      LDI	R16,0x10
    01C13 E010      LDI	R17,0
    01C14 940E 4674 CALL	empy16s
    01C16 E585      LDI	R24,0x55
    01C17 E091      LDI	R25,1
    01C18 0118      MOVW	R2,R16
    01C19 0E28      ADD	R2,R24
    01C1A 1E39      ADC	R3,R25
    01C1B 91E0 03C9 LDS	R30,rand_j
    01C1D 91F0 03CA LDS	R31,rand_j+1
    01C1F 0FEE      LSL	R30
    01C20 1FFF      ROL	R31
    01C21 0DE2      ADD	R30,R2
    01C22 1DF3      ADC	R31,R3
    01C23 8140      LD	R20,Z
    01C24 8151      LDD	R21,Z+1
    01C25 3041      CPI	R20,1
    01C26 E0E0      LDI	R30,0
    01C27 075E      CPC	R21,R30
    01C28 F02C      BLT	0x1C2E
    01C29 E084      LDI	R24,4
    01C2A E090      LDI	R25,0
    01C2B 1784      CP	R24,R20
    01C2C 0795      CPC	R25,R21
    01C2D F4DC      BGE	0x1C49
    01C2E 9120 03CB LDS	R18,rand_i
    01C30 9130 03CC LDS	R19,rand_i+1
    01C32 E100      LDI	R16,0x10
    01C33 E010      LDI	R17,0
    01C34 940E 4674 CALL	empy16s
    01C36 E585      LDI	R24,0x55
    01C37 E091      LDI	R25,1
    01C38 0118      MOVW	R2,R16
    01C39 0E28      ADD	R2,R24
    01C3A 1E39      ADC	R3,R25
    01C3B 91E0 03C9 LDS	R30,rand_j
    01C3D 91F0 03CA LDS	R31,rand_j+1
    01C3F 0FEE      LSL	R30
    01C40 1FFF      ROL	R31
    01C41 0DE2      ADD	R30,R2
    01C42 1DF3      ADC	R31,R3
    01C43 8180      LD	R24,Z
    01C44 8191      LDD	R25,Z+1
    01C45 3087      CPI	R24,7
    01C46 E0E0      LDI	R30,0
    01C47 079E      CPC	R25,R30
    01C48 F4F1      BNE	0x1C67
(0360)         GLCD_cursor_off(i,j);
    01C49 9120 0153 LDS	R18,j
    01C4B 9130 0154 LDS	R19,j+1
    01C4D 9100 0151 LDS	R16,i
    01C4F 9110 0152 LDS	R17,i+1
    01C51 940E 139F CALL	_GLCD_cursor_off
(0361)         lGLCD_success(rand_i,rand_j);
    01C53 9120 03C9 LDS	R18,rand_j
    01C55 9130 03CA LDS	R19,rand_j+1
    01C57 9100 03CB LDS	R16,rand_i
    01C59 9110 03CC LDS	R17,rand_i+1
    01C5B 940E 0EE8 CALL	_lGLCD_success
(0362)         time_flag++;
    01C5D 9180 02E5 LDS	R24,time_flag
    01C5F 5F8F      SUBI	R24,0xFF
    01C60 9380 02E5 STS	time_flag,R24
(0363)         TIMSK=0X00;
    01C62 2422      CLR	R2
    01C63 BE27      OUT	0x37,R2
(0364)         timer_sec=16;
    01C64 E180      LDI	R24,0x10
    01C65 9380 02E4 STS	timer_sec,R24
(0365)     }
(0366)     if(counter_set[rand_i][rand_j]==5){ //item
    01C67 9120 03CB LDS	R18,rand_i
    01C69 9130 03CC LDS	R19,rand_i+1
    01C6B E100      LDI	R16,0x10
    01C6C E010      LDI	R17,0
    01C6D 940E 4674 CALL	empy16s
    01C6F E585      LDI	R24,0x55
    01C70 E091      LDI	R25,1
    01C71 0118      MOVW	R2,R16
    01C72 0E28      ADD	R2,R24
    01C73 1E39      ADC	R3,R25
    01C74 91E0 03C9 LDS	R30,rand_j
    01C76 91F0 03CA LDS	R31,rand_j+1
    01C78 0FEE      LSL	R30
    01C79 1FFF      ROL	R31
    01C7A 0DE2      ADD	R30,R2
    01C7B 1DF3      ADC	R31,R3
    01C7C 8180      LD	R24,Z
    01C7D 8191      LDD	R25,Z+1
    01C7E 3085      CPI	R24,5
    01C7F E0E0      LDI	R30,0
    01C80 079E      CPC	R25,R30
    01C81 F519      BNE	0x1CA5
(0367)         flag++;
    01C82 9180 02D5 LDS	R24,flag
    01C84 5F8F      SUBI	R24,0xFF
    01C85 9380 02D5 STS	flag,R24
(0368)         GLCD_cursor_off(i,j);
    01C87 9120 0153 LDS	R18,j
    01C89 9130 0154 LDS	R19,j+1
    01C8B 9100 0151 LDS	R16,i
    01C8D 9110 0152 LDS	R17,i+1
    01C8F 940E 139F CALL	_GLCD_cursor_off
(0369)         lGLCD_item(rand_i,rand_j);
    01C91 9120 03C9 LDS	R18,rand_j
    01C93 9130 03CA LDS	R19,rand_j+1
    01C95 9100 03CB LDS	R16,rand_i
    01C97 9110 03CC LDS	R17,rand_i+1
    01C99 940E 11AA CALL	_lGLCD_item
(0370)         time_flag++;
    01C9B 9180 02E5 LDS	R24,time_flag
    01C9D 5F8F      SUBI	R24,0xFF
    01C9E 9380 02E5 STS	time_flag,R24
(0371)         TIMSK=0X00;
    01CA0 2422      CLR	R2
    01CA1 BE27      OUT	0x37,R2
(0372)         timer_sec=16;
    01CA2 E180      LDI	R24,0x10
    01CA3 9380 02E4 STS	timer_sec,R24
(0373)     }
(0374)     if(counter_set[rand_i][rand_j]==6){ //mine
    01CA5 9120 03CB LDS	R18,rand_i
    01CA7 9130 03CC LDS	R19,rand_i+1
    01CA9 E100      LDI	R16,0x10
    01CAA E010      LDI	R17,0
    01CAB 940E 4674 CALL	empy16s
    01CAD E585      LDI	R24,0x55
    01CAE E091      LDI	R25,1
    01CAF 0118      MOVW	R2,R16
    01CB0 0E28      ADD	R2,R24
    01CB1 1E39      ADC	R3,R25
    01CB2 91E0 03C9 LDS	R30,rand_j
    01CB4 91F0 03CA LDS	R31,rand_j+1
    01CB6 0FEE      LSL	R30
    01CB7 1FFF      ROL	R31
    01CB8 0DE2      ADD	R30,R2
    01CB9 1DF3      ADC	R31,R3
    01CBA 8180      LD	R24,Z
    01CBB 8191      LDD	R25,Z+1
    01CBC 3086      CPI	R24,6
    01CBD E0E0      LDI	R30,0
    01CBE 079E      CPC	R25,R30
    01CBF F009      BEQ	0x1CC1
    01CC0 C0A7      RJMP	0x1D68
(0375)         flag--;
    01CC1 9180 02D5 LDS	R24,flag
    01CC3 5081      SUBI	R24,1
    01CC4 9380 02D5 STS	flag,R24
(0376)         GLCD_cursor_off(i,j);
    01CC6 9120 0153 LDS	R18,j
    01CC8 9130 0154 LDS	R19,j+1
    01CCA 9100 0151 LDS	R16,i
    01CCC 9110 0152 LDS	R17,i+1
    01CCE 940E 139F CALL	_GLCD_cursor_off
(0377)         lGLCD_mine(rand_i,rand_j);
    01CD0 9120 03C9 LDS	R18,rand_j
    01CD2 9130 03CA LDS	R19,rand_j+1
    01CD4 9100 03CB LDS	R16,rand_i
    01CD6 9110 03CC LDS	R17,rand_i+1
    01CD8 940E 1014 CALL	_lGLCD_mine
(0378)         rand_k=rand()%8;
    01CDA 940E 0823 CALL	_rand
    01CDC E028      LDI	R18,0x8
    01CDD E030      LDI	R19,0
    01CDE 940E 45B8 CALL	mod16s
    01CE0 9310 03C8 STS	rand_k+1,R17
    01CE2 9300 03C7 STS	rand_k,R16
(0379)         rand_l=rand()%8;
    01CE4 940E 0823 CALL	_rand
    01CE6 0158      MOVW	R10,R16
    01CE7 E028      LDI	R18,0x8
    01CE8 E030      LDI	R19,0
    01CE9 940E 45B8 CALL	mod16s
    01CEB 9310 03C6 STS	rand_l+1,R17
    01CED 9300 03C5 STS	rand_l,R16
    01CEF C015      RJMP	0x1D05
(0380)         while(counter_detect[rand_k][rand_l]||game_set[rand_k][rand_l]!=1) rand_k=rand()%8, rand_l=rand()%8;
    01CF0 940E 0823 CALL	_rand
    01CF2 E028      LDI	R18,0x8
    01CF3 E030      LDI	R19,0
    01CF4 940E 45B8 CALL	mod16s
    01CF6 9310 03C8 STS	rand_k+1,R17
    01CF8 9300 03C7 STS	rand_k,R16
    01CFA 940E 0823 CALL	_rand
    01CFC 0158      MOVW	R10,R16
    01CFD E028      LDI	R18,0x8
    01CFE E030      LDI	R19,0
    01CFF 940E 45B8 CALL	mod16s
    01D01 9310 03C6 STS	rand_l+1,R17
    01D03 9300 03C5 STS	rand_l,R16
    01D05 90A0 03C5 LDS	R10,rand_l
    01D07 90B0 03C6 LDS	R11,rand_l+1
    01D09 0CAA      LSL	R10
    01D0A 1CBB      ROL	R11
    01D0B 9120 03C7 LDS	R18,rand_k
    01D0D 9130 03C8 LDS	R19,rand_k+1
    01D0F E100      LDI	R16,0x10
    01D10 E010      LDI	R17,0
    01D11 940E 4674 CALL	empy16s
    01D13 0168      MOVW	R12,R16
    01D14 ED85      LDI	R24,0xD5
    01D15 E091      LDI	R25,1
    01D16 0116      MOVW	R2,R12
    01D17 0E28      ADD	R2,R24
    01D18 1E39      ADC	R3,R25
    01D19 01F5      MOVW	R30,R10
    01D1A 0DE2      ADD	R30,R2
    01D1B 1DF3      ADC	R31,R3
    01D1C 8020      LD	R2,Z
    01D1D 8031      LDD	R3,Z+1
    01D1E 2022      TST	R2
    01D1F F681      BNE	0x1CF0
    01D20 2033      TST	R3
    01D21 F671      BNE	0x1CF0
    01D22 E587      LDI	R24,0x57
    01D23 E094      LDI	R25,4
    01D24 0116      MOVW	R2,R12
    01D25 0E28      ADD	R2,R24
    01D26 1E39      ADC	R3,R25
    01D27 01F5      MOVW	R30,R10
    01D28 0DE2      ADD	R30,R2
    01D29 1DF3      ADC	R31,R3
    01D2A 8180      LD	R24,Z
    01D2B 8191      LDD	R25,Z+1
    01D2C 3081      CPI	R24,1
    01D2D E0E0      LDI	R30,0
    01D2E 079E      CPC	R25,R30
    01D2F F009      BEQ	0x1D31
    01D30 CFBF      RJMP	0x1CF0
(0381)         rGLCD_cursor_off(rand_k,rand_l);
    01D31 9120 03C5 LDS	R18,rand_l
    01D33 9130 03C6 LDS	R19,rand_l+1
    01D35 9100 03C7 LDS	R16,rand_k
    01D37 9110 03C8 LDS	R17,rand_k+1
    01D39 940E 0749 CALL	_rGLCD_cursor_off
(0382)         rGLCD_success(rand_k,rand_l), my_detect[rand_k][rand_l]=1;
    01D3B 9120 03C5 LDS	R18,rand_l
    01D3D 9130 03C6 LDS	R19,rand_l+1
    01D3F 9100 03C7 LDS	R16,rand_k
    01D41 9110 03C8 LDS	R17,rand_k+1
    01D43 940E 13D4 CALL	_rGLCD_success
    01D45 9120 03C7 LDS	R18,rand_k
    01D47 9130 03C8 LDS	R19,rand_k+1
    01D49 E100      LDI	R16,0x10
    01D4A E010      LDI	R17,0
    01D4B 940E 4674 CALL	empy16s
    01D4D E585      LDI	R24,0x55
    01D4E E092      LDI	R25,2
    01D4F 0118      MOVW	R2,R16
    01D50 0E28      ADD	R2,R24
    01D51 1E39      ADC	R3,R25
    01D52 91E0 03C5 LDS	R30,rand_l
    01D54 91F0 03C6 LDS	R31,rand_l+1
    01D56 0FEE      LSL	R30
    01D57 1FFF      ROL	R31
    01D58 0DE2      ADD	R30,R2
    01D59 1DF3      ADC	R31,R3
    01D5A E081      LDI	R24,1
    01D5B E090      LDI	R25,0
    01D5C 8391      STD	Z+1,R25
    01D5D 8380      ST	Z,R24
(0383)         time_flag++;
    01D5E 9180 02E5 LDS	R24,time_flag
    01D60 5F8F      SUBI	R24,0xFF
    01D61 9380 02E5 STS	time_flag,R24
(0384)         TIMSK=0X00;
    01D63 2422      CLR	R2
    01D64 BE27      OUT	0x37,R2
(0385)         timer_sec=16;
    01D65 E180      LDI	R24,0x10
    01D66 9380 02E4 STS	timer_sec,R24
(0386)     }
(0387)     if(counter_set[rand_i][rand_j]==8){
    01D68 9120 03CB LDS	R18,rand_i
    01D6A 9130 03CC LDS	R19,rand_i+1
    01D6C E100      LDI	R16,0x10
    01D6D E010      LDI	R17,0
    01D6E 940E 4674 CALL	empy16s
    01D70 E585      LDI	R24,0x55
    01D71 E091      LDI	R25,1
    01D72 0118      MOVW	R2,R16
    01D73 0E28      ADD	R2,R24
    01D74 1E39      ADC	R3,R25
    01D75 91E0 03C9 LDS	R30,rand_j
    01D77 91F0 03CA LDS	R31,rand_j+1
    01D79 0FEE      LSL	R30
    01D7A 1FFF      ROL	R31
    01D7B 0DE2      ADD	R30,R2
    01D7C 1DF3      ADC	R31,R3
    01D7D 8180      LD	R24,Z
    01D7E 8191      LDD	R25,Z+1
    01D7F 3088      CPI	R24,0x8
    01D80 E0E0      LDI	R30,0
    01D81 079E      CPC	R25,R30
    01D82 F529      BNE	0x1DA8
(0388)         GLCD_cursor_off(i,j);
    01D83 9120 0153 LDS	R18,j
    01D85 9130 0154 LDS	R19,j+1
    01D87 9100 0151 LDS	R16,i
    01D89 9110 0152 LDS	R17,i+1
    01D8B 940E 139F CALL	_GLCD_cursor_off
(0389)         lGLCD_rock(rand_i,rand_j);
    01D8D 9120 03C9 LDS	R18,rand_j
    01D8F 9130 03CA LDS	R19,rand_j+1
    01D91 9100 03CB LDS	R16,rand_i
    01D93 9110 03CC LDS	R17,rand_i+1
    01D95 940E 1212 CALL	_lGLCD_rock
(0390)         vibrating();
    01D97 940E 1533 CALL	_vibrating
(0391)         flag--;
    01D99 9180 02D5 LDS	R24,flag
    01D9B 5081      SUBI	R24,1
    01D9C 9380 02D5 STS	flag,R24
(0392)         time_flag++;
    01D9E 9180 02E5 LDS	R24,time_flag
    01DA0 5F8F      SUBI	R24,0xFF
    01DA1 9380 02E5 STS	time_flag,R24
(0393)         TIMSK=0X00;
    01DA3 2422      CLR	R2
    01DA4 BE27      OUT	0x37,R2
(0394)         timer_sec=16;
    01DA5 E180      LDI	R24,0x10
    01DA6 9380 02E4 STS	timer_sec,R24
(0395)     }
(0396)     counter_detect[rand_i][rand_j]=1;
    01DA8 9120 03CB LDS	R18,rand_i
    01DAA 9130 03CC LDS	R19,rand_i+1
    01DAC E100      LDI	R16,0x10
    01DAD E010      LDI	R17,0
    01DAE 940E 4674 CALL	empy16s
    01DB0 ED85      LDI	R24,0xD5
    01DB1 E091      LDI	R25,1
    01DB2 0118      MOVW	R2,R16
    01DB3 0E28      ADD	R2,R24
    01DB4 1E39      ADC	R3,R25
    01DB5 91E0 03C9 LDS	R30,rand_j
    01DB7 91F0 03CA LDS	R31,rand_j+1
    01DB9 0FEE      LSL	R30
    01DBA 1FFF      ROL	R31
    01DBB 0DE2      ADD	R30,R2
    01DBC 1DF3      ADC	R31,R3
    01DBD E081      LDI	R24,1
    01DBE E090      LDI	R25,0
    01DBF 8391      STD	Z+1,R25
    01DC0 8380      ST	Z,R24
(0397)     delay_ms(100);
    01DC1 E604      LDI	R16,0x64
    01DC2 E010      LDI	R17,0
    01DC3 940E 04B0 CALL	_delay_ms
    01DC5 940C 46FC JMP	pop_xgset303C
_switch_select:
    01DC7 940E 46CE CALL	push_xgset003C
(0398) 
(0399) }
(0400) void switch_select(void)
(0401) {
(0402)     is_found_rock();
    01DC9 D3F8      RCALL	_is_found_rock
(0403)     if(!counter_set[i][j]){ //blank
    01DCA 9120 0151 LDS	R18,i
    01DCC 9130 0152 LDS	R19,i+1
    01DCE E100      LDI	R16,0x10
    01DCF E010      LDI	R17,0
    01DD0 940E 4674 CALL	empy16s
    01DD2 E585      LDI	R24,0x55
    01DD3 E091      LDI	R25,1
    01DD4 0118      MOVW	R2,R16
    01DD5 0E28      ADD	R2,R24
    01DD6 1E39      ADC	R3,R25
    01DD7 91E0 0153 LDS	R30,j
    01DD9 91F0 0154 LDS	R31,j+1
    01DDB 0FEE      LSL	R30
    01DDC 1FFF      ROL	R31
    01DDD 0DE2      ADD	R30,R2
    01DDE 1DF3      ADC	R31,R3
    01DDF 8020      LD	R2,Z
    01DE0 8031      LDD	R3,Z+1
    01DE1 2022      TST	R2
    01DE2 F529      BNE	0x1E08
    01DE3 2033      TST	R3
    01DE4 F519      BNE	0x1E08
(0404)         flag--;
    01DE5 9180 02D5 LDS	R24,flag
    01DE7 5081      SUBI	R24,1
    01DE8 9380 02D5 STS	flag,R24
(0405)         GLCD_cursor_off(i,j);
    01DEA 9120 0153 LDS	R18,j
    01DEC 9130 0154 LDS	R19,j+1
    01DEE 9100 0151 LDS	R16,i
    01DF0 9110 0152 LDS	R17,i+1
    01DF2 940E 139F CALL	_GLCD_cursor_off
(0406)         lGLCD_fail(i,j);
    01DF4 9120 0153 LDS	R18,j
    01DF6 9130 0154 LDS	R19,j+1
    01DF8 9100 0151 LDS	R16,i
    01DFA 9110 0152 LDS	R17,i+1
    01DFC 940E 1310 CALL	_lGLCD_fail
(0407)                 time_flag++;
    01DFE 9180 02E5 LDS	R24,time_flag
    01E00 5F8F      SUBI	R24,0xFF
    01E01 9380 02E5 STS	time_flag,R24
(0408)         TIMSK=0X00;
    01E03 2422      CLR	R2
    01E04 BE27      OUT	0x37,R2
(0409)         timer_sec=16;
    01E05 E180      LDI	R24,0x10
    01E06 9380 02E4 STS	timer_sec,R24
(0410)     }
(0411)     if(counter_set[i][j]>=1&&counter_set[i][j]<=4||counter_set[i][j]==7){//ship or rock
    01E08 9120 0151 LDS	R18,i
    01E0A 9130 0152 LDS	R19,i+1
    01E0C E100      LDI	R16,0x10
    01E0D E010      LDI	R17,0
    01E0E 940E 4674 CALL	empy16s
    01E10 E585      LDI	R24,0x55
    01E11 E091      LDI	R25,1
    01E12 0118      MOVW	R2,R16
    01E13 0E28      ADD	R2,R24
    01E14 1E39      ADC	R3,R25
    01E15 91E0 0153 LDS	R30,j
    01E17 91F0 0154 LDS	R31,j+1
    01E19 0FEE      LSL	R30
    01E1A 1FFF      ROL	R31
    01E1B 0DE2      ADD	R30,R2
    01E1C 1DF3      ADC	R31,R3
    01E1D 8020      LD	R2,Z
    01E1E 8031      LDD	R3,Z+1
    01E1F 01C1      MOVW	R24,R2
    01E20 3081      CPI	R24,1
    01E21 E0E0      LDI	R30,0
    01E22 079E      CPC	R25,R30
    01E23 F02C      BLT	0x1E29
    01E24 E084      LDI	R24,4
    01E25 E090      LDI	R25,0
    01E26 1582      CP	R24,R2
    01E27 0593      CPC	R25,R3
    01E28 F4DC      BGE	0x1E44
    01E29 9120 0151 LDS	R18,i
    01E2B 9130 0152 LDS	R19,i+1
    01E2D E100      LDI	R16,0x10
    01E2E E010      LDI	R17,0
    01E2F 940E 4674 CALL	empy16s
    01E31 E585      LDI	R24,0x55
    01E32 E091      LDI	R25,1
    01E33 0118      MOVW	R2,R16
    01E34 0E28      ADD	R2,R24
    01E35 1E39      ADC	R3,R25
    01E36 91E0 0153 LDS	R30,j
    01E38 91F0 0154 LDS	R31,j+1
    01E3A 0FEE      LSL	R30
    01E3B 1FFF      ROL	R31
    01E3C 0DE2      ADD	R30,R2
    01E3D 1DF3      ADC	R31,R3
    01E3E 8180      LD	R24,Z
    01E3F 8191      LDD	R25,Z+1
    01E40 3087      CPI	R24,7
    01E41 E0E0      LDI	R30,0
    01E42 079E      CPC	R25,R30
    01E43 F4F1      BNE	0x1E62
(0412)         GLCD_cursor_off(i,j);
    01E44 9120 0153 LDS	R18,j
    01E46 9130 0154 LDS	R19,j+1
    01E48 9100 0151 LDS	R16,i
    01E4A 9110 0152 LDS	R17,i+1
    01E4C 940E 139F CALL	_GLCD_cursor_off
(0413)         lGLCD_success(i,j);
    01E4E 9120 0153 LDS	R18,j
    01E50 9130 0154 LDS	R19,j+1
    01E52 9100 0151 LDS	R16,i
    01E54 9110 0152 LDS	R17,i+1
    01E56 940E 0EE8 CALL	_lGLCD_success
(0414)                 time_flag++;
    01E58 9180 02E5 LDS	R24,time_flag
    01E5A 5F8F      SUBI	R24,0xFF
    01E5B 9380 02E5 STS	time_flag,R24
(0415)         TIMSK=0X00;
    01E5D 2422      CLR	R2
    01E5E BE27      OUT	0x37,R2
(0416)         timer_sec=16;
    01E5F E180      LDI	R24,0x10
    01E60 9380 02E4 STS	timer_sec,R24
(0417)     }
(0418)     if(counter_set[i][j]==5){ //item
    01E62 9120 0151 LDS	R18,i
    01E64 9130 0152 LDS	R19,i+1
    01E66 E100      LDI	R16,0x10
    01E67 E010      LDI	R17,0
    01E68 940E 4674 CALL	empy16s
    01E6A E585      LDI	R24,0x55
    01E6B E091      LDI	R25,1
    01E6C 0118      MOVW	R2,R16
    01E6D 0E28      ADD	R2,R24
    01E6E 1E39      ADC	R3,R25
    01E6F 91E0 0153 LDS	R30,j
    01E71 91F0 0154 LDS	R31,j+1
    01E73 0FEE      LSL	R30
    01E74 1FFF      ROL	R31
    01E75 0DE2      ADD	R30,R2
    01E76 1DF3      ADC	R31,R3
    01E77 8180      LD	R24,Z
    01E78 8191      LDD	R25,Z+1
    01E79 3085      CPI	R24,5
    01E7A E0E0      LDI	R30,0
    01E7B 079E      CPC	R25,R30
    01E7C F519      BNE	0x1EA0
(0419)         flag++;
    01E7D 9180 02D5 LDS	R24,flag
    01E7F 5F8F      SUBI	R24,0xFF
    01E80 9380 02D5 STS	flag,R24
(0420)         GLCD_cursor_off(i,j);
    01E82 9120 0153 LDS	R18,j
    01E84 9130 0154 LDS	R19,j+1
    01E86 9100 0151 LDS	R16,i
    01E88 9110 0152 LDS	R17,i+1
    01E8A 940E 139F CALL	_GLCD_cursor_off
(0421)         lGLCD_item(i,j);
    01E8C 9120 0153 LDS	R18,j
    01E8E 9130 0154 LDS	R19,j+1
    01E90 9100 0151 LDS	R16,i
    01E92 9110 0152 LDS	R17,i+1
    01E94 940E 11AA CALL	_lGLCD_item
(0422)         time_flag++;
    01E96 9180 02E5 LDS	R24,time_flag
    01E98 5F8F      SUBI	R24,0xFF
    01E99 9380 02E5 STS	time_flag,R24
(0423)         TIMSK=0X00;
    01E9B 2422      CLR	R2
    01E9C BE27      OUT	0x37,R2
(0424)         timer_sec=16;
    01E9D E180      LDI	R24,0x10
    01E9E 9380 02E4 STS	timer_sec,R24
(0425)     }
(0426)     if(counter_set[i][j]==6){ //mine
    01EA0 9120 0151 LDS	R18,i
    01EA2 9130 0152 LDS	R19,i+1
    01EA4 E100      LDI	R16,0x10
    01EA5 E010      LDI	R17,0
    01EA6 940E 4674 CALL	empy16s
    01EA8 E585      LDI	R24,0x55
    01EA9 E091      LDI	R25,1
    01EAA 0118      MOVW	R2,R16
    01EAB 0E28      ADD	R2,R24
    01EAC 1E39      ADC	R3,R25
    01EAD 91E0 0153 LDS	R30,j
    01EAF 91F0 0154 LDS	R31,j+1
    01EB1 0FEE      LSL	R30
    01EB2 1FFF      ROL	R31
    01EB3 0DE2      ADD	R30,R2
    01EB4 1DF3      ADC	R31,R3
    01EB5 8180      LD	R24,Z
    01EB6 8191      LDD	R25,Z+1
    01EB7 3086      CPI	R24,6
    01EB8 E0E0      LDI	R30,0
    01EB9 079E      CPC	R25,R30
    01EBA F009      BEQ	0x1EBC
    01EBB C0A7      RJMP	0x1F63
(0427)         flag--;
    01EBC 9180 02D5 LDS	R24,flag
    01EBE 5081      SUBI	R24,1
    01EBF 9380 02D5 STS	flag,R24
(0428)         GLCD_cursor_off(i,j);
    01EC1 9120 0153 LDS	R18,j
    01EC3 9130 0154 LDS	R19,j+1
    01EC5 9100 0151 LDS	R16,i
    01EC7 9110 0152 LDS	R17,i+1
    01EC9 940E 139F CALL	_GLCD_cursor_off
(0429)         lGLCD_mine(i,j);
    01ECB 9120 0153 LDS	R18,j
    01ECD 9130 0154 LDS	R19,j+1
    01ECF 9100 0151 LDS	R16,i
    01ED1 9110 0152 LDS	R17,i+1
    01ED3 940E 1014 CALL	_lGLCD_mine
(0430)         rand_i=rand()%8;
    01ED5 940E 0823 CALL	_rand
    01ED7 E028      LDI	R18,0x8
    01ED8 E030      LDI	R19,0
    01ED9 940E 45B8 CALL	mod16s
    01EDB 9310 03CC STS	rand_i+1,R17
    01EDD 9300 03CB STS	rand_i,R16
(0431)         rand_j=rand()%8;
    01EDF 940E 0823 CALL	_rand
    01EE1 0158      MOVW	R10,R16
    01EE2 E028      LDI	R18,0x8
    01EE3 E030      LDI	R19,0
    01EE4 940E 45B8 CALL	mod16s
    01EE6 9310 03CA STS	rand_j+1,R17
    01EE8 9300 03C9 STS	rand_j,R16
    01EEA C015      RJMP	0x1F00
(0432)         while(counter_detect[rand_i][rand_j]||game_set[rand_i][rand_j]!=1) rand_i=rand()%8, rand_j=rand()%8;
    01EEB 940E 0823 CALL	_rand
    01EED E028      LDI	R18,0x8
    01EEE E030      LDI	R19,0
    01EEF 940E 45B8 CALL	mod16s
    01EF1 9310 03CC STS	rand_i+1,R17
    01EF3 9300 03CB STS	rand_i,R16
    01EF5 940E 0823 CALL	_rand
    01EF7 0158      MOVW	R10,R16
    01EF8 E028      LDI	R18,0x8
    01EF9 E030      LDI	R19,0
    01EFA 940E 45B8 CALL	mod16s
    01EFC 9310 03CA STS	rand_j+1,R17
    01EFE 9300 03C9 STS	rand_j,R16
    01F00 90A0 03C9 LDS	R10,rand_j
    01F02 90B0 03CA LDS	R11,rand_j+1
    01F04 0CAA      LSL	R10
    01F05 1CBB      ROL	R11
    01F06 9120 03CB LDS	R18,rand_i
    01F08 9130 03CC LDS	R19,rand_i+1
    01F0A E100      LDI	R16,0x10
    01F0B E010      LDI	R17,0
    01F0C 940E 4674 CALL	empy16s
    01F0E 0168      MOVW	R12,R16
    01F0F ED85      LDI	R24,0xD5
    01F10 E091      LDI	R25,1
    01F11 0116      MOVW	R2,R12
    01F12 0E28      ADD	R2,R24
    01F13 1E39      ADC	R3,R25
    01F14 01F5      MOVW	R30,R10
    01F15 0DE2      ADD	R30,R2
    01F16 1DF3      ADC	R31,R3
    01F17 8020      LD	R2,Z
    01F18 8031      LDD	R3,Z+1
    01F19 2022      TST	R2
    01F1A F681      BNE	0x1EEB
    01F1B 2033      TST	R3
    01F1C F671      BNE	0x1EEB
    01F1D E587      LDI	R24,0x57
    01F1E E094      LDI	R25,4
    01F1F 0116      MOVW	R2,R12
    01F20 0E28      ADD	R2,R24
    01F21 1E39      ADC	R3,R25
    01F22 01F5      MOVW	R30,R10
    01F23 0DE2      ADD	R30,R2
    01F24 1DF3      ADC	R31,R3
    01F25 8180      LD	R24,Z
    01F26 8191      LDD	R25,Z+1
    01F27 3081      CPI	R24,1
    01F28 E0E0      LDI	R30,0
    01F29 079E      CPC	R25,R30
    01F2A F009      BEQ	0x1F2C
    01F2B CFBF      RJMP	0x1EEB
(0433)         rGLCD_cursor_off(rand_i,rand_j);
    01F2C 9120 03C9 LDS	R18,rand_j
    01F2E 9130 03CA LDS	R19,rand_j+1
    01F30 9100 03CB LDS	R16,rand_i
    01F32 9110 03CC LDS	R17,rand_i+1
    01F34 940E 0749 CALL	_rGLCD_cursor_off
(0434)         rGLCD_success(rand_i,rand_j), my_detect[rand_i][rand_j]=1;
    01F36 9120 03C9 LDS	R18,rand_j
    01F38 9130 03CA LDS	R19,rand_j+1
    01F3A 9100 03CB LDS	R16,rand_i
    01F3C 9110 03CC LDS	R17,rand_i+1
    01F3E 940E 13D4 CALL	_rGLCD_success
    01F40 9120 03CB LDS	R18,rand_i
    01F42 9130 03CC LDS	R19,rand_i+1
    01F44 E100      LDI	R16,0x10
    01F45 E010      LDI	R17,0
    01F46 940E 4674 CALL	empy16s
    01F48 E585      LDI	R24,0x55
    01F49 E092      LDI	R25,2
    01F4A 0118      MOVW	R2,R16
    01F4B 0E28      ADD	R2,R24
    01F4C 1E39      ADC	R3,R25
    01F4D 91E0 03C9 LDS	R30,rand_j
    01F4F 91F0 03CA LDS	R31,rand_j+1
    01F51 0FEE      LSL	R30
    01F52 1FFF      ROL	R31
    01F53 0DE2      ADD	R30,R2
    01F54 1DF3      ADC	R31,R3
    01F55 E081      LDI	R24,1
    01F56 E090      LDI	R25,0
    01F57 8391      STD	Z+1,R25
    01F58 8380      ST	Z,R24
(0435)         time_flag++;
    01F59 9180 02E5 LDS	R24,time_flag
    01F5B 5F8F      SUBI	R24,0xFF
    01F5C 9380 02E5 STS	time_flag,R24
(0436)         TIMSK=0X00;
    01F5E 2422      CLR	R2
    01F5F BE27      OUT	0x37,R2
(0437)         timer_sec=16;
    01F60 E180      LDI	R24,0x10
    01F61 9380 02E4 STS	timer_sec,R24
(0438)     }
(0439)     if(counter_set[i][j]==8){
    01F63 9120 0151 LDS	R18,i
    01F65 9130 0152 LDS	R19,i+1
    01F67 E100      LDI	R16,0x10
    01F68 E010      LDI	R17,0
    01F69 940E 4674 CALL	empy16s
    01F6B E585      LDI	R24,0x55
    01F6C E091      LDI	R25,1
    01F6D 0118      MOVW	R2,R16
    01F6E 0E28      ADD	R2,R24
    01F6F 1E39      ADC	R3,R25
    01F70 91E0 0153 LDS	R30,j
    01F72 91F0 0154 LDS	R31,j+1
    01F74 0FEE      LSL	R30
    01F75 1FFF      ROL	R31
    01F76 0DE2      ADD	R30,R2
    01F77 1DF3      ADC	R31,R3
    01F78 8180      LD	R24,Z
    01F79 8191      LDD	R25,Z+1
    01F7A 3088      CPI	R24,0x8
    01F7B E0E0      LDI	R30,0
    01F7C 079E      CPC	R25,R30
    01F7D F529      BNE	0x1FA3
(0440)         GLCD_cursor_off(i,j);
    01F7E 9120 0153 LDS	R18,j
    01F80 9130 0154 LDS	R19,j+1
    01F82 9100 0151 LDS	R16,i
    01F84 9110 0152 LDS	R17,i+1
    01F86 940E 139F CALL	_GLCD_cursor_off
(0441)         lGLCD_rock(i,j);
    01F88 9120 0153 LDS	R18,j
    01F8A 9130 0154 LDS	R19,j+1
    01F8C 9100 0151 LDS	R16,i
    01F8E 9110 0152 LDS	R17,i+1
    01F90 940E 1212 CALL	_lGLCD_rock
(0442)         vibrating();
    01F92 940E 1533 CALL	_vibrating
(0443)         flag--;
    01F94 9180 02D5 LDS	R24,flag
    01F96 5081      SUBI	R24,1
    01F97 9380 02D5 STS	flag,R24
(0444)         time_flag++;
    01F99 9180 02E5 LDS	R24,time_flag
    01F9B 5F8F      SUBI	R24,0xFF
    01F9C 9380 02E5 STS	time_flag,R24
(0445)         TIMSK=0X00;
    01F9E 2422      CLR	R2
    01F9F BE27      OUT	0x37,R2
(0446)         timer_sec=16;
    01FA0 E180      LDI	R24,0x10
    01FA1 9380 02E4 STS	timer_sec,R24
(0447)     }
(0448)     if(counter_detect[crockx[0]][crocky[0]]&&counter_set[crockx[0]][crocky[0]]==8){
    01FA3 90A0 03D2 LDS	R10,crocky
    01FA5 90B0 03D3 LDS	R11,crocky+1
    01FA7 0CAA      LSL	R10
    01FA8 1CBB      ROL	R11
    01FA9 9120 03D6 LDS	R18,crockx
    01FAB 9130 03D7 LDS	R19,crockx+1
    01FAD E100      LDI	R16,0x10
    01FAE E010      LDI	R17,0
    01FAF 940E 4674 CALL	empy16s
    01FB1 0168      MOVW	R12,R16
    01FB2 ED85      LDI	R24,0xD5
    01FB3 E091      LDI	R25,1
    01FB4 0116      MOVW	R2,R12
    01FB5 0E28      ADD	R2,R24
    01FB6 1E39      ADC	R3,R25
    01FB7 01F5      MOVW	R30,R10
    01FB8 0DE2      ADD	R30,R2
    01FB9 1DF3      ADC	R31,R3
    01FBA 8020      LD	R2,Z
    01FBB 8031      LDD	R3,Z+1
    01FBC 2022      TST	R2
    01FBD F411      BNE	0x1FC0
    01FBE 2033      TST	R3
    01FBF F121      BEQ	0x1FE4
    01FC0 E585      LDI	R24,0x55
    01FC1 E091      LDI	R25,1
    01FC2 0116      MOVW	R2,R12
    01FC3 0E28      ADD	R2,R24
    01FC4 1E39      ADC	R3,R25
    01FC5 01F5      MOVW	R30,R10
    01FC6 0DE2      ADD	R30,R2
    01FC7 1DF3      ADC	R31,R3
    01FC8 8180      LD	R24,Z
    01FC9 8191      LDD	R25,Z+1
    01FCA 3088      CPI	R24,0x8
    01FCB E0E0      LDI	R30,0
    01FCC 079E      CPC	R25,R30
    01FCD F4B1      BNE	0x1FE4
(0449)         GLCD_cursor_off(crockx[0],crocky[0]);
    01FCE 9120 03D2 LDS	R18,crocky
    01FD0 9130 03D3 LDS	R19,crocky+1
    01FD2 9100 03D6 LDS	R16,crockx
    01FD4 9110 03D7 LDS	R17,crockx+1
    01FD6 940E 139F CALL	_GLCD_cursor_off
(0450)         lGLCD_rock(crockx[0],crocky[0]);
    01FD8 9120 03D2 LDS	R18,crocky
    01FDA 9130 03D3 LDS	R19,crocky+1
    01FDC 9100 03D6 LDS	R16,crockx
    01FDE 9110 03D7 LDS	R17,crockx+1
    01FE0 940E 1212 CALL	_lGLCD_rock
(0451)         vibrating();
    01FE2 940E 1533 CALL	_vibrating
(0452)     }
(0453)     if(counter_detect[crockx[1]][crocky[1]]&&counter_set[crockx[1]][crocky[1]]==8){
    01FE4 9120 03D8 LDS	R18,crockx+2
    01FE6 9130 03D9 LDS	R19,crockx+3
    01FE8 E100      LDI	R16,0x10
    01FE9 E010      LDI	R17,0
    01FEA 940E 4674 CALL	empy16s
    01FEC ED85      LDI	R24,0xD5
    01FED E091      LDI	R25,1
    01FEE 0118      MOVW	R2,R16
    01FEF 0E28      ADD	R2,R24
    01FF0 1E39      ADC	R3,R25
    01FF1 91E0 03D4 LDS	R30,crocky+2
    01FF3 91F0 03D5 LDS	R31,crocky+3
    01FF5 0FEE      LSL	R30
    01FF6 1FFF      ROL	R31
    01FF7 0DE2      ADD	R30,R2
    01FF8 1DF3      ADC	R31,R3
    01FF9 8020      LD	R2,Z
    01FFA 8031      LDD	R3,Z+1
    01FFB 2022      TST	R2
    01FFC F411      BNE	0x1FFF
    01FFD 2033      TST	R3
    01FFE F189      BEQ	0x2030
    01FFF 9120 03D8 LDS	R18,crockx+2
    02001 9130 03D9 LDS	R19,crockx+3
    02003 E100      LDI	R16,0x10
    02004 E010      LDI	R17,0
    02005 940E 4674 CALL	empy16s
    02007 E585      LDI	R24,0x55
    02008 E091      LDI	R25,1
    02009 0118      MOVW	R2,R16
    0200A 0E28      ADD	R2,R24
    0200B 1E39      ADC	R3,R25
    0200C 91E0 03D4 LDS	R30,crocky+2
    0200E 91F0 03D5 LDS	R31,crocky+3
    02010 0FEE      LSL	R30
    02011 1FFF      ROL	R31
    02012 0DE2      ADD	R30,R2
    02013 1DF3      ADC	R31,R3
    02014 8180      LD	R24,Z
    02015 8191      LDD	R25,Z+1
    02016 3088      CPI	R24,0x8
    02017 E0E0      LDI	R30,0
    02018 079E      CPC	R25,R30
    02019 F4B1      BNE	0x2030
(0454)         GLCD_cursor_off(crockx[1],crocky[1]);
    0201A 9120 03D4 LDS	R18,crocky+2
    0201C 9130 03D5 LDS	R19,crocky+3
    0201E 9100 03D8 LDS	R16,crockx+2
    02020 9110 03D9 LDS	R17,crockx+3
    02022 940E 139F CALL	_GLCD_cursor_off
(0455)         lGLCD_rock(crockx[1],crocky[1]);
    02024 9120 03D4 LDS	R18,crocky+2
    02026 9130 03D5 LDS	R19,crocky+3
    02028 9100 03D8 LDS	R16,crockx+2
    0202A 9110 03D9 LDS	R17,crockx+3
    0202C 940E 1212 CALL	_lGLCD_rock
(0456)         vibrating();
    0202E 940E 1533 CALL	_vibrating
(0457)     }
(0458)     counter_detect[i][j]=1;
    02030 9120 0151 LDS	R18,i
    02032 9130 0152 LDS	R19,i+1
    02034 E100      LDI	R16,0x10
    02035 E010      LDI	R17,0
    02036 940E 4674 CALL	empy16s
    02038 ED85      LDI	R24,0xD5
    02039 E091      LDI	R25,1
    0203A 0118      MOVW	R2,R16
    0203B 0E28      ADD	R2,R24
    0203C 1E39      ADC	R3,R25
    0203D 91E0 0153 LDS	R30,j
    0203F 91F0 0154 LDS	R31,j+1
    02041 0FEE      LSL	R30
    02042 1FFF      ROL	R31
    02043 0DE2      ADD	R30,R2
    02044 1DF3      ADC	R31,R3
    02045 E081      LDI	R24,1
    02046 E090      LDI	R25,0
    02047 8391      STD	Z+1,R25
    02048 8380      ST	Z,R24
(0459)     delay_ms(100);
    02049 E604      LDI	R16,0x64
    0204A E010      LDI	R17,0
    0204B 940E 04B0 CALL	_delay_ms
(0460)     USART0_Transmit('s');
    0204D E703      LDI	R16,0x73
    0204E 940E 14E6 CALL	_USART0_Transmit
(0461)     USART0_Transmit(i),USART0_Transmit(j);
    02050 9100 0151 LDS	R16,i
    02052 9110 0152 LDS	R17,i+1
    02054 940E 14E6 CALL	_USART0_Transmit
    02056 9100 0153 LDS	R16,j
    02058 9110 0154 LDS	R17,j+1
    0205A 940E 14E6 CALL	_USART0_Transmit
    0205C 940C 46B8 JMP	pop_xgset003C
_coordinate:
  r                    --> R12
  q                    --> R10
  p                    --> R22
  o                    --> Y,+6
  n                    --> Y,+4
  m                    --> Y,+2
  l                    --> Y,+0
  a                    --> R20
  b                    --> R14
    0205E 940E 46C8 CALL	push_xgsetF0FC
    02060 9728      SBIW	R28,0x8
(0462) }
(0463) 
(0464) void coordinate(void)
(0465) {
(0466)     int a,b;
(0467)     int l=0,m=0,n=0,o=0,p=0,q=0,r=0;
    02061 2400      CLR	R0
    02062 2411      CLR	R1
    02063 8219      STD	Y+1,R1
    02064 8208      ST	Y,R0
    02065 821B      STD	Y+3,R1
    02066 820A      STD	Y+2,R0
    02067 821D      STD	Y+5,R1
    02068 820C      STD	Y+4,R0
    02069 821F      STD	Y+7,R1
    0206A 820E      STD	Y+6,R0
    0206B 2766      CLR	R22
    0206C 2777      CLR	R23
    0206D 24AA      CLR	R10
    0206E 24BB      CLR	R11
    0206F 24CC      CLR	R12
    02070 24DD      CLR	R13
(0468) 
(0469)     for(a=0;a<8;a++)
    02071 2744      CLR	R20
    02072 2755      CLR	R21
(0470)         for(b=0;b<8;b++){
    02073 24EE      CLR	R14
    02074 24FF      CLR	R15
(0471)             if(counter_set[a][b]==1) cship1x[l]=a,cship1y[l]=b,l++;
    02075 E100      LDI	R16,0x10
    02076 E010      LDI	R17,0
    02077 019A      MOVW	R18,R20
    02078 940E 4674 CALL	empy16s
    0207A 0118      MOVW	R2,R16
    0207B E585      LDI	R24,0x55
    0207C E091      LDI	R25,1
    0207D 0E28      ADD	R2,R24
    0207E 1E39      ADC	R3,R25
    0207F 01F7      MOVW	R30,R14
    02080 0FEE      LSL	R30
    02081 1FFF      ROL	R31
    02082 0DE2      ADD	R30,R2
    02083 1DF3      ADC	R31,R3
    02084 8180      LD	R24,Z
    02085 8191      LDD	R25,Z+1
    02086 3081      CPI	R24,1
    02087 E0E0      LDI	R30,0
    02088 079E      CPC	R25,R30
    02089 F4D1      BNE	0x20A4
    0208A E18E      LDI	R24,0x1E
    0208B E094      LDI	R25,4
    0208C 81E8      LD	R30,Y
    0208D 81F9      LDD	R31,Y+1
    0208E 0FEE      LSL	R30
    0208F 1FFF      ROL	R31
    02090 0FE8      ADD	R30,R24
    02091 1FF9      ADC	R31,R25
    02092 8351      STD	Z+1,R21
    02093 8340      ST	Z,R20
    02094 E186      LDI	R24,0x16
    02095 E094      LDI	R25,4
    02096 81E8      LD	R30,Y
    02097 81F9      LDD	R31,Y+1
    02098 0FEE      LSL	R30
    02099 1FFF      ROL	R31
    0209A 0FE8      ADD	R30,R24
    0209B 1FF9      ADC	R31,R25
    0209C 82F1      STD	Z+1,R15
    0209D 82E0      ST	Z,R14
    0209E 8188      LD	R24,Y
    0209F 8199      LDD	R25,Y+1
    020A0 9601      ADIW	R24,1
    020A1 8399      STD	Y+1,R25
    020A2 8388      ST	Y,R24
    020A3 C10C      RJMP	0x21B0
(0472)             else if(counter_set[a][b]==2) cship2x[m]=a,cship2y[m]=b,m++;
    020A4 E100      LDI	R16,0x10
    020A5 E010      LDI	R17,0
    020A6 019A      MOVW	R18,R20
    020A7 940E 4674 CALL	empy16s
    020A9 0118      MOVW	R2,R16
    020AA E585      LDI	R24,0x55
    020AB E091      LDI	R25,1
    020AC 0E28      ADD	R2,R24
    020AD 1E39      ADC	R3,R25
    020AE 01F7      MOVW	R30,R14
    020AF 0FEE      LSL	R30
    020B0 1FFF      ROL	R31
    020B1 0DE2      ADD	R30,R2
    020B2 1DF3      ADC	R31,R3
    020B3 8180      LD	R24,Z
    020B4 8191      LDD	R25,Z+1
    020B5 3082      CPI	R24,2
    020B6 E0E0      LDI	R30,0
    020B7 079E      CPC	R25,R30
    020B8 F4D1      BNE	0x20D3
    020B9 E08C      LDI	R24,0xC
    020BA E094      LDI	R25,4
    020BB 81EA      LDD	R30,Y+2
    020BC 81FB      LDD	R31,Y+3
    020BD 0FEE      LSL	R30
    020BE 1FFF      ROL	R31
    020BF 0FE8      ADD	R30,R24
    020C0 1FF9      ADC	R31,R25
    020C1 8351      STD	Z+1,R21
    020C2 8340      ST	Z,R20
    020C3 E082      LDI	R24,2
    020C4 E094      LDI	R25,4
    020C5 81EA      LDD	R30,Y+2
    020C6 81FB      LDD	R31,Y+3
    020C7 0FEE      LSL	R30
    020C8 1FFF      ROL	R31
    020C9 0FE8      ADD	R30,R24
    020CA 1FF9      ADC	R31,R25
    020CB 82F1      STD	Z+1,R15
    020CC 82E0      ST	Z,R14
    020CD 818A      LDD	R24,Y+2
    020CE 819B      LDD	R25,Y+3
    020CF 9601      ADIW	R24,1
    020D0 839B      STD	Y+3,R25
    020D1 838A      STD	Y+2,R24
    020D2 C0DD      RJMP	0x21B0
(0473)             else if(counter_set[a][b]==3) cship3x[n]=a,cship3y[n]=b,n++;
    020D3 E100      LDI	R16,0x10
    020D4 E010      LDI	R17,0
    020D5 019A      MOVW	R18,R20
    020D6 940E 4674 CALL	empy16s
    020D8 0118      MOVW	R2,R16
    020D9 E585      LDI	R24,0x55
    020DA E091      LDI	R25,1
    020DB 0E28      ADD	R2,R24
    020DC 1E39      ADC	R3,R25
    020DD 01F7      MOVW	R30,R14
    020DE 0FEE      LSL	R30
    020DF 1FFF      ROL	R31
    020E0 0DE2      ADD	R30,R2
    020E1 1DF3      ADC	R31,R3
    020E2 8180      LD	R24,Z
    020E3 8191      LDD	R25,Z+1
    020E4 3083      CPI	R24,3
    020E5 E0E0      LDI	R30,0
    020E6 079E      CPC	R25,R30
    020E7 F4D1      BNE	0x2102
    020E8 EF8E      LDI	R24,0xFE
    020E9 E093      LDI	R25,3
    020EA 81EC      LDD	R30,Y+4
    020EB 81FD      LDD	R31,Y+5
    020EC 0FEE      LSL	R30
    020ED 1FFF      ROL	R31
    020EE 0FE8      ADD	R30,R24
    020EF 1FF9      ADC	R31,R25
    020F0 8351      STD	Z+1,R21
    020F1 8340      ST	Z,R20
    020F2 EF8A      LDI	R24,0xFA
    020F3 E093      LDI	R25,3
    020F4 81EC      LDD	R30,Y+4
    020F5 81FD      LDD	R31,Y+5
    020F6 0FEE      LSL	R30
    020F7 1FFF      ROL	R31
    020F8 0FE8      ADD	R30,R24
    020F9 1FF9      ADC	R31,R25
    020FA 82F1      STD	Z+1,R15
    020FB 82E0      ST	Z,R14
    020FC 818C      LDD	R24,Y+4
    020FD 819D      LDD	R25,Y+5
    020FE 9601      ADIW	R24,1
    020FF 839D      STD	Y+5,R25
    02100 838C      STD	Y+4,R24
    02101 C0AE      RJMP	0x21B0
(0474)             else if(counter_set[a][b]==4) cship4x[o]=a,cship4y[o]=b,o++;
    02102 E100      LDI	R16,0x10
    02103 E010      LDI	R17,0
    02104 019A      MOVW	R18,R20
    02105 940E 4674 CALL	empy16s
    02107 0118      MOVW	R2,R16
    02108 E585      LDI	R24,0x55
    02109 E091      LDI	R25,1
    0210A 0E28      ADD	R2,R24
    0210B 1E39      ADC	R3,R25
    0210C 01F7      MOVW	R30,R14
    0210D 0FEE      LSL	R30
    0210E 1FFF      ROL	R31
    0210F 0DE2      ADD	R30,R2
    02110 1DF3      ADC	R31,R3
    02111 8180      LD	R24,Z
    02112 8191      LDD	R25,Z+1
    02113 3084      CPI	R24,4
    02114 E0E0      LDI	R30,0
    02115 079E      CPC	R25,R30
    02116 F4D1      BNE	0x2131
    02117 EF82      LDI	R24,0xF2
    02118 E093      LDI	R25,3
    02119 81EE      LDD	R30,Y+6
    0211A 81FF      LDD	R31,Y+7
    0211B 0FEE      LSL	R30
    0211C 1FFF      ROL	R31
    0211D 0FE8      ADD	R30,R24
    0211E 1FF9      ADC	R31,R25
    0211F 8351      STD	Z+1,R21
    02120 8340      ST	Z,R20
    02121 EE8A      LDI	R24,0xEA
    02122 E093      LDI	R25,3
    02123 81EE      LDD	R30,Y+6
    02124 81FF      LDD	R31,Y+7
    02125 0FEE      LSL	R30
    02126 1FFF      ROL	R31
    02127 0FE8      ADD	R30,R24
    02128 1FF9      ADC	R31,R25
    02129 82F1      STD	Z+1,R15
    0212A 82E0      ST	Z,R14
    0212B 818E      LDD	R24,Y+6
    0212C 819F      LDD	R25,Y+7
    0212D 9601      ADIW	R24,1
    0212E 839F      STD	Y+7,R25
    0212F 838E      STD	Y+6,R24
    02130 C07F      RJMP	0x21B0
(0475)             else if(counter_set[a][b]==5) citemx[p]=a,citemy[p]=b,p++;
    02131 E100      LDI	R16,0x10
    02132 E010      LDI	R17,0
    02133 019A      MOVW	R18,R20
    02134 940E 4674 CALL	empy16s
    02136 0118      MOVW	R2,R16
    02137 E585      LDI	R24,0x55
    02138 E091      LDI	R25,1
    02139 0E28      ADD	R2,R24
    0213A 1E39      ADC	R3,R25
    0213B 01F7      MOVW	R30,R14
    0213C 0FEE      LSL	R30
    0213D 1FFF      ROL	R31
    0213E 0DE2      ADD	R30,R2
    0213F 1DF3      ADC	R31,R3
    02140 8180      LD	R24,Z
    02141 8191      LDD	R25,Z+1
    02142 3085      CPI	R24,5
    02143 E0E0      LDI	R30,0
    02144 079E      CPC	R25,R30
    02145 F4A9      BNE	0x215B
    02146 EE86      LDI	R24,0xE6
    02147 E093      LDI	R25,3
    02148 01FB      MOVW	R30,R22
    02149 0FEE      LSL	R30
    0214A 1FFF      ROL	R31
    0214B 0FE8      ADD	R30,R24
    0214C 1FF9      ADC	R31,R25
    0214D 8351      STD	Z+1,R21
    0214E 8340      ST	Z,R20
    0214F EE82      LDI	R24,0xE2
    02150 E093      LDI	R25,3
    02151 01FB      MOVW	R30,R22
    02152 0FEE      LSL	R30
    02153 1FFF      ROL	R31
    02154 0FE8      ADD	R30,R24
    02155 1FF9      ADC	R31,R25
    02156 82F1      STD	Z+1,R15
    02157 82E0      ST	Z,R14
    02158 5F6F      SUBI	R22,0xFF
    02159 4F7F      SBCI	R23,0xFF
    0215A C055      RJMP	0x21B0
(0476)             else if(counter_set[a][b]==6) cminex[q]=a,cminey[q]=b,q++;
    0215B E100      LDI	R16,0x10
    0215C E010      LDI	R17,0
    0215D 019A      MOVW	R18,R20
    0215E 940E 4674 CALL	empy16s
    02160 0118      MOVW	R2,R16
    02161 E585      LDI	R24,0x55
    02162 E091      LDI	R25,1
    02163 0E28      ADD	R2,R24
    02164 1E39      ADC	R3,R25
    02165 01F7      MOVW	R30,R14
    02166 0FEE      LSL	R30
    02167 1FFF      ROL	R31
    02168 0DE2      ADD	R30,R2
    02169 1DF3      ADC	R31,R3
    0216A 8180      LD	R24,Z
    0216B 8191      LDD	R25,Z+1
    0216C 3086      CPI	R24,6
    0216D E0E0      LDI	R30,0
    0216E 079E      CPC	R25,R30
    0216F F4B1      BNE	0x2186
    02170 ED8E      LDI	R24,0xDE
    02171 E093      LDI	R25,3
    02172 01F5      MOVW	R30,R10
    02173 0FEE      LSL	R30
    02174 1FFF      ROL	R31
    02175 0FE8      ADD	R30,R24
    02176 1FF9      ADC	R31,R25
    02177 8351      STD	Z+1,R21
    02178 8340      ST	Z,R20
    02179 ED8A      LDI	R24,0xDA
    0217A E093      LDI	R25,3
    0217B 01F5      MOVW	R30,R10
    0217C 0FEE      LSL	R30
    0217D 1FFF      ROL	R31
    0217E 0FE8      ADD	R30,R24
    0217F 1FF9      ADC	R31,R25
    02180 82F1      STD	Z+1,R15
    02181 82E0      ST	Z,R14
    02182 01C5      MOVW	R24,R10
    02183 9601      ADIW	R24,1
    02184 015C      MOVW	R10,R24
    02185 C02A      RJMP	0x21B0
(0477)             else if(counter_set[a][b]==7) crockx[r]=a,crocky[r]=b,r++;
    02186 E100      LDI	R16,0x10
    02187 E010      LDI	R17,0
    02188 019A      MOVW	R18,R20
    02189 940E 4674 CALL	empy16s
    0218B 0118      MOVW	R2,R16
    0218C E585      LDI	R24,0x55
    0218D E091      LDI	R25,1
    0218E 0E28      ADD	R2,R24
    0218F 1E39      ADC	R3,R25
    02190 01F7      MOVW	R30,R14
    02191 0FEE      LSL	R30
    02192 1FFF      ROL	R31
    02193 0DE2      ADD	R30,R2
    02194 1DF3      ADC	R31,R3
    02195 8180      LD	R24,Z
    02196 8191      LDD	R25,Z+1
    02197 3087      CPI	R24,7
    02198 E0E0      LDI	R30,0
    02199 079E      CPC	R25,R30
    0219A F4A9      BNE	0x21B0
    0219B ED86      LDI	R24,0xD6
    0219C E093      LDI	R25,3
    0219D 01F6      MOVW	R30,R12
    0219E 0FEE      LSL	R30
    0219F 1FFF      ROL	R31
    021A0 0FE8      ADD	R30,R24
    021A1 1FF9      ADC	R31,R25
    021A2 8351      STD	Z+1,R21
    021A3 8340      ST	Z,R20
    021A4 ED82      LDI	R24,0xD2
    021A5 E093      LDI	R25,3
    021A6 01F6      MOVW	R30,R12
    021A7 0FEE      LSL	R30
    021A8 1FFF      ROL	R31
    021A9 0FE8      ADD	R30,R24
    021AA 1FF9      ADC	R31,R25
    021AB 82F1      STD	Z+1,R15
    021AC 82E0      ST	Z,R14
    021AD 01C6      MOVW	R24,R12
    021AE 9601      ADIW	R24,1
    021AF 016C      MOVW	R12,R24
(0478)         }
    021B0 01C7      MOVW	R24,R14
    021B1 9601      ADIW	R24,1
    021B2 017C      MOVW	R14,R24
    021B3 3088      CPI	R24,0x8
    021B4 E0E0      LDI	R30,0
    021B5 079E      CPC	R25,R30
    021B6 F40C      BGE	0x21B8
    021B7 CEBD      RJMP	0x2075
    021B8 5F4F      SUBI	R20,0xFF
    021B9 4F5F      SBCI	R21,0xFF
    021BA 3048      CPI	R20,0x8
    021BB E0E0      LDI	R30,0
    021BC 075E      CPC	R21,R30
    021BD F40C      BGE	0x21BF
    021BE CEB4      RJMP	0x2073
    021BF 9628      ADIW	R28,0x8
    021C0 940C 46BD JMP	pop_xgsetF0FC
_is_found_rock:
    021C2 92AA      ST	-Y,R10
    021C3 92BA      ST	-Y,R11
(0479) }
(0480) 
(0481) void is_found_rock(void)
(0482) {
(0483)     if(counter_detect[crockx[0]-1][crocky[0]]&&counter_detect[crockx[0]+1][crocky[0]]&&
    021C4 9040 03D2 LDS	R4,crocky
    021C6 9050 03D3 LDS	R5,crocky+1
    021C8 0152      MOVW	R10,R4
    021C9 0CAA      LSL	R10
    021CA 1CBB      ROL	R11
    021CB 9120 03D6 LDS	R18,crockx
    021CD 9130 03D7 LDS	R19,crockx+1
    021CF E100      LDI	R16,0x10
    021D0 E010      LDI	R17,0
    021D1 940E 4674 CALL	empy16s
    021D3 0138      MOVW	R6,R16
    021D4 EC85      LDI	R24,0xC5
    021D5 E091      LDI	R25,1
    021D6 0113      MOVW	R2,R6
    021D7 0E28      ADD	R2,R24
    021D8 1E39      ADC	R3,R25
    021D9 01F5      MOVW	R30,R10
    021DA 0DE2      ADD	R30,R2
    021DB 1DF3      ADC	R31,R3
    021DC 8020      LD	R2,Z
    021DD 8031      LDD	R3,Z+1
    021DE 2022      TST	R2
    021DF F419      BNE	0x21E3
    021E0 2033      TST	R3
    021E1 F409      BNE	0x21E3
    021E2 C045      RJMP	0x2228
    021E3 EE85      LDI	R24,0xE5
    021E4 E091      LDI	R25,1
    021E5 0113      MOVW	R2,R6
    021E6 0E28      ADD	R2,R24
    021E7 1E39      ADC	R3,R25
    021E8 01F5      MOVW	R30,R10
    021E9 0DE2      ADD	R30,R2
    021EA 1DF3      ADC	R31,R3
    021EB 8020      LD	R2,Z
    021EC 8031      LDD	R3,Z+1
    021ED 2022      TST	R2
    021EE F419      BNE	0x21F2
    021EF 2033      TST	R3
    021F0 F409      BNE	0x21F2
    021F1 C036      RJMP	0x2228
    021F2 ED85      LDI	R24,0xD5
    021F3 E091      LDI	R25,1
    021F4 0153      MOVW	R10,R6
    021F5 0EA8      ADD	R10,R24
    021F6 1EB9      ADC	R11,R25
    021F7 01F2      MOVW	R30,R4
    021F8 9731      SBIW	R30,1
    021F9 0FEE      LSL	R30
    021FA 1FFF      ROL	R31
    021FB 0DEA      ADD	R30,R10
    021FC 1DFB      ADC	R31,R11
    021FD 8020      LD	R2,Z
    021FE 8031      LDD	R3,Z+1
    021FF 2022      TST	R2
    02200 F411      BNE	0x2203
    02201 2033      TST	R3
    02202 F129      BEQ	0x2228
    02203 01F2      MOVW	R30,R4
    02204 9631      ADIW	R30,1
    02205 0FEE      LSL	R30
    02206 1FFF      ROL	R31
    02207 0DEA      ADD	R30,R10
    02208 1DFB      ADC	R31,R11
    02209 8020      LD	R2,Z
    0220A 8031      LDD	R3,Z+1
    0220B 2022      TST	R2
    0220C F411      BNE	0x220F
    0220D 2033      TST	R3
    0220E F0C9      BEQ	0x2228
(0484)        counter_detect[crockx[0]][crocky[0]-1]&&counter_detect[crockx[0]][crocky[0]+1])
(0485)         counter_set[crockx[0]][crocky[0]]=8;
    0220F 9120 03D6 LDS	R18,crockx
    02211 9130 03D7 LDS	R19,crockx+1
    02213 E100      LDI	R16,0x10
    02214 E010      LDI	R17,0
    02215 940E 4674 CALL	empy16s
    02217 E585      LDI	R24,0x55
    02218 E091      LDI	R25,1
    02219 0118      MOVW	R2,R16
    0221A 0E28      ADD	R2,R24
    0221B 1E39      ADC	R3,R25
    0221C 91E0 03D2 LDS	R30,crocky
    0221E 91F0 03D3 LDS	R31,crocky+1
    02220 0FEE      LSL	R30
    02221 1FFF      ROL	R31
    02222 0DE2      ADD	R30,R2
    02223 1DF3      ADC	R31,R3
    02224 E088      LDI	R24,0x8
    02225 E090      LDI	R25,0
    02226 8391      STD	Z+1,R25
    02227 8380      ST	Z,R24
(0486)     if(counter_detect[crockx[1]-1][crocky[1]]&&counter_detect[crockx[1]+1][crocky[1]]&&
    02228 9120 03D8 LDS	R18,crockx+2
    0222A 9130 03D9 LDS	R19,crockx+3
    0222C E100      LDI	R16,0x10
    0222D E010      LDI	R17,0
    0222E 940E 4674 CALL	empy16s
    02230 EC85      LDI	R24,0xC5
    02231 E091      LDI	R25,1
    02232 0118      MOVW	R2,R16
    02233 0E28      ADD	R2,R24
    02234 1E39      ADC	R3,R25
    02235 91E0 03D4 LDS	R30,crocky+2
    02237 91F0 03D5 LDS	R31,crocky+3
    02239 0FEE      LSL	R30
    0223A 1FFF      ROL	R31
    0223B 0DE2      ADD	R30,R2
    0223C 1DF3      ADC	R31,R3
    0223D 8020      LD	R2,Z
    0223E 8031      LDD	R3,Z+1
    0223F 2022      TST	R2
    02240 F419      BNE	0x2244
    02241 2033      TST	R3
    02242 F409      BNE	0x2244
    02243 C06E      RJMP	0x22B2
    02244 9120 03D8 LDS	R18,crockx+2
    02246 9130 03D9 LDS	R19,crockx+3
    02248 E100      LDI	R16,0x10
    02249 E010      LDI	R17,0
    0224A 940E 4674 CALL	empy16s
    0224C EE85      LDI	R24,0xE5
    0224D E091      LDI	R25,1
    0224E 0118      MOVW	R2,R16
    0224F 0E28      ADD	R2,R24
    02250 1E39      ADC	R3,R25
    02251 91E0 03D4 LDS	R30,crocky+2
    02253 91F0 03D5 LDS	R31,crocky+3
    02255 0FEE      LSL	R30
    02256 1FFF      ROL	R31
    02257 0DE2      ADD	R30,R2
    02258 1DF3      ADC	R31,R3
    02259 8020      LD	R2,Z
    0225A 8031      LDD	R3,Z+1
    0225B 2022      TST	R2
    0225C F419      BNE	0x2260
    0225D 2033      TST	R3
    0225E F409      BNE	0x2260
    0225F C052      RJMP	0x22B2
    02260 9120 03D8 LDS	R18,crockx+2
    02262 9130 03D9 LDS	R19,crockx+3
    02264 E100      LDI	R16,0x10
    02265 E010      LDI	R17,0
    02266 940E 4674 CALL	empy16s
    02268 ED85      LDI	R24,0xD5
    02269 E091      LDI	R25,1
    0226A 0118      MOVW	R2,R16
    0226B 0E28      ADD	R2,R24
    0226C 1E39      ADC	R3,R25
    0226D 91E0 03D4 LDS	R30,crocky+2
    0226F 91F0 03D5 LDS	R31,crocky+3
    02271 9731      SBIW	R30,1
    02272 0FEE      LSL	R30
    02273 1FFF      ROL	R31
    02274 0DE2      ADD	R30,R2
    02275 1DF3      ADC	R31,R3
    02276 8020      LD	R2,Z
    02277 8031      LDD	R3,Z+1
    02278 2022      TST	R2
    02279 F419      BNE	0x227D
    0227A 2033      TST	R3
    0227B F409      BNE	0x227D
    0227C C035      RJMP	0x22B2
    0227D 9120 03D8 LDS	R18,crockx+2
    0227F 9130 03D9 LDS	R19,crockx+3
    02281 E100      LDI	R16,0x10
    02282 E010      LDI	R17,0
    02283 940E 4674 CALL	empy16s
    02285 ED85      LDI	R24,0xD5
    02286 E091      LDI	R25,1
    02287 0118      MOVW	R2,R16
    02288 0E28      ADD	R2,R24
    02289 1E39      ADC	R3,R25
    0228A 91E0 03D4 LDS	R30,crocky+2
    0228C 91F0 03D5 LDS	R31,crocky+3
    0228E 9631      ADIW	R30,1
    0228F 0FEE      LSL	R30
    02290 1FFF      ROL	R31
    02291 0DE2      ADD	R30,R2
    02292 1DF3      ADC	R31,R3
    02293 8020      LD	R2,Z
    02294 8031      LDD	R3,Z+1
    02295 2022      TST	R2
    02296 F411      BNE	0x2299
    02297 2033      TST	R3
    02298 F0C9      BEQ	0x22B2
(0487)        counter_detect[crockx[1]][crocky[1]-1]&&counter_detect[crockx[1]][crocky[1]+1])
(0488)         counter_set[crockx[1]][crocky[1]]=8;
    02299 9120 03D8 LDS	R18,crockx+2
    0229B 9130 03D9 LDS	R19,crockx+3
    0229D E100      LDI	R16,0x10
    0229E E010      LDI	R17,0
    0229F 940E 4674 CALL	empy16s
    022A1 E585      LDI	R24,0x55
    022A2 E091      LDI	R25,1
    022A3 0118      MOVW	R2,R16
    022A4 0E28      ADD	R2,R24
    022A5 1E39      ADC	R3,R25
    022A6 91E0 03D4 LDS	R30,crocky+2
    022A8 91F0 03D5 LDS	R31,crocky+3
    022AA 0FEE      LSL	R30
    022AB 1FFF      ROL	R31
    022AC 0DE2      ADD	R30,R2
    022AD 1DF3      ADC	R31,R3
    022AE E088      LDI	R24,0x8
    022AF E090      LDI	R25,0
    022B0 8391      STD	Z+1,R25
    022B1 8380      ST	Z,R24
    022B2 90B9      LD	R11,Y+
    022B3 90A9      LD	R10,Y+
    022B4 9508      RET
(0489) }
(0490) 
(0491) void led_score(void)
(0492) {
(0493)     if(ship_cnt==1) PORTE|=0x10;
_led_score:
    022B5 9180 02DF LDS	R24,ship_cnt
    022B7 3081      CPI	R24,1
    022B8 F411      BNE	0x22BB
    022B9 9A1C      SBI	0x03,4
    022BA C029      RJMP	0x22E4
(0494)     else if(ship_cnt==2) PORTE|=0x20;
    022BB 9180 02DF LDS	R24,ship_cnt
    022BD 3082      CPI	R24,2
    022BE F411      BNE	0x22C1
    022BF 9A1D      SBI	0x03,5
    022C0 C023      RJMP	0x22E4
(0495)     else if(ship_cnt==3) PORTE|=0x40;
    022C1 9180 02DF LDS	R24,ship_cnt
    022C3 3083      CPI	R24,3
    022C4 F411      BNE	0x22C7
    022C5 9A1E      SBI	0x03,6
    022C6 C01D      RJMP	0x22E4
(0496)     else if(ship_cnt==4) PORTE|=0x80;
    022C7 9180 02DF LDS	R24,ship_cnt
    022C9 3084      CPI	R24,4
    022CA F411      BNE	0x22CD
    022CB 9A1F      SBI	0x03,7
    022CC C017      RJMP	0x22E4
(0497)     else if(item_cnt==1) PORTE|=0x08;
    022CD 9180 02E0 LDS	R24,item_cnt
    022CF 3081      CPI	R24,1
    022D0 F411      BNE	0x22D3
    022D1 9A1B      SBI	0x03,3
    022D2 C011      RJMP	0x22E4
(0498)     else if(item_cnt==2) PORTE|=0x04;
    022D3 9180 02E0 LDS	R24,item_cnt
    022D5 3082      CPI	R24,2
    022D6 F411      BNE	0x22D9
    022D7 9A1A      SBI	0x03,2
    022D8 C00B      RJMP	0x22E4
(0499)     else if(mine_cnt==1) PORTE|=0x02;
    022D9 9180 02E1 LDS	R24,mine_cnt
    022DB 3081      CPI	R24,1
    022DC F411      BNE	0x22DF
    022DD 9A19      SBI	0x03,1
    022DE C005      RJMP	0x22E4
(0500)     else if(mine_cnt==2) PORTE|=0x01;
    022DF 9180 02E1 LDS	R24,mine_cnt
    022E1 3082      CPI	R24,2
    022E2 F409      BNE	0x22E4
    022E3 9A18      SBI	0x03,0
    022E4 9508      RET
(0501) }
(0502) 
(0503) void register_timer(void)
(0504) {
(0505)     TCCR2=0x05;
_register_timer:
    022E5 E085      LDI	R24,5
    022E6 BD85      OUT	0x25,R24
(0506)     TCNT2=131;
    022E7 E883      LDI	R24,0x83
    022E8 BD84      OUT	0x24,R24
(0507)     TIMSK=0X40;
    022E9 E480      LDI	R24,0x40
    022EA BF87      OUT	0x37,R24
(0508)     SREG=0x80;
    022EB E880      LDI	R24,0x80
    022EC BF8F      OUT	0x3F,R24
    022ED 9508      RET
_off_bounded:
  n                    --> R20
  ship                 --> R10
    022EE 940E 46D3 CALL	push_xgset300C
    022F0 0158      MOVW	R10,R16
(0509) }
(0510) 
(0511) void off_bounded(char *ship)
(0512) {
(0513)     int n;
(0514)     imax=0, imin=0, jmax=0, jmin=0;
    022F1 2422      CLR	R2
    022F2 2433      CLR	R3
    022F3 9230 0455 STS	imax+1,R3
    022F5 9220 0454 STS	imax,R2
    022F7 9230 0453 STS	imin+1,R3
    022F9 9220 0452 STS	imin,R2
    022FB 9230 0451 STS	jmax+1,R3
    022FD 9220 0450 STS	jmax,R2
    022FF 9230 044F STS	jmin+1,R3
    02301 9220 044E STS	jmin,R2
(0515)     if(ship=="rship1"){
    02303 EB87      LDI	R24,0xB7
    02304 E093      LDI	R25,3
    02305 16A8      CP	R10,R24
    02306 06B9      CPC	R11,R25
    02307 F009      BEQ	0x2309
    02308 C09E      RJMP	0x23A7
(0516)         for(n=0;n<4;n++)
    02309 2744      CLR	R20
    0230A 2755      CLR	R21
(0517)             rGLCD_cursor_off(i+i1[n],j+j1[n]);
    0230B 011A      MOVW	R2,R20
    0230C 0C22      LSL	R2
    0230D 1C33      ROL	R3
    0230E 0121      MOVW	R4,R2
    0230F E08B      LDI	R24,0xB
    02310 E091      LDI	R25,1
    02311 01F1      MOVW	R30,R2
    02312 0FE8      ADD	R30,R24
    02313 1FF9      ADC	R31,R25
    02314 8020      LD	R2,Z
    02315 8031      LDD	R3,Z+1
    02316 9120 0153 LDS	R18,j
    02318 9130 0154 LDS	R19,j+1
    0231A 0D22      ADD	R18,R2
    0231B 1D33      ADC	R19,R3
    0231C E081      LDI	R24,1
    0231D E091      LDI	R25,1
    0231E 01F2      MOVW	R30,R4
    0231F 0FE8      ADD	R30,R24
    02320 1FF9      ADC	R31,R25
    02321 8020      LD	R2,Z
    02322 8031      LDD	R3,Z+1
    02323 9100 0151 LDS	R16,i
    02325 9110 0152 LDS	R17,i+1
    02327 0D02      ADD	R16,R2
    02328 1D13      ADC	R17,R3
    02329 940E 0749 CALL	_rGLCD_cursor_off
    0232B 5F4F      SUBI	R20,0xFF
    0232C 4F5F      SBCI	R21,0xFF
    0232D 3044      CPI	R20,4
    0232E E0E0      LDI	R30,0
    0232F 075E      CPC	R21,R30
    02330 F2D4      BLT	0x230B
(0518)         for(n=0;n<4;n++) {
    02331 2744      CLR	R20
    02332 2755      CLR	R21
(0519)             if(imax<i1[n]) imax=i1[n];
    02333 E081      LDI	R24,1
    02334 E091      LDI	R25,1
    02335 01FA      MOVW	R30,R20
    02336 0FEE      LSL	R30
    02337 1FFF      ROL	R31
    02338 0FE8      ADD	R30,R24
    02339 1FF9      ADC	R31,R25
    0233A 8020      LD	R2,Z
    0233B 8031      LDD	R3,Z+1
    0233C 9040 0454 LDS	R4,imax
    0233E 9050 0455 LDS	R5,imax+1
    02340 1442      CP	R4,R2
    02341 0453      CPC	R5,R3
    02342 F45C      BGE	0x234E
    02343 01FA      MOVW	R30,R20
    02344 0FEE      LSL	R30
    02345 1FFF      ROL	R31
    02346 0FE8      ADD	R30,R24
    02347 1FF9      ADC	R31,R25
    02348 8020      LD	R2,Z
    02349 8031      LDD	R3,Z+1
    0234A 9230 0455 STS	imax+1,R3
    0234C 9220 0454 STS	imax,R2
(0520)             if(imin>i1[n]) imin=i1[n];
    0234E E081      LDI	R24,1
    0234F E091      LDI	R25,1
    02350 01FA      MOVW	R30,R20
    02351 0FEE      LSL	R30
    02352 1FFF      ROL	R31
    02353 0FE8      ADD	R30,R24
    02354 1FF9      ADC	R31,R25
    02355 8020      LD	R2,Z
    02356 8031      LDD	R3,Z+1
    02357 9040 0452 LDS	R4,imin
    02359 9050 0453 LDS	R5,imin+1
    0235B 1424      CP	R2,R4
    0235C 0435      CPC	R3,R5
    0235D F45C      BGE	0x2369
    0235E 01FA      MOVW	R30,R20
    0235F 0FEE      LSL	R30
    02360 1FFF      ROL	R31
    02361 0FE8      ADD	R30,R24
    02362 1FF9      ADC	R31,R25
    02363 8020      LD	R2,Z
    02364 8031      LDD	R3,Z+1
    02365 9230 0453 STS	imin+1,R3
    02367 9220 0452 STS	imin,R2
(0521)             if(jmax<j1[n]) jmax=j1[n];
    02369 E08B      LDI	R24,0xB
    0236A E091      LDI	R25,1
    0236B 01FA      MOVW	R30,R20
    0236C 0FEE      LSL	R30
    0236D 1FFF      ROL	R31
    0236E 0FE8      ADD	R30,R24
    0236F 1FF9      ADC	R31,R25
    02370 8020      LD	R2,Z
    02371 8031      LDD	R3,Z+1
    02372 9040 0450 LDS	R4,jmax
    02374 9050 0451 LDS	R5,jmax+1
    02376 1442      CP	R4,R2
    02377 0453      CPC	R5,R3
    02378 F45C      BGE	0x2384
    02379 01FA      MOVW	R30,R20
    0237A 0FEE      LSL	R30
    0237B 1FFF      ROL	R31
    0237C 0FE8      ADD	R30,R24
    0237D 1FF9      ADC	R31,R25
    0237E 8020      LD	R2,Z
    0237F 8031      LDD	R3,Z+1
    02380 9230 0451 STS	jmax+1,R3
    02382 9220 0450 STS	jmax,R2
(0522)             if(jmin>j1[n]) jmin=j1[n];
    02384 E08B      LDI	R24,0xB
    02385 E091      LDI	R25,1
    02386 01FA      MOVW	R30,R20
    02387 0FEE      LSL	R30
    02388 1FFF      ROL	R31
    02389 0FE8      ADD	R30,R24
    0238A 1FF9      ADC	R31,R25
    0238B 8020      LD	R2,Z
    0238C 8031      LDD	R3,Z+1
    0238D 9040 044E LDS	R4,jmin
    0238F 9050 044F LDS	R5,jmin+1
    02391 1424      CP	R2,R4
    02392 0435      CPC	R3,R5
    02393 F45C      BGE	0x239F
    02394 01FA      MOVW	R30,R20
    02395 0FEE      LSL	R30
    02396 1FFF      ROL	R31
    02397 0FE8      ADD	R30,R24
    02398 1FF9      ADC	R31,R25
    02399 8020      LD	R2,Z
    0239A 8031      LDD	R3,Z+1
    0239B 9230 044F STS	jmin+1,R3
    0239D 9220 044E STS	jmin,R2
(0523)         }
    0239F 5F4F      SUBI	R20,0xFF
    023A0 4F5F      SBCI	R21,0xFF
    023A1 3044      CPI	R20,4
    023A2 E0E0      LDI	R30,0
    023A3 075E      CPC	R21,R30
    023A4 F40C      BGE	0x23A6
    023A5 CF8D      RJMP	0x2333
(0524)     }
    023A6 C140      RJMP	0x24E7
(0525)     else if (ship=="rship2"){
    023A7 EB80      LDI	R24,0xB0
    023A8 E093      LDI	R25,3
    023A9 16A8      CP	R10,R24
    023AA 06B9      CPC	R11,R25
    023AB F009      BEQ	0x23AD
    023AC C09E      RJMP	0x244B
(0526)         for(n=0;n<5;n++)
    023AD 2744      CLR	R20
    023AE 2755      CLR	R21
(0527)             rGLCD_cursor_off(i+i2[n],j+j2[n]);
    023AF 011A      MOVW	R2,R20
    023B0 0C22      LSL	R2
    023B1 1C33      ROL	R3
    023B2 0121      MOVW	R4,R2
    023B3 E18F      LDI	R24,0x1F
    023B4 E091      LDI	R25,1
    023B5 01F1      MOVW	R30,R2
    023B6 0FE8      ADD	R30,R24
    023B7 1FF9      ADC	R31,R25
    023B8 8020      LD	R2,Z
    023B9 8031      LDD	R3,Z+1
    023BA 9120 0153 LDS	R18,j
    023BC 9130 0154 LDS	R19,j+1
    023BE 0D22      ADD	R18,R2
    023BF 1D33      ADC	R19,R3
    023C0 E185      LDI	R24,0x15
    023C1 E091      LDI	R25,1
    023C2 01F2      MOVW	R30,R4
    023C3 0FE8      ADD	R30,R24
    023C4 1FF9      ADC	R31,R25
    023C5 8020      LD	R2,Z
    023C6 8031      LDD	R3,Z+1
    023C7 9100 0151 LDS	R16,i
    023C9 9110 0152 LDS	R17,i+1
    023CB 0D02      ADD	R16,R2
    023CC 1D13      ADC	R17,R3
    023CD 940E 0749 CALL	_rGLCD_cursor_off
    023CF 5F4F      SUBI	R20,0xFF
    023D0 4F5F      SBCI	R21,0xFF
    023D1 3045      CPI	R20,5
    023D2 E0E0      LDI	R30,0
    023D3 075E      CPC	R21,R30
    023D4 F2D4      BLT	0x23AF
(0528)         for(n=0;n<5;n++) {
    023D5 2744      CLR	R20
    023D6 2755      CLR	R21
(0529)             if(imax<i2[n]) imax=i2[n];
    023D7 E185      LDI	R24,0x15
    023D8 E091      LDI	R25,1
    023D9 01FA      MOVW	R30,R20
    023DA 0FEE      LSL	R30
    023DB 1FFF      ROL	R31
    023DC 0FE8      ADD	R30,R24
    023DD 1FF9      ADC	R31,R25
    023DE 8020      LD	R2,Z
    023DF 8031      LDD	R3,Z+1
    023E0 9040 0454 LDS	R4,imax
    023E2 9050 0455 LDS	R5,imax+1
    023E4 1442      CP	R4,R2
    023E5 0453      CPC	R5,R3
    023E6 F45C      BGE	0x23F2
    023E7 01FA      MOVW	R30,R20
    023E8 0FEE      LSL	R30
    023E9 1FFF      ROL	R31
    023EA 0FE8      ADD	R30,R24
    023EB 1FF9      ADC	R31,R25
    023EC 8020      LD	R2,Z
    023ED 8031      LDD	R3,Z+1
    023EE 9230 0455 STS	imax+1,R3
    023F0 9220 0454 STS	imax,R2
(0530)             if(imin>i2[n]) imin=i2[n];
    023F2 E185      LDI	R24,0x15
    023F3 E091      LDI	R25,1
    023F4 01FA      MOVW	R30,R20
    023F5 0FEE      LSL	R30
    023F6 1FFF      ROL	R31
    023F7 0FE8      ADD	R30,R24
    023F8 1FF9      ADC	R31,R25
    023F9 8020      LD	R2,Z
    023FA 8031      LDD	R3,Z+1
    023FB 9040 0452 LDS	R4,imin
    023FD 9050 0453 LDS	R5,imin+1
    023FF 1424      CP	R2,R4
    02400 0435      CPC	R3,R5
    02401 F45C      BGE	0x240D
    02402 01FA      MOVW	R30,R20
    02403 0FEE      LSL	R30
    02404 1FFF      ROL	R31
    02405 0FE8      ADD	R30,R24
    02406 1FF9      ADC	R31,R25
    02407 8020      LD	R2,Z
    02408 8031      LDD	R3,Z+1
    02409 9230 0453 STS	imin+1,R3
    0240B 9220 0452 STS	imin,R2
(0531)             if(jmax<j2[n]) jmax=j2[n];
    0240D E18F      LDI	R24,0x1F
    0240E E091      LDI	R25,1
    0240F 01FA      MOVW	R30,R20
    02410 0FEE      LSL	R30
    02411 1FFF      ROL	R31
    02412 0FE8      ADD	R30,R24
    02413 1FF9      ADC	R31,R25
    02414 8020      LD	R2,Z
    02415 8031      LDD	R3,Z+1
    02416 9040 0450 LDS	R4,jmax
    02418 9050 0451 LDS	R5,jmax+1
    0241A 1442      CP	R4,R2
    0241B 0453      CPC	R5,R3
    0241C F45C      BGE	0x2428
    0241D 01FA      MOVW	R30,R20
    0241E 0FEE      LSL	R30
    0241F 1FFF      ROL	R31
    02420 0FE8      ADD	R30,R24
    02421 1FF9      ADC	R31,R25
    02422 8020      LD	R2,Z
    02423 8031      LDD	R3,Z+1
    02424 9230 0451 STS	jmax+1,R3
    02426 9220 0450 STS	jmax,R2
(0532)             if(jmin>j2[n]) jmin=j2[n];
    02428 E18F      LDI	R24,0x1F
    02429 E091      LDI	R25,1
    0242A 01FA      MOVW	R30,R20
    0242B 0FEE      LSL	R30
    0242C 1FFF      ROL	R31
    0242D 0FE8      ADD	R30,R24
    0242E 1FF9      ADC	R31,R25
    0242F 8020      LD	R2,Z
    02430 8031      LDD	R3,Z+1
    02431 9040 044E LDS	R4,jmin
    02433 9050 044F LDS	R5,jmin+1
    02435 1424      CP	R2,R4
    02436 0435      CPC	R3,R5
    02437 F45C      BGE	0x2443
    02438 01FA      MOVW	R30,R20
    02439 0FEE      LSL	R30
    0243A 1FFF      ROL	R31
    0243B 0FE8      ADD	R30,R24
    0243C 1FF9      ADC	R31,R25
    0243D 8020      LD	R2,Z
    0243E 8031      LDD	R3,Z+1
    0243F 9230 044F STS	jmin+1,R3
    02441 9220 044E STS	jmin,R2
(0533)         }
    02443 5F4F      SUBI	R20,0xFF
    02444 4F5F      SBCI	R21,0xFF
    02445 3045      CPI	R20,5
    02446 E0E0      LDI	R30,0
    02447 075E      CPC	R21,R30
    02448 F40C      BGE	0x244A
    02449 CF8D      RJMP	0x23D7
(0534)     }
    0244A C09C      RJMP	0x24E7
(0535)     else {
(0536)         for(n=0;n<2;n++)
    0244B 2744      CLR	R20
    0244C 2755      CLR	R21
(0537)             rGLCD_cursor_off(i+i3[n],j+j3[n]);
    0244D 015A      MOVW	R10,R20
    0244E 0CAA      LSL	R10
    0244F 1CBB      ROL	R11
    02450 E383      LDI	R24,0x33
    02451 E091      LDI	R25,1
    02452 01F5      MOVW	R30,R10
    02453 0FE8      ADD	R30,R24
    02454 1FF9      ADC	R31,R25
    02455 8020      LD	R2,Z
    02456 8031      LDD	R3,Z+1
    02457 9120 0153 LDS	R18,j
    02459 9130 0154 LDS	R19,j+1
    0245B 0D22      ADD	R18,R2
    0245C 1D33      ADC	R19,R3
    0245D E289      LDI	R24,0x29
    0245E E091      LDI	R25,1
    0245F 01F5      MOVW	R30,R10
    02460 0FE8      ADD	R30,R24
    02461 1FF9      ADC	R31,R25
    02462 8020      LD	R2,Z
    02463 8031      LDD	R3,Z+1
    02464 9100 0151 LDS	R16,i
    02466 9110 0152 LDS	R17,i+1
    02468 0D02      ADD	R16,R2
    02469 1D13      ADC	R17,R3
    0246A 940E 0749 CALL	_rGLCD_cursor_off
    0246C 5F4F      SUBI	R20,0xFF
    0246D 4F5F      SBCI	R21,0xFF
    0246E 3042      CPI	R20,2
    0246F E0E0      LDI	R30,0
    02470 075E      CPC	R21,R30
    02471 F2DC      BLT	0x244D
(0538)         for(n=0;n<2;n++) {
    02472 2744      CLR	R20
    02473 2755      CLR	R21
(0539)             if(imax<i3[n]) imax=i3[n];
    02474 E289      LDI	R24,0x29
    02475 E091      LDI	R25,1
    02476 01FA      MOVW	R30,R20
    02477 0FEE      LSL	R30
    02478 1FFF      ROL	R31
    02479 0FE8      ADD	R30,R24
    0247A 1FF9      ADC	R31,R25
    0247B 8020      LD	R2,Z
    0247C 8031      LDD	R3,Z+1
    0247D 9040 0454 LDS	R4,imax
    0247F 9050 0455 LDS	R5,imax+1
    02481 1442      CP	R4,R2
    02482 0453      CPC	R5,R3
    02483 F45C      BGE	0x248F
    02484 01FA      MOVW	R30,R20
    02485 0FEE      LSL	R30
    02486 1FFF      ROL	R31
    02487 0FE8      ADD	R30,R24
    02488 1FF9      ADC	R31,R25
    02489 8020      LD	R2,Z
    0248A 8031      LDD	R3,Z+1
    0248B 9230 0455 STS	imax+1,R3
    0248D 9220 0454 STS	imax,R2
(0540)             if(imin>i3[n]) imin=i3[n];
    0248F E289      LDI	R24,0x29
    02490 E091      LDI	R25,1
    02491 01FA      MOVW	R30,R20
    02492 0FEE      LSL	R30
    02493 1FFF      ROL	R31
    02494 0FE8      ADD	R30,R24
    02495 1FF9      ADC	R31,R25
    02496 8020      LD	R2,Z
    02497 8031      LDD	R3,Z+1
    02498 9040 0452 LDS	R4,imin
    0249A 9050 0453 LDS	R5,imin+1
    0249C 1424      CP	R2,R4
    0249D 0435      CPC	R3,R5
    0249E F45C      BGE	0x24AA
    0249F 01FA      MOVW	R30,R20
    024A0 0FEE      LSL	R30
    024A1 1FFF      ROL	R31
    024A2 0FE8      ADD	R30,R24
    024A3 1FF9      ADC	R31,R25
    024A4 8020      LD	R2,Z
    024A5 8031      LDD	R3,Z+1
    024A6 9230 0453 STS	imin+1,R3
    024A8 9220 0452 STS	imin,R2
(0541)             if(jmax<j3[n]) jmax=j3[n];
    024AA E383      LDI	R24,0x33
    024AB E091      LDI	R25,1
    024AC 01FA      MOVW	R30,R20
    024AD 0FEE      LSL	R30
    024AE 1FFF      ROL	R31
    024AF 0FE8      ADD	R30,R24
    024B0 1FF9      ADC	R31,R25
    024B1 8020      LD	R2,Z
    024B2 8031      LDD	R3,Z+1
    024B3 9040 0450 LDS	R4,jmax
    024B5 9050 0451 LDS	R5,jmax+1
    024B7 1442      CP	R4,R2
    024B8 0453      CPC	R5,R3
    024B9 F45C      BGE	0x24C5
    024BA 01FA      MOVW	R30,R20
    024BB 0FEE      LSL	R30
    024BC 1FFF      ROL	R31
    024BD 0FE8      ADD	R30,R24
    024BE 1FF9      ADC	R31,R25
    024BF 8020      LD	R2,Z
    024C0 8031      LDD	R3,Z+1
    024C1 9230 0451 STS	jmax+1,R3
    024C3 9220 0450 STS	jmax,R2
(0542)             if(jmin>j3[n]) jmin=j3[n];
    024C5 E383      LDI	R24,0x33
    024C6 E091      LDI	R25,1
    024C7 01FA      MOVW	R30,R20
    024C8 0FEE      LSL	R30
    024C9 1FFF      ROL	R31
    024CA 0FE8      ADD	R30,R24
    024CB 1FF9      ADC	R31,R25
    024CC 8020      LD	R2,Z
    024CD 8031      LDD	R3,Z+1
    024CE 9040 044E LDS	R4,jmin
    024D0 9050 044F LDS	R5,jmin+1
    024D2 1424      CP	R2,R4
    024D3 0435      CPC	R3,R5
    024D4 F45C      BGE	0x24E0
    024D5 01FA      MOVW	R30,R20
    024D6 0FEE      LSL	R30
    024D7 1FFF      ROL	R31
    024D8 0FE8      ADD	R30,R24
    024D9 1FF9      ADC	R31,R25
    024DA 8020      LD	R2,Z
    024DB 8031      LDD	R3,Z+1
    024DC 9230 044F STS	jmin+1,R3
    024DE 9220 044E STS	jmin,R2
(0543)         }
    024E0 5F4F      SUBI	R20,0xFF
    024E1 4F5F      SBCI	R21,0xFF
    024E2 3042      CPI	R20,2
    024E3 E0E0      LDI	R30,0
    024E4 075E      CPC	R21,R30
    024E5 F40C      BGE	0x24E7
    024E6 CF8D      RJMP	0x2474
(0544)     }
(0545)     if(i+imax>7) i--;
    024E7 9020 0454 LDS	R2,imax
    024E9 9030 0455 LDS	R3,imax+1
    024EB 9040 0151 LDS	R4,i
    024ED 9050 0152 LDS	R5,i+1
    024EF 0C42      ADD	R4,R2
    024F0 1C53      ADC	R5,R3
    024F1 E087      LDI	R24,7
    024F2 E090      LDI	R25,0
    024F3 1584      CP	R24,R4
    024F4 0595      CPC	R25,R5
    024F5 F454      BGE	0x2500
    024F6 9180 0151 LDS	R24,i
    024F8 9190 0152 LDS	R25,i+1
    024FA 9701      SBIW	R24,1
    024FB 9390 0152 STS	i+1,R25
    024FD 9380 0151 STS	i,R24
    024FF C048      RJMP	0x2548
(0546)     else if(i+imin<0) i++;
    02500 9020 0452 LDS	R2,imin
    02502 9030 0453 LDS	R3,imin+1
    02504 9180 0151 LDS	R24,i
    02506 9190 0152 LDS	R25,i+1
    02508 0D82      ADD	R24,R2
    02509 1D93      ADC	R25,R3
    0250A 3080      CPI	R24,0
    0250B E0E0      LDI	R30,0
    0250C 079E      CPC	R25,R30
    0250D F454      BGE	0x2518
    0250E 9180 0151 LDS	R24,i
    02510 9190 0152 LDS	R25,i+1
    02512 9601      ADIW	R24,1
    02513 9390 0152 STS	i+1,R25
    02515 9380 0151 STS	i,R24
    02517 C030      RJMP	0x2548
(0547)     else if(j+jmax>7) j--;
    02518 9020 0450 LDS	R2,jmax
    0251A 9030 0451 LDS	R3,jmax+1
    0251C 9040 0153 LDS	R4,j
    0251E 9050 0154 LDS	R5,j+1
    02520 0C42      ADD	R4,R2
    02521 1C53      ADC	R5,R3
    02522 E087      LDI	R24,7
    02523 E090      LDI	R25,0
    02524 1584      CP	R24,R4
    02525 0595      CPC	R25,R5
    02526 F454      BGE	0x2531
    02527 9180 0153 LDS	R24,j
    02529 9190 0154 LDS	R25,j+1
    0252B 9701      SBIW	R24,1
    0252C 9390 0154 STS	j+1,R25
    0252E 9380 0153 STS	j,R24
    02530 C017      RJMP	0x2548
(0548)     else if(j+jmin<0) j++;
    02531 9020 044E LDS	R2,jmin
    02533 9030 044F LDS	R3,jmin+1
    02535 9180 0153 LDS	R24,j
    02537 9190 0154 LDS	R25,j+1
    02539 0D82      ADD	R24,R2
    0253A 1D93      ADC	R25,R3
    0253B 3080      CPI	R24,0
    0253C E0E0      LDI	R30,0
    0253D 079E      CPC	R25,R30
    0253E F44C      BGE	0x2548
    0253F 9180 0153 LDS	R24,j
    02541 9190 0154 LDS	R25,j+1
    02543 9601      ADIW	R24,1
    02544 9390 0154 STS	j+1,R25
    02546 9380 0153 STS	j,R24
    02548 940C 46D8 JMP	pop_xgset300C
(0549) }
(0550) 
(0551) int getchar(void)
(0552) {
(0553)      while ((UCSR0A & 0x80) == 0);
_getchar$device_specific$|_getchar:
    0254A 9B5F      SBIS	0x0B,7
    0254B CFFE      RJMP	_getchar$device_specific$|_getchar
(0554)      return UDR0;
    0254C B10C      IN	R16,0x0C
    0254D 2711      CLR	R17
    0254E 9508      RET
_set_tx_uart:
  i                    --> R20
  j                    --> R22
    0254F 940E 46DD CALL	push_xgsetF000
(0555) }
(0556) 
(0557) 
(0558) void set_tx_uart(void)
(0559) {
(0560)     int i,j;
(0561)     for(i=0;i<8;i++){
    02551 2744      CLR	R20
    02552 2755      CLR	R21
(0562)     for(j=0;j<8;j++){
    02553 2766      CLR	R22
    02554 2777      CLR	R23
(0563)     USART0_Transmit(game_set[i][j]);}}
    02555 E100      LDI	R16,0x10
    02556 E010      LDI	R17,0
    02557 019A      MOVW	R18,R20
    02558 940E 4674 CALL	empy16s
    0255A 0118      MOVW	R2,R16
    0255B E587      LDI	R24,0x57
    0255C E094      LDI	R25,4
    0255D 0E28      ADD	R2,R24
    0255E 1E39      ADC	R3,R25
    0255F 01FB      MOVW	R30,R22
    02560 0FEE      LSL	R30
    02561 1FFF      ROL	R31
    02562 0DE2      ADD	R30,R2
    02563 1DF3      ADC	R31,R3
    02564 8100      LD	R16,Z
    02565 8111      LDD	R17,Z+1
    02566 940E 14E6 CALL	_USART0_Transmit
    02568 5F6F      SUBI	R22,0xFF
    02569 4F7F      SBCI	R23,0xFF
    0256A 3068      CPI	R22,0x8
    0256B E0E0      LDI	R30,0
    0256C 077E      CPC	R23,R30
    0256D F33C      BLT	0x2555
    0256E 5F4F      SUBI	R20,0xFF
    0256F 4F5F      SBCI	R21,0xFF
    02570 3048      CPI	R20,0x8
    02571 E0E0      LDI	R30,0
    02572 075E      CPC	R21,R30
    02573 F2FC      BLT	0x2553
    02574 940C 46E2 JMP	pop_xgsetF000
_set_rx_uart:
  i                    --> R20
  j                    --> R22
    02576 940E 46DD CALL	push_xgsetF000
(0564) }
(0565) 
(0566) void set_rx_uart(void)
(0567) {
(0568)     int i,j;
(0569)     for(i=0;i<8;i++){
    02578 2744      CLR	R20
    02579 2755      CLR	R21
(0570)     for(j=0;j<8;j++){
    0257A 2766      CLR	R22
    0257B 2777      CLR	R23
(0571)     counter_set[i][j]=getchar();}}
    0257C DFCD      RCALL	_getchar$device_specific$|_getchar
    0257D 0128      MOVW	R4,R16
    0257E E100      LDI	R16,0x10
    0257F E010      LDI	R17,0
    02580 019A      MOVW	R18,R20
    02581 940E 4674 CALL	empy16s
    02583 0118      MOVW	R2,R16
    02584 E585      LDI	R24,0x55
    02585 E091      LDI	R25,1
    02586 0E28      ADD	R2,R24
    02587 1E39      ADC	R3,R25
    02588 01FB      MOVW	R30,R22
    02589 0FEE      LSL	R30
    0258A 1FFF      ROL	R31
    0258B 0DE2      ADD	R30,R2
    0258C 1DF3      ADC	R31,R3
    0258D 8251      STD	Z+1,R5
    0258E 8240      ST	Z,R4
    0258F 5F6F      SUBI	R22,0xFF
    02590 4F7F      SBCI	R23,0xFF
    02591 3068      CPI	R22,0x8
    02592 E0E0      LDI	R30,0
    02593 077E      CPC	R23,R30
    02594 F33C      BLT	0x257C
    02595 5F4F      SUBI	R20,0xFF
    02596 4F5F      SBCI	R21,0xFF
    02597 3048      CPI	R20,0x8
    02598 E0E0      LDI	R30,0
    02599 075E      CPC	R21,R30
    0259A F2FC      BLT	0x257A
    0259B 940C 46E2 JMP	pop_xgsetF000
_main:
  overlap              --> R10
    0259D 9722      SBIW	R28,2
(0572) }
(0573) 
(0574) void main(void)
(0575) {
(0576)     DDRA=0xff; //GLCD databus
    0259E EF8F      LDI	R24,0xFF
    0259F BB8A      OUT	0x1A,R24
(0577)     DDRB=0x00; //UARTdata
    025A0 2422      CLR	R2
    025A1 BA27      OUT	0x17,R2
(0578)     DDRC=0x1f; //0001 1111 GLCD setting
    025A2 E18F      LDI	R24,0x1F
    025A3 BB84      OUT	0x14,R24
(0579)     DDRD=0x1e; //0001 1110 vibrating motor PD4, power down/on switch PD0 blue key cap
    025A4 E18E      LDI	R24,0x1E
    025A5 BB81      OUT	0x11,R24
(0580)     DDRE=0xff; //1111 1111 ship PE7:4 white led, item PE3:2 red led, mine PE1:0 yellow led
    025A6 EF8F      LDI	R24,0xFF
    025A7 B982      OUT	0x02,R24
(0581)     DDRF=0x80; //1000 0000 select switch PF3 yellow, turn switch PF2 red, joystick PF1:0
    025A8 E880      LDI	R24,0x80
    025A9 9380 0061 STS	0x61,R24
(0582) 
(0583) 
(0584) 
(0585)     EICRA=0x02; //0000 0010 PD0 falling edge. sleep mode
    025AB E082      LDI	R24,2
    025AC 9380 006A STS	0x6A,R24
(0586)     EIMSK=0x01; //0000 0001 INT0 enable
    025AE E081      LDI	R24,1
    025AF BF89      OUT	0x39,R24
(0587)     SREG=0x80;  //interrupt enable
    025B0 E880      LDI	R24,0x80
    025B1 BF8F      OUT	0x3F,R24
(0588) 
(0589)     UCSR0A=0x00; //don't use flag register
    025B2 B82B      OUT	0x0B,R2
(0590)     UCSR0B=0x18; //tx enable, rx enable, transmission bit = 8 bit
    025B3 E188      LDI	R24,0x18
    025B4 B98A      OUT	0x0A,R24
(0591)     UCSR0C=0x06; //asynchronous communication2
    025B5 E086      LDI	R24,6
    025B6 9380 0095 STS	0x95,R24
(0592)     UBRR0H=0;
    025B8 9220 0090 STS	0x90,R2
(0593)     UBRR0L=103; //9600bps
    025BA E687      LDI	R24,0x67
    025BB B989      OUT	0x09,R24
(0594) 
(0595)     ADCSRA = 0x87; // ADCsinglemode, 128
    025BC E887      LDI	R24,0x87
    025BD B986      OUT	0x06,R24
(0596) 
(0597)     //register_timer();
(0598)     GLCD_Initialize();
    025BE 940E 0487 CALL	_GLCD_Initialize
(0599)     GLCD_Clear();
    025C0 940E 04C4 CALL	_GLCD_Clear
(0600) 
(0601)     mode_select();
    025C2 940E 153C CALL	_mode_select
(0602)     if(mode==0) {
    025C4 9020 02E6 LDS	R2,mode
    025C6 2022      TST	R2
    025C7 F011      BEQ	0x25CA
    025C8 940C 3649 JMP	0x3649
(0603)             GLCD_Clear();
    025CA 940E 04C4 CALL	_GLCD_Clear
(0604)             delay_ms(100);
    025CC E604      LDI	R16,0x64
    025CD E010      LDI	R17,0
    025CE 940E 04B0 CALL	_delay_ms
(0605)             difficulty_select();
    025D0 940E 163D CALL	_difficulty_select
(0606)             if(difficult==5){
    025D2 9180 02E7 LDS	R24,difficult
    025D4 3085      CPI	R24,5
    025D5 F011      BEQ	0x25D8
    025D6 940C 3649 JMP	0x3649
(0607)                 GLCD_Clear();
    025D8 940E 04C4 CALL	_GLCD_Clear
(0608)                 GLCD_TextGoTo(7,7);
    025DA E027      LDI	R18,7
    025DB E007      LDI	R16,7
    025DC 940E 0405 CALL	_GLCD_TextGoTo
(0609)                 GLCD_WriteString("Oh, seriously?");
    025DE E505      LDI	R16,0x55
    025DF E013      LDI	R17,3
    025E0 940E 03F6 CALL	_GLCD_WriteString
(0610)                 delay_ms(1000);
    025E2 EE08      LDI	R16,0xE8
    025E3 E013      LDI	R17,3
    025E4 940E 04B0 CALL	_delay_ms
(0611)                 GLCD_Clear();
    025E6 940E 04C4 CALL	_GLCD_Clear
(0612)                 GLCD_TextGoTo(2,7);
    025E8 E027      LDI	R18,7
    025E9 E002      LDI	R16,2
    025EA 940E 0405 CALL	_GLCD_TextGoTo
(0613)                 GLCD_WriteString("You're gonna regret");
    025EC E401      LDI	R16,0x41
    025ED E013      LDI	R17,3
    025EE 940E 03F6 CALL	_GLCD_WriteString
(0614)                 GLCD_TextGoTo(2,8);
    025F0 E028      LDI	R18,0x8
    025F1 E002      LDI	R16,2
    025F2 940E 0405 CALL	_GLCD_TextGoTo
(0615)                 GLCD_WriteString("choosing the hard mode");
    025F4 E20A      LDI	R16,0x2A
    025F5 E013      LDI	R17,3
    025F6 940E 03F6 CALL	_GLCD_WriteString
(0616)                 delay_ms(2500);
    025F8 EC04      LDI	R16,0xC4
    025F9 E019      LDI	R17,0x9
    025FA 940E 04B0 CALL	_delay_ms
(0617)             }
(0618)             }
    025FC 940C 3649 JMP	0x3649
(0619) 
(0620)     while(1) { //setting
(0621)         GLCD_Initialize();
    025FE 940E 0487 CALL	_GLCD_Initialize
(0622)         GLCD_Clear();
    02600 940E 04C4 CALL	_GLCD_Clear
(0623) 
(0624)         GLCD_screen();
    02602 940E 0BDF CALL	_GLCD_screen
(0625) 
(0626)         imax=1, imin=0, jmax=1, jmin=-1;
    02604 E081      LDI	R24,1
    02605 E090      LDI	R25,0
    02606 9390 0455 STS	imax+1,R25
    02608 9380 0454 STS	imax,R24
    0260A 2422      CLR	R2
    0260B 2433      CLR	R3
    0260C 9230 0453 STS	imin+1,R3
    0260E 9220 0452 STS	imin,R2
    02610 9390 0451 STS	jmax+1,R25
    02612 9380 0450 STS	jmax,R24
    02614 EF8F      LDI	R24,0xFF
    02615 EF9F      LDI	R25,0xFF
    02616 9390 044F STS	jmin+1,R25
    02618 9380 044E STS	jmin,R24
    0261A 940C 3647 JMP	0x3647
(0627) 
(0628)         while(1){
(0629)             while(cnt==0){ //ship1. voiliers
(0630)                 AtoD();
    0261C 940E 14EA CALL	_AtoD
(0631)                 rship1(i,j);
    0261E 9120 0153 LDS	R18,j
    02620 9130 0154 LDS	R19,j+1
    02622 9100 0151 LDS	R16,i
    02624 9110 0152 LDS	R17,i+1
    02626 940E 04FB CALL	_rship1
(0632)                 if(val_x>900||val_x<100||val_y>900||val_y<100) {
    02628 9020 03CF LDS	R2,val_x
    0262A 9030 03D0 LDS	R3,val_x+1
    0262C E884      LDI	R24,0x84
    0262D E093      LDI	R25,3
    0262E 1582      CP	R24,R2
    0262F 0593      CPC	R25,R3
    02630 F09C      BLT	0x2644
    02631 01C1      MOVW	R24,R2
    02632 3684      CPI	R24,0x64
    02633 E0E0      LDI	R30,0
    02634 079E      CPC	R25,R30
    02635 F074      BLT	0x2644
    02636 9020 03CD LDS	R2,val_y
    02638 9030 03CE LDS	R3,val_y+1
    0263A E884      LDI	R24,0x84
    0263B E093      LDI	R25,3
    0263C 1582      CP	R24,R2
    0263D 0593      CPC	R25,R3
    0263E F02C      BLT	0x2644
    0263F 01C1      MOVW	R24,R2
    02640 3684      CPI	R24,0x64
    02641 E0E0      LDI	R30,0
    02642 079E      CPC	R25,R30
    02643 F4B4      BGE	0x265A
(0633)                     p_i=i, p_j=j;
    02644 9020 0151 LDS	R2,i
    02646 9030 0152 LDS	R3,i+1
    02648 9230 02EC STS	p_i+1,R3
    0264A 9220 02EB STS	p_i,R2
    0264C 9020 0153 LDS	R2,j
    0264E 9030 0154 LDS	R3,j+1
    02650 9230 02EE STS	p_j+1,R3
    02652 9220 02ED STS	p_j,R2
(0634)                     joystick_setting();
    02654 940E 173A CALL	_joystick_setting
(0635)                     state=1;
    02656 E081      LDI	R24,1
    02657 9380 02E9 STS	state,R24
(0636)                 }
    02659 C00B      RJMP	0x2665
(0637)                 else if((PINF&0x04)==0x00) state=2;
    0265A 9902      SBIC	0x00,2
    0265B C004      RJMP	0x2660
    0265C E082      LDI	R24,2
    0265D 9380 02E9 STS	state,R24
    0265F C005      RJMP	0x2665
(0638)                 else if((PINF&0x08)==0x00) state=3;
    02660 9903      SBIC	0x00,3
    02661 C003      RJMP	0x2665
    02662 E083      LDI	R24,3
    02663 9380 02E9 STS	state,R24
(0639)                 if (state==1){
    02665 9180 02E9 LDS	R24,state
    02667 3081      CPI	R24,1
    02668 F009      BEQ	0x266A
    02669 C07A      RJMP	0x26E4
(0640)                     for(n=0;n<4;n++)
    0266A 2422      CLR	R2
    0266B 9220 03D1 STS	n,R2
    0266D C028      RJMP	0x2696
(0641)                         rGLCD_cursor_off(p_i+i1[n],p_j+j1[n]);
    0266E 90A0 03D1 LDS	R10,n
    02670 24BB      CLR	R11
    02671 FCA7      SBRC	R10,7
    02672 94B0      COM	R11
    02673 0CAA      LSL	R10
    02674 1CBB      ROL	R11
    02675 E08B      LDI	R24,0xB
    02676 E091      LDI	R25,1
    02677 01F5      MOVW	R30,R10
    02678 0FE8      ADD	R30,R24
    02679 1FF9      ADC	R31,R25
    0267A 8020      LD	R2,Z
    0267B 8031      LDD	R3,Z+1
    0267C 9120 02ED LDS	R18,p_j
    0267E 9130 02EE LDS	R19,p_j+1
    02680 0D22      ADD	R18,R2
    02681 1D33      ADC	R19,R3
    02682 E081      LDI	R24,1
    02683 E091      LDI	R25,1
    02684 01F5      MOVW	R30,R10
    02685 0FE8      ADD	R30,R24
    02686 1FF9      ADC	R31,R25
    02687 8020      LD	R2,Z
    02688 8031      LDD	R3,Z+1
    02689 9100 02EB LDS	R16,p_i
    0268B 9110 02EC LDS	R17,p_i+1
    0268D 0D02      ADD	R16,R2
    0268E 1D13      ADC	R17,R3
    0268F 940E 0749 CALL	_rGLCD_cursor_off
    02691 9180 03D1 LDS	R24,n
    02693 5F8F      SUBI	R24,0xFF
    02694 9380 03D1 STS	n,R24
    02696 9180 03D1 LDS	R24,n
    02698 3084      CPI	R24,4
    02699 F2A4      BLT	0x266E
(0642)                     if(i+imax>7||i+imin<0||j+jmax>7||j+jmin<0) i=p_i, j=p_j;
    0269A 90A0 0151 LDS	R10,i
    0269C 90B0 0152 LDS	R11,i+1
    0269E 9020 0454 LDS	R2,imax
    026A0 9030 0455 LDS	R3,imax+1
    026A2 0125      MOVW	R4,R10
    026A3 0C42      ADD	R4,R2
    026A4 1C53      ADC	R5,R3
    026A5 E087      LDI	R24,7
    026A6 E090      LDI	R25,0
    026A7 1584      CP	R24,R4
    026A8 0595      CPC	R25,R5
    026A9 F134      BLT	0x26D0
    026AA 9020 0452 LDS	R2,imin
    026AC 9030 0453 LDS	R3,imin+1
    026AE 01C5      MOVW	R24,R10
    026AF 0D82      ADD	R24,R2
    026B0 1D93      ADC	R25,R3
    026B1 3080      CPI	R24,0
    026B2 E0E0      LDI	R30,0
    026B3 079E      CPC	R25,R30
    026B4 F0DC      BLT	0x26D0
    026B5 90A0 0153 LDS	R10,j
    026B7 90B0 0154 LDS	R11,j+1
    026B9 9020 0450 LDS	R2,jmax
    026BB 9030 0451 LDS	R3,jmax+1
    026BD 0125      MOVW	R4,R10
    026BE 0C42      ADD	R4,R2
    026BF 1C53      ADC	R5,R3
    026C0 E087      LDI	R24,7
    026C1 E090      LDI	R25,0
    026C2 1584      CP	R24,R4
    026C3 0595      CPC	R25,R5
    026C4 F05C      BLT	0x26D0
    026C5 9020 044E LDS	R2,jmin
    026C7 9030 044F LDS	R3,jmin+1
    026C9 01C5      MOVW	R24,R10
    026CA 0D82      ADD	R24,R2
    026CB 1D93      ADC	R25,R3
    026CC 3080      CPI	R24,0
    026CD E0E0      LDI	R30,0
    026CE 079E      CPC	R25,R30
    026CF F484      BGE	0x26E0
    026D0 9020 02EB LDS	R2,p_i
    026D2 9030 02EC LDS	R3,p_i+1
    026D4 9230 0152 STS	i+1,R3
    026D6 9220 0151 STS	i,R2
    026D8 9020 02ED LDS	R2,p_j
    026DA 9030 02EE LDS	R3,p_j+1
    026DC 9230 0154 STS	j+1,R3
    026DE 9220 0153 STS	j,R2
(0643)                     state=0;
    026E0 2422      CLR	R2
    026E1 9220 02E9 STS	state,R2
(0644)                 }
    026E3 C0C0      RJMP	0x27A4
(0645)                 else if(state==2){
    026E4 9180 02E9 LDS	R24,state
    026E6 3082      CPI	R24,2
    026E7 F009      BEQ	0x26E9
    026E8 C03B      RJMP	0x2724
(0646)                     for(n=0;n<4;n++)
    026E9 2422      CLR	R2
    026EA 9220 03D1 STS	n,R2
    026EC C028      RJMP	0x2715
(0647)                         rGLCD_cursor_off(i+i1[n],j+j1[n]);
    026ED 90A0 03D1 LDS	R10,n
    026EF 24BB      CLR	R11
    026F0 FCA7      SBRC	R10,7
    026F1 94B0      COM	R11
    026F2 0CAA      LSL	R10
    026F3 1CBB      ROL	R11
    026F4 E08B      LDI	R24,0xB
    026F5 E091      LDI	R25,1
    026F6 01F5      MOVW	R30,R10
    026F7 0FE8      ADD	R30,R24
    026F8 1FF9      ADC	R31,R25
    026F9 8020      LD	R2,Z
    026FA 8031      LDD	R3,Z+1
    026FB 9120 0153 LDS	R18,j
    026FD 9130 0154 LDS	R19,j+1
    026FF 0D22      ADD	R18,R2
    02700 1D33      ADC	R19,R3
    02701 E081      LDI	R24,1
    02702 E091      LDI	R25,1
    02703 01F5      MOVW	R30,R10
    02704 0FE8      ADD	R30,R24
    02705 1FF9      ADC	R31,R25
    02706 8020      LD	R2,Z
    02707 8031      LDD	R3,Z+1
    02708 9100 0151 LDS	R16,i
    0270A 9110 0152 LDS	R17,i+1
    0270C 0D02      ADD	R16,R2
    0270D 1D13      ADC	R17,R3
    0270E 940E 0749 CALL	_rGLCD_cursor_off
    02710 9180 03D1 LDS	R24,n
    02712 5F8F      SUBI	R24,0xFF
    02713 9380 03D1 STS	n,R24
    02715 9180 03D1 LDS	R24,n
    02717 3084      CPI	R24,4
    02718 F2A4      BLT	0x26ED
(0648)                     switch_turn("rship1");
    02719 EB07      LDI	R16,0xB7
    0271A E013      LDI	R17,3
    0271B 940E 0570 CALL	_switch_turn
(0649)                     off_bounded("rship1");
    0271D EB07      LDI	R16,0xB7
    0271E E013      LDI	R17,3
    0271F DBCE      RCALL	_off_bounded
(0650)                     state=0;
    02720 2422      CLR	R2
    02721 9220 02E9 STS	state,R2
(0651)                 }
    02723 C080      RJMP	0x27A4
(0652)                 else if(state==3){
    02724 9180 02E9 LDS	R24,state
    02726 3083      CPI	R24,3
    02727 F009      BEQ	0x2729
    02728 C07B      RJMP	0x27A4
(0653)                     for(n=0;n<4;n++)
    02729 2422      CLR	R2
    0272A 9220 03D1 STS	n,R2
    0272C C037      RJMP	0x2764
(0654)                         game_set[i+i1[n]][j+j1[n]]=1;
    0272D 90A0 03D1 LDS	R10,n
    0272F 24BB      CLR	R11
    02730 FCA7      SBRC	R10,7
    02731 94B0      COM	R11
    02732 0CAA      LSL	R10
    02733 1CBB      ROL	R11
    02734 E081      LDI	R24,1
    02735 E091      LDI	R25,1
    02736 01F5      MOVW	R30,R10
    02737 0FE8      ADD	R30,R24
    02738 1FF9      ADC	R31,R25
    02739 8020      LD	R2,Z
    0273A 8031      LDD	R3,Z+1
    0273B 9120 0151 LDS	R18,i
    0273D 9130 0152 LDS	R19,i+1
    0273F 0D22      ADD	R18,R2
    02740 1D33      ADC	R19,R3
    02741 E100      LDI	R16,0x10
    02742 E010      LDI	R17,0
    02743 940E 4674 CALL	empy16s
    02745 0118      MOVW	R2,R16
    02746 E587      LDI	R24,0x57
    02747 E094      LDI	R25,4
    02748 0E28      ADD	R2,R24
    02749 1E39      ADC	R3,R25
    0274A E08B      LDI	R24,0xB
    0274B E091      LDI	R25,1
    0274C 01F5      MOVW	R30,R10
    0274D 0FE8      ADD	R30,R24
    0274E 1FF9      ADC	R31,R25
    0274F 8040      LD	R4,Z
    02750 8051      LDD	R5,Z+1
    02751 91E0 0153 LDS	R30,j
    02753 91F0 0154 LDS	R31,j+1
    02755 0DE4      ADD	R30,R4
    02756 1DF5      ADC	R31,R5
    02757 0FEE      LSL	R30
    02758 1FFF      ROL	R31
    02759 0DE2      ADD	R30,R2
    0275A 1DF3      ADC	R31,R3
    0275B E081      LDI	R24,1
    0275C E090      LDI	R25,0
    0275D 8391      STD	Z+1,R25
    0275E 8380      ST	Z,R24
    0275F 9180 03D1 LDS	R24,n
    02761 5F8F      SUBI	R24,0xFF
    02762 9380 03D1 STS	n,R24
    02764 9180 03D1 LDS	R24,n
    02766 3084      CPI	R24,4
    02767 F40C      BGE	0x2769
    02768 CFC4      RJMP	0x272D
(0655)                     ship1x=i, ship1y=j;
    02769 9020 0151 LDS	R2,i
    0276B 9030 0152 LDS	R3,i+1
    0276D 9230 044D STS	ship1x+1,R3
    0276F 9220 044C STS	ship1x,R2
    02771 9020 0153 LDS	R2,j
    02773 9030 0154 LDS	R3,j+1
    02775 9230 044B STS	ship1y+1,R3
    02777 9220 044A STS	ship1y,R2
(0656)                     i=1, j=1;
    02779 E081      LDI	R24,1
    0277A E090      LDI	R25,0
    0277B 9390 0152 STS	i+1,R25
    0277D 9380 0151 STS	i,R24
    0277F 9390 0154 STS	j+1,R25
    02781 9380 0153 STS	j,R24
(0657)                     imax=2, imin=-1, jmax=0, jmin=-1;
    02783 E082      LDI	R24,2
    02784 9390 0455 STS	imax+1,R25
    02786 9380 0454 STS	imax,R24
    02788 EF8F      LDI	R24,0xFF
    02789 EF9F      LDI	R25,0xFF
    0278A 9390 0453 STS	imin+1,R25
    0278C 9380 0452 STS	imin,R24
    0278E 2422      CLR	R2
    0278F 2433      CLR	R3
    02790 9230 0451 STS	jmax+1,R3
    02792 9220 0450 STS	jmax,R2
    02794 9390 044F STS	jmin+1,R25
    02796 9380 044E STS	jmin,R24
(0658)                     cnt++;
    02798 9180 02EA LDS	R24,cnt
    0279A 5F8F      SUBI	R24,0xFF
    0279B 9380 02EA STS	cnt,R24
(0659)                     delay_ms(300);
    0279D E20C      LDI	R16,0x2C
    0279E E011      LDI	R17,1
    0279F 940E 04B0 CALL	_delay_ms
(0660)                     state=-1;
    027A1 EF8F      LDI	R24,0xFF
    027A2 9380 02E9 STS	state,R24
(0661)                 }
(0662)             }
    027A4 9020 02EA LDS	R2,cnt
    027A6 2022      TST	R2
    027A7 F409      BNE	0x27A9
    027A8 CE73      RJMP	0x261C
    027A9 C24A      RJMP	0x29F4
(0663)             while(cnt==1){ //ship2. biggest ship
(0664)                 AtoD();
    027AA 940E 14EA CALL	_AtoD
(0665)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    027AC 9020 02E9 LDS	R2,state
    027AE 2022      TST	R2
    027AF F571      BNE	0x27DE
    027B0 9140 03CF LDS	R20,val_x
    027B2 9150 03D0 LDS	R21,val_x+1
    027B4 E884      LDI	R24,0x84
    027B5 E093      LDI	R25,3
    027B6 1784      CP	R24,R20
    027B7 0795      CPC	R25,R21
    027B8 F07C      BLT	0x27C8
    027B9 3644      CPI	R20,0x64
    027BA E0E0      LDI	R30,0
    027BB 075E      CPC	R21,R30
    027BC F05C      BLT	0x27C8
    027BD 9140 03CD LDS	R20,val_y
    027BF 9150 03CE LDS	R21,val_y+1
    027C1 1784      CP	R24,R20
    027C2 0795      CPC	R25,R21
    027C3 F024      BLT	0x27C8
    027C4 3644      CPI	R20,0x64
    027C5 E0E0      LDI	R30,0
    027C6 075E      CPC	R21,R30
    027C7 F4B4      BGE	0x27DE
(0666)                     p_i=i, p_j=j;
    027C8 9020 0151 LDS	R2,i
    027CA 9030 0152 LDS	R3,i+1
    027CC 9230 02EC STS	p_i+1,R3
    027CE 9220 02EB STS	p_i,R2
    027D0 9020 0153 LDS	R2,j
    027D2 9030 0154 LDS	R3,j+1
    027D4 9230 02EE STS	p_j+1,R3
    027D6 9220 02ED STS	p_j,R2
(0667)                     joystick_setting();
    027D8 940E 173A CALL	_joystick_setting
(0668)                     state=1;
    027DA E081      LDI	R24,1
    027DB 9380 02E9 STS	state,R24
(0669)                 }
    027DD C013      RJMP	0x27F1
(0670)                 else if(!state&&(PINF&0x04)==0x00) state=2;
    027DE 9020 02E9 LDS	R2,state
    027E0 2022      TST	R2
    027E1 F431      BNE	0x27E8
    027E2 9902      SBIC	0x00,2
    027E3 C004      RJMP	0x27E8
    027E4 E082      LDI	R24,2
    027E5 9380 02E9 STS	state,R24
    027E7 C009      RJMP	0x27F1
(0671)                 else if(!state&&(PINF&0x08)==0x00) state=3;
    027E8 9020 02E9 LDS	R2,state
    027EA 2022      TST	R2
    027EB F429      BNE	0x27F1
    027EC 9903      SBIC	0x00,3
    027ED C003      RJMP	0x27F1
    027EE E083      LDI	R24,3
    027EF 9380 02E9 STS	state,R24
(0672)                 if(state==-1){
    027F1 9180 02E9 LDS	R24,state
    027F3 3F8F      CPI	R24,0xFF
    027F4 F009      BEQ	0x27F6
    027F5 C0B8      RJMP	0x28AE
(0673)                     rship1(ship1x,ship1y);
    027F6 9120 044A LDS	R18,ship1y
    027F8 9130 044B LDS	R19,ship1y+1
    027FA 9100 044C LDS	R16,ship1x
    027FC 9110 044D LDS	R17,ship1x+1
    027FE 940E 04FB CALL	_rship1
(0674)                     for(n=0;n<5;n++){
    02800 2422      CLR	R2
    02801 9220 03D1 STS	n,R2
    02803 C0A5      RJMP	0x28A9
(0675)                         if(game_set[i+i2[n]][j+j2[n]]) {
    02804 90A0 03D1 LDS	R10,n
    02806 24BB      CLR	R11
    02807 FCA7      SBRC	R10,7
    02808 94B0      COM	R11
    02809 0CAA      LSL	R10
    0280A 1CBB      ROL	R11
    0280B E185      LDI	R24,0x15
    0280C E091      LDI	R25,1
    0280D 01F5      MOVW	R30,R10
    0280E 0FE8      ADD	R30,R24
    0280F 1FF9      ADC	R31,R25
    02810 8020      LD	R2,Z
    02811 8031      LDD	R3,Z+1
    02812 9120 0151 LDS	R18,i
    02814 9130 0152 LDS	R19,i+1
    02816 0D22      ADD	R18,R2
    02817 1D33      ADC	R19,R3
    02818 E100      LDI	R16,0x10
    02819 E010      LDI	R17,0
    0281A 940E 4674 CALL	empy16s
    0281C 0118      MOVW	R2,R16
    0281D E587      LDI	R24,0x57
    0281E E094      LDI	R25,4
    0281F 0E28      ADD	R2,R24
    02820 1E39      ADC	R3,R25
    02821 E18F      LDI	R24,0x1F
    02822 E091      LDI	R25,1
    02823 01F5      MOVW	R30,R10
    02824 0FE8      ADD	R30,R24
    02825 1FF9      ADC	R31,R25
    02826 8040      LD	R4,Z
    02827 8051      LDD	R5,Z+1
    02828 91E0 0153 LDS	R30,j
    0282A 91F0 0154 LDS	R31,j+1
    0282C 0DE4      ADD	R30,R4
    0282D 1DF5      ADC	R31,R5
    0282E 0FEE      LSL	R30
    0282F 1FFF      ROL	R31
    02830 0DE2      ADD	R30,R2
    02831 1DF3      ADC	R31,R3
    02832 8020      LD	R2,Z
    02833 8031      LDD	R3,Z+1
    02834 2022      TST	R2
    02835 F419      BNE	0x2839
    02836 2033      TST	R3
    02837 F409      BNE	0x2839
    02838 C045      RJMP	0x287E
(0676)                             rGLCD_cursor_off(i+i2[n],j+j2[n]);
    02839 90A0 03D1 LDS	R10,n
    0283B 24BB      CLR	R11
    0283C FCA7      SBRC	R10,7
    0283D 94B0      COM	R11
    0283E 0CAA      LSL	R10
    0283F 1CBB      ROL	R11
    02840 01F5      MOVW	R30,R10
    02841 0FE8      ADD	R30,R24
    02842 1FF9      ADC	R31,R25
    02843 8020      LD	R2,Z
    02844 8031      LDD	R3,Z+1
    02845 9120 0153 LDS	R18,j
    02847 9130 0154 LDS	R19,j+1
    02849 0D22      ADD	R18,R2
    0284A 1D33      ADC	R19,R3
    0284B E185      LDI	R24,0x15
    0284C E091      LDI	R25,1
    0284D 01F5      MOVW	R30,R10
    0284E 0FE8      ADD	R30,R24
    0284F 1FF9      ADC	R31,R25
    02850 8020      LD	R2,Z
    02851 8031      LDD	R3,Z+1
    02852 9100 0151 LDS	R16,i
    02854 9110 0152 LDS	R17,i+1
    02856 0D02      ADD	R16,R2
    02857 1D13      ADC	R17,R3
    02858 940E 0749 CALL	_rGLCD_cursor_off
(0677)                             rGLCD_fail(i+i2[n],j+j2[n]);
    0285A 90A0 03D1 LDS	R10,n
    0285C 24BB      CLR	R11
    0285D FCA7      SBRC	R10,7
    0285E 94B0      COM	R11
    0285F 0CAA      LSL	R10
    02860 1CBB      ROL	R11
    02861 E18F      LDI	R24,0x1F
    02862 E091      LDI	R25,1
    02863 01F5      MOVW	R30,R10
    02864 0FE8      ADD	R30,R24
    02865 1FF9      ADC	R31,R25
    02866 8020      LD	R2,Z
    02867 8031      LDD	R3,Z+1
    02868 9120 0153 LDS	R18,j
    0286A 9130 0154 LDS	R19,j+1
    0286C 0D22      ADD	R18,R2
    0286D 1D33      ADC	R19,R3
    0286E E185      LDI	R24,0x15
    0286F E091      LDI	R25,1
    02870 01F5      MOVW	R30,R10
    02871 0FE8      ADD	R30,R24
    02872 1FF9      ADC	R31,R25
    02873 8020      LD	R2,Z
    02874 8031      LDD	R3,Z+1
    02875 9100 0151 LDS	R16,i
    02877 9110 0152 LDS	R17,i+1
    02879 0D02      ADD	R16,R2
    0287A 1D13      ADC	R17,R3
    0287B 940E 09A9 CALL	_rGLCD_fail
(0678)                         }
    0287D C023      RJMP	0x28A1
(0679)                         else rGLCD_1block(i+i2[n],j+j2[n]);
    0287E 90A0 03D1 LDS	R10,n
    02880 24BB      CLR	R11
    02881 FCA7      SBRC	R10,7
    02882 94B0      COM	R11
    02883 0CAA      LSL	R10
    02884 1CBB      ROL	R11
    02885 E18F      LDI	R24,0x1F
    02886 E091      LDI	R25,1
    02887 01F5      MOVW	R30,R10
    02888 0FE8      ADD	R30,R24
    02889 1FF9      ADC	R31,R25
    0288A 8020      LD	R2,Z
    0288B 8031      LDD	R3,Z+1
    0288C 9120 0153 LDS	R18,j
    0288E 9130 0154 LDS	R19,j+1
    02890 0D22      ADD	R18,R2
    02891 1D33      ADC	R19,R3
    02892 E185      LDI	R24,0x15
    02893 E091      LDI	R25,1
    02894 01F5      MOVW	R30,R10
    02895 0FE8      ADD	R30,R24
    02896 1FF9      ADC	R31,R25
    02897 8020      LD	R2,Z
    02898 8031      LDD	R3,Z+1
    02899 9100 0151 LDS	R16,i
    0289B 9110 0152 LDS	R17,i+1
    0289D 0D02      ADD	R16,R2
    0289E 1D13      ADC	R17,R3
    0289F 940E 04C7 CALL	_rGLCD_1block
(0680)                         state=0;
    028A1 2422      CLR	R2
    028A2 9220 02E9 STS	state,R2
(0681)                     }
    028A4 9180 03D1 LDS	R24,n
    028A6 5F8F      SUBI	R24,0xFF
    028A7 9380 03D1 STS	n,R24
    028A9 9180 03D1 LDS	R24,n
    028AB 3085      CPI	R24,5
    028AC F40C      BGE	0x28AE
    028AD CF56      RJMP	0x2804
(0682)                 }
(0683)                 if(state==1){
    028AE 9180 02E9 LDS	R24,state
    028B0 3081      CPI	R24,1
    028B1 F009      BEQ	0x28B3
    028B2 C034      RJMP	0x28E7
(0684)                     for(n=0;n<5;n++)
    028B3 2422      CLR	R2
    028B4 9220 03D1 STS	n,R2
    028B6 C028      RJMP	0x28DF
(0685)                         rGLCD_cursor_off(p_i+i2[n],p_j+j2[n]);
    028B7 90A0 03D1 LDS	R10,n
    028B9 24BB      CLR	R11
    028BA FCA7      SBRC	R10,7
    028BB 94B0      COM	R11
    028BC 0CAA      LSL	R10
    028BD 1CBB      ROL	R11
    028BE E18F      LDI	R24,0x1F
    028BF E091      LDI	R25,1
    028C0 01F5      MOVW	R30,R10
    028C1 0FE8      ADD	R30,R24
    028C2 1FF9      ADC	R31,R25
    028C3 8020      LD	R2,Z
    028C4 8031      LDD	R3,Z+1
    028C5 9120 02ED LDS	R18,p_j
    028C7 9130 02EE LDS	R19,p_j+1
    028C9 0D22      ADD	R18,R2
    028CA 1D33      ADC	R19,R3
    028CB E185      LDI	R24,0x15
    028CC E091      LDI	R25,1
    028CD 01F5      MOVW	R30,R10
    028CE 0FE8      ADD	R30,R24
    028CF 1FF9      ADC	R31,R25
    028D0 8020      LD	R2,Z
    028D1 8031      LDD	R3,Z+1
    028D2 9100 02EB LDS	R16,p_i
    028D4 9110 02EC LDS	R17,p_i+1
    028D6 0D02      ADD	R16,R2
    028D7 1D13      ADC	R17,R3
    028D8 940E 0749 CALL	_rGLCD_cursor_off
    028DA 9180 03D1 LDS	R24,n
    028DC 5F8F      SUBI	R24,0xFF
    028DD 9380 03D1 STS	n,R24
    028DF 9180 03D1 LDS	R24,n
    028E1 3085      CPI	R24,5
    028E2 F2A4      BLT	0x28B7
(0686)                     state=-1;
    028E3 EF8F      LDI	R24,0xFF
    028E4 9380 02E9 STS	state,R24
(0687)                 }
    028E6 C10D      RJMP	0x29F4
(0688)                 else if(state==2){
    028E7 9180 02E9 LDS	R24,state
    028E9 3082      CPI	R24,2
    028EA F009      BEQ	0x28EC
    028EB C03B      RJMP	0x2927
(0689)                     for(n=0;n<5;n++)
    028EC 2422      CLR	R2
    028ED 9220 03D1 STS	n,R2
    028EF C028      RJMP	0x2918
(0690)                         rGLCD_cursor_off(i+i2[n],j+j2[n]);
    028F0 90A0 03D1 LDS	R10,n
    028F2 24BB      CLR	R11
    028F3 FCA7      SBRC	R10,7
    028F4 94B0      COM	R11
    028F5 0CAA      LSL	R10
    028F6 1CBB      ROL	R11
    028F7 E18F      LDI	R24,0x1F
    028F8 E091      LDI	R25,1
    028F9 01F5      MOVW	R30,R10
    028FA 0FE8      ADD	R30,R24
    028FB 1FF9      ADC	R31,R25
    028FC 8020      LD	R2,Z
    028FD 8031      LDD	R3,Z+1
    028FE 9120 0153 LDS	R18,j
    02900 9130 0154 LDS	R19,j+1
    02902 0D22      ADD	R18,R2
    02903 1D33      ADC	R19,R3
    02904 E185      LDI	R24,0x15
    02905 E091      LDI	R25,1
    02906 01F5      MOVW	R30,R10
    02907 0FE8      ADD	R30,R24
    02908 1FF9      ADC	R31,R25
    02909 8020      LD	R2,Z
    0290A 8031      LDD	R3,Z+1
    0290B 9100 0151 LDS	R16,i
    0290D 9110 0152 LDS	R17,i+1
    0290F 0D02      ADD	R16,R2
    02910 1D13      ADC	R17,R3
    02911 940E 0749 CALL	_rGLCD_cursor_off
    02913 9180 03D1 LDS	R24,n
    02915 5F8F      SUBI	R24,0xFF
    02916 9380 03D1 STS	n,R24
    02918 9180 03D1 LDS	R24,n
    0291A 3085      CPI	R24,5
    0291B F2A4      BLT	0x28F0
(0691)                     switch_turn("rship2");
    0291C EB00      LDI	R16,0xB0
    0291D E013      LDI	R17,3
    0291E 940E 0570 CALL	_switch_turn
(0692)                     off_bounded("rship2");
    02920 EB00      LDI	R16,0xB0
    02921 E013      LDI	R17,3
    02922 D9CB      RCALL	_off_bounded
(0693)                     state=-1;
    02923 EF8F      LDI	R24,0xFF
    02924 9380 02E9 STS	state,R24
(0694)                 }
    02926 C0CD      RJMP	0x29F4
(0695)                 else if(state==3){
    02927 9180 02E9 LDS	R24,state
    02929 3083      CPI	R24,3
    0292A F009      BEQ	0x292C
    0292B C0C8      RJMP	0x29F4
(0696)                     for(n=0;n<5;n++)
    0292C 2422      CLR	R2
    0292D 9220 03D1 STS	n,R2
    0292F C03C      RJMP	0x296C
(0697)                         if(game_set[i+i2[n]][j+j2[n]]) error=1;
    02930 90A0 03D1 LDS	R10,n
    02932 24BB      CLR	R11
    02933 FCA7      SBRC	R10,7
    02934 94B0      COM	R11
    02935 0CAA      LSL	R10
    02936 1CBB      ROL	R11
    02937 E185      LDI	R24,0x15
    02938 E091      LDI	R25,1
    02939 01F5      MOVW	R30,R10
    0293A 0FE8      ADD	R30,R24
    0293B 1FF9      ADC	R31,R25
    0293C 8020      LD	R2,Z
    0293D 8031      LDD	R3,Z+1
    0293E 9120 0151 LDS	R18,i
    02940 9130 0152 LDS	R19,i+1
    02942 0D22      ADD	R18,R2
    02943 1D33      ADC	R19,R3
    02944 E100      LDI	R16,0x10
    02945 E010      LDI	R17,0
    02946 940E 4674 CALL	empy16s
    02948 0118      MOVW	R2,R16
    02949 E587      LDI	R24,0x57
    0294A E094      LDI	R25,4
    0294B 0E28      ADD	R2,R24
    0294C 1E39      ADC	R3,R25
    0294D E18F      LDI	R24,0x1F
    0294E E091      LDI	R25,1
    0294F 01F5      MOVW	R30,R10
    02950 0FE8      ADD	R30,R24
    02951 1FF9      ADC	R31,R25
    02952 8040      LD	R4,Z
    02953 8051      LDD	R5,Z+1
    02954 91E0 0153 LDS	R30,j
    02956 91F0 0154 LDS	R31,j+1
    02958 0DE4      ADD	R30,R4
    02959 1DF5      ADC	R31,R5
    0295A 0FEE      LSL	R30
    0295B 1FFF      ROL	R31
    0295C 0DE2      ADD	R30,R2
    0295D 1DF3      ADC	R31,R3
    0295E 8020      LD	R2,Z
    0295F 8031      LDD	R3,Z+1
    02960 2022      TST	R2
    02961 F411      BNE	0x2964
    02962 2033      TST	R3
    02963 F019      BEQ	0x2967
    02964 E081      LDI	R24,1
    02965 9380 02EF STS	error,R24
    02967 9180 03D1 LDS	R24,n
    02969 5F8F      SUBI	R24,0xFF
    0296A 9380 03D1 STS	n,R24
    0296C 9180 03D1 LDS	R24,n
    0296E 3085      CPI	R24,5
    0296F F40C      BGE	0x2971
    02970 CFBF      RJMP	0x2930
(0698)                     if(!error){
    02971 9020 02EF LDS	R2,error
    02973 2022      TST	R2
    02974 F009      BEQ	0x2976
    02975 C076      RJMP	0x29EC
(0699)                         for(n=0;n<5;n++) game_set[i+i2[n]][j+j2[n]]=2;
    02976 2422      CLR	R2
    02977 9220 03D1 STS	n,R2
    02979 C037      RJMP	0x29B1
    0297A 90A0 03D1 LDS	R10,n
    0297C 24BB      CLR	R11
    0297D FCA7      SBRC	R10,7
    0297E 94B0      COM	R11
    0297F 0CAA      LSL	R10
    02980 1CBB      ROL	R11
    02981 E185      LDI	R24,0x15
    02982 E091      LDI	R25,1
    02983 01F5      MOVW	R30,R10
    02984 0FE8      ADD	R30,R24
    02985 1FF9      ADC	R31,R25
    02986 8020      LD	R2,Z
    02987 8031      LDD	R3,Z+1
    02988 9120 0151 LDS	R18,i
    0298A 9130 0152 LDS	R19,i+1
    0298C 0D22      ADD	R18,R2
    0298D 1D33      ADC	R19,R3
    0298E E100      LDI	R16,0x10
    0298F E010      LDI	R17,0
    02990 940E 4674 CALL	empy16s
    02992 0118      MOVW	R2,R16
    02993 E587      LDI	R24,0x57
    02994 E094      LDI	R25,4
    02995 0E28      ADD	R2,R24
    02996 1E39      ADC	R3,R25
    02997 E18F      LDI	R24,0x1F
    02998 E091      LDI	R25,1
    02999 01F5      MOVW	R30,R10
    0299A 0FE8      ADD	R30,R24
    0299B 1FF9      ADC	R31,R25
    0299C 8040      LD	R4,Z
    0299D 8051      LDD	R5,Z+1
    0299E 91E0 0153 LDS	R30,j
    029A0 91F0 0154 LDS	R31,j+1
    029A2 0DE4      ADD	R30,R4
    029A3 1DF5      ADC	R31,R5
    029A4 0FEE      LSL	R30
    029A5 1FFF      ROL	R31
    029A6 0DE2      ADD	R30,R2
    029A7 1DF3      ADC	R31,R3
    029A8 E082      LDI	R24,2
    029A9 E090      LDI	R25,0
    029AA 8391      STD	Z+1,R25
    029AB 8380      ST	Z,R24
    029AC 9180 03D1 LDS	R24,n
    029AE 5F8F      SUBI	R24,0xFF
    029AF 9380 03D1 STS	n,R24
    029B1 9180 03D1 LDS	R24,n
    029B3 3085      CPI	R24,5
    029B4 F40C      BGE	0x29B6
    029B5 CFC4      RJMP	0x297A
(0700)                         ship2x=i, ship2y=j;
    029B6 9020 0151 LDS	R2,i
    029B8 9030 0152 LDS	R3,i+1
    029BA 9230 0449 STS	ship2x+1,R3
    029BC 9220 0448 STS	ship2x,R2
    029BE 9020 0153 LDS	R2,j
    029C0 9030 0154 LDS	R3,j+1
    029C2 9230 0447 STS	ship2y+1,R3
    029C4 9220 0446 STS	ship2y,R2
(0701)                         i=0, j=0;
    029C6 2422      CLR	R2
    029C7 2433      CLR	R3
    029C8 9230 0152 STS	i+1,R3
    029CA 9220 0151 STS	i,R2
    029CC 9230 0154 STS	j+1,R3
    029CE 9220 0153 STS	j,R2
(0702)                         imax=1, imin=0, jmax=0, jmin=0;
    029D0 E081      LDI	R24,1
    029D1 E090      LDI	R25,0
    029D2 9390 0455 STS	imax+1,R25
    029D4 9380 0454 STS	imax,R24
    029D6 9230 0453 STS	imin+1,R3
    029D8 9220 0452 STS	imin,R2
    029DA 9230 0451 STS	jmax+1,R3
    029DC 9220 0450 STS	jmax,R2
    029DE 9230 044F STS	jmin+1,R3
    029E0 9220 044E STS	jmin,R2
(0703)                         cnt++;
    029E2 9180 02EA LDS	R24,cnt
    029E4 5F8F      SUBI	R24,0xFF
    029E5 9380 02EA STS	cnt,R24
(0704)                         delay_ms(300);
    029E7 E20C      LDI	R16,0x2C
    029E8 E011      LDI	R17,1
    029E9 940E 04B0 CALL	_delay_ms
(0705)                     }
    029EB C005      RJMP	0x29F1
(0706)                     else {
(0707)                         vibrating();
    029EC 940E 1533 CALL	_vibrating
(0708)                         error=0;
    029EE 2422      CLR	R2
    029EF 9220 02EF STS	error,R2
(0709)                     }
(0710)                     state=-1;
    029F1 EF8F      LDI	R24,0xFF
    029F2 9380 02E9 STS	state,R24
(0711)                 }
(0712)             }
    029F4 9180 02EA LDS	R24,cnt
    029F6 3081      CPI	R24,1
    029F7 F409      BNE	0x29F9
    029F8 CDB1      RJMP	0x27AA
    029F9 C257      RJMP	0x2C51
(0713)             while(cnt==2){ //ship3. 2 blocks rectangular
(0714)                 AtoD();
    029FA 940E 14EA CALL	_AtoD
(0715)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    029FC 9020 02E9 LDS	R2,state
    029FE 2022      TST	R2
    029FF F571      BNE	0x2A2E
    02A00 9140 03CF LDS	R20,val_x
    02A02 9150 03D0 LDS	R21,val_x+1
    02A04 E884      LDI	R24,0x84
    02A05 E093      LDI	R25,3
    02A06 1784      CP	R24,R20
    02A07 0795      CPC	R25,R21
    02A08 F07C      BLT	0x2A18
    02A09 3644      CPI	R20,0x64
    02A0A E0E0      LDI	R30,0
    02A0B 075E      CPC	R21,R30
    02A0C F05C      BLT	0x2A18
    02A0D 9140 03CD LDS	R20,val_y
    02A0F 9150 03CE LDS	R21,val_y+1
    02A11 1784      CP	R24,R20
    02A12 0795      CPC	R25,R21
    02A13 F024      BLT	0x2A18
    02A14 3644      CPI	R20,0x64
    02A15 E0E0      LDI	R30,0
    02A16 075E      CPC	R21,R30
    02A17 F4B4      BGE	0x2A2E
(0716)                     p_i=i, p_j=j;
    02A18 9020 0151 LDS	R2,i
    02A1A 9030 0152 LDS	R3,i+1
    02A1C 9230 02EC STS	p_i+1,R3
    02A1E 9220 02EB STS	p_i,R2
    02A20 9020 0153 LDS	R2,j
    02A22 9030 0154 LDS	R3,j+1
    02A24 9230 02EE STS	p_j+1,R3
    02A26 9220 02ED STS	p_j,R2
(0717)                     joystick_setting();
    02A28 940E 173A CALL	_joystick_setting
(0718)                     state=1;
    02A2A E081      LDI	R24,1
    02A2B 9380 02E9 STS	state,R24
(0719)                 }
    02A2D C013      RJMP	0x2A41
(0720)                 else if(!state&&(PINF&0x04)==0x00) state=2;
    02A2E 9020 02E9 LDS	R2,state
    02A30 2022      TST	R2
    02A31 F431      BNE	0x2A38
    02A32 9902      SBIC	0x00,2
    02A33 C004      RJMP	0x2A38
    02A34 E082      LDI	R24,2
    02A35 9380 02E9 STS	state,R24
    02A37 C009      RJMP	0x2A41
(0721)                 else if(!state&&(PINF&0x08)==0x00) state=3;
    02A38 9020 02E9 LDS	R2,state
    02A3A 2022      TST	R2
    02A3B F429      BNE	0x2A41
    02A3C 9903      SBIC	0x00,3
    02A3D C003      RJMP	0x2A41
    02A3E E083      LDI	R24,3
    02A3F 9380 02E9 STS	state,R24
(0722)                 if(state==-1){
    02A41 9180 02E9 LDS	R24,state
    02A43 3F8F      CPI	R24,0xFF
    02A44 F009      BEQ	0x2A46
    02A45 C0C2      RJMP	0x2B08
(0723)                     rship1(ship1x,ship1y),rship2(ship2x,ship2y);
    02A46 9120 044A LDS	R18,ship1y
    02A48 9130 044B LDS	R19,ship1y+1
    02A4A 9100 044C LDS	R16,ship1x
    02A4C 9110 044D LDS	R17,ship1x+1
    02A4E 940E 04FB CALL	_rship1
    02A50 9120 0446 LDS	R18,ship2y
    02A52 9130 0447 LDS	R19,ship2y+1
    02A54 9100 0448 LDS	R16,ship2x
    02A56 9110 0449 LDS	R17,ship2x+1
    02A58 940E 0522 CALL	_rship2
(0724)                     for(n=0;n<2;n++){
    02A5A 2422      CLR	R2
    02A5B 9220 03D1 STS	n,R2
    02A5D C0A5      RJMP	0x2B03
(0725)                         if(game_set[i+i3[n]][j+j3[n]]) {
    02A5E 90A0 03D1 LDS	R10,n
    02A60 24BB      CLR	R11
    02A61 FCA7      SBRC	R10,7
    02A62 94B0      COM	R11
    02A63 0CAA      LSL	R10
    02A64 1CBB      ROL	R11
    02A65 E289      LDI	R24,0x29
    02A66 E091      LDI	R25,1
    02A67 01F5      MOVW	R30,R10
    02A68 0FE8      ADD	R30,R24
    02A69 1FF9      ADC	R31,R25
    02A6A 8020      LD	R2,Z
    02A6B 8031      LDD	R3,Z+1
    02A6C 9120 0151 LDS	R18,i
    02A6E 9130 0152 LDS	R19,i+1
    02A70 0D22      ADD	R18,R2
    02A71 1D33      ADC	R19,R3
    02A72 E100      LDI	R16,0x10
    02A73 E010      LDI	R17,0
    02A74 940E 4674 CALL	empy16s
    02A76 0118      MOVW	R2,R16
    02A77 E587      LDI	R24,0x57
    02A78 E094      LDI	R25,4
    02A79 0E28      ADD	R2,R24
    02A7A 1E39      ADC	R3,R25
    02A7B E383      LDI	R24,0x33
    02A7C E091      LDI	R25,1
    02A7D 01F5      MOVW	R30,R10
    02A7E 0FE8      ADD	R30,R24
    02A7F 1FF9      ADC	R31,R25
    02A80 8040      LD	R4,Z
    02A81 8051      LDD	R5,Z+1
    02A82 91E0 0153 LDS	R30,j
    02A84 91F0 0154 LDS	R31,j+1
    02A86 0DE4      ADD	R30,R4
    02A87 1DF5      ADC	R31,R5
    02A88 0FEE      LSL	R30
    02A89 1FFF      ROL	R31
    02A8A 0DE2      ADD	R30,R2
    02A8B 1DF3      ADC	R31,R3
    02A8C 8020      LD	R2,Z
    02A8D 8031      LDD	R3,Z+1
    02A8E 2022      TST	R2
    02A8F F419      BNE	0x2A93
    02A90 2033      TST	R3
    02A91 F409      BNE	0x2A93
    02A92 C045      RJMP	0x2AD8
(0726)                             rGLCD_cursor_off(i+i3[n],j+j3[n]);
    02A93 90A0 03D1 LDS	R10,n
    02A95 24BB      CLR	R11
    02A96 FCA7      SBRC	R10,7
    02A97 94B0      COM	R11
    02A98 0CAA      LSL	R10
    02A99 1CBB      ROL	R11
    02A9A 01F5      MOVW	R30,R10
    02A9B 0FE8      ADD	R30,R24
    02A9C 1FF9      ADC	R31,R25
    02A9D 8020      LD	R2,Z
    02A9E 8031      LDD	R3,Z+1
    02A9F 9120 0153 LDS	R18,j
    02AA1 9130 0154 LDS	R19,j+1
    02AA3 0D22      ADD	R18,R2
    02AA4 1D33      ADC	R19,R3
    02AA5 E289      LDI	R24,0x29
    02AA6 E091      LDI	R25,1
    02AA7 01F5      MOVW	R30,R10
    02AA8 0FE8      ADD	R30,R24
    02AA9 1FF9      ADC	R31,R25
    02AAA 8020      LD	R2,Z
    02AAB 8031      LDD	R3,Z+1
    02AAC 9100 0151 LDS	R16,i
    02AAE 9110 0152 LDS	R17,i+1
    02AB0 0D02      ADD	R16,R2
    02AB1 1D13      ADC	R17,R3
    02AB2 940E 0749 CALL	_rGLCD_cursor_off
(0727)                             rGLCD_fail(i+i3[n],j+j3[n]);
    02AB4 90A0 03D1 LDS	R10,n
    02AB6 24BB      CLR	R11
    02AB7 FCA7      SBRC	R10,7
    02AB8 94B0      COM	R11
    02AB9 0CAA      LSL	R10
    02ABA 1CBB      ROL	R11
    02ABB E383      LDI	R24,0x33
    02ABC E091      LDI	R25,1
    02ABD 01F5      MOVW	R30,R10
    02ABE 0FE8      ADD	R30,R24
    02ABF 1FF9      ADC	R31,R25
    02AC0 8020      LD	R2,Z
    02AC1 8031      LDD	R3,Z+1
    02AC2 9120 0153 LDS	R18,j
    02AC4 9130 0154 LDS	R19,j+1
    02AC6 0D22      ADD	R18,R2
    02AC7 1D33      ADC	R19,R3
    02AC8 E289      LDI	R24,0x29
    02AC9 E091      LDI	R25,1
    02ACA 01F5      MOVW	R30,R10
    02ACB 0FE8      ADD	R30,R24
    02ACC 1FF9      ADC	R31,R25
    02ACD 8020      LD	R2,Z
    02ACE 8031      LDD	R3,Z+1
    02ACF 9100 0151 LDS	R16,i
    02AD1 9110 0152 LDS	R17,i+1
    02AD3 0D02      ADD	R16,R2
    02AD4 1D13      ADC	R17,R3
    02AD5 940E 09A9 CALL	_rGLCD_fail
(0728)                         }
    02AD7 C023      RJMP	0x2AFB
(0729)                         else rGLCD_1block(i+i3[n],j+j3[n]);
    02AD8 90A0 03D1 LDS	R10,n
    02ADA 24BB      CLR	R11
    02ADB FCA7      SBRC	R10,7
    02ADC 94B0      COM	R11
    02ADD 0CAA      LSL	R10
    02ADE 1CBB      ROL	R11
    02ADF E383      LDI	R24,0x33
    02AE0 E091      LDI	R25,1
    02AE1 01F5      MOVW	R30,R10
    02AE2 0FE8      ADD	R30,R24
    02AE3 1FF9      ADC	R31,R25
    02AE4 8020      LD	R2,Z
    02AE5 8031      LDD	R3,Z+1
    02AE6 9120 0153 LDS	R18,j
    02AE8 9130 0154 LDS	R19,j+1
    02AEA 0D22      ADD	R18,R2
    02AEB 1D33      ADC	R19,R3
    02AEC E289      LDI	R24,0x29
    02AED E091      LDI	R25,1
    02AEE 01F5      MOVW	R30,R10
    02AEF 0FE8      ADD	R30,R24
    02AF0 1FF9      ADC	R31,R25
    02AF1 8020      LD	R2,Z
    02AF2 8031      LDD	R3,Z+1
    02AF3 9100 0151 LDS	R16,i
    02AF5 9110 0152 LDS	R17,i+1
    02AF7 0D02      ADD	R16,R2
    02AF8 1D13      ADC	R17,R3
    02AF9 940E 04C7 CALL	_rGLCD_1block
(0730)                         state=0;
    02AFB 2422      CLR	R2
    02AFC 9220 02E9 STS	state,R2
(0731)                     }
    02AFE 9180 03D1 LDS	R24,n
    02B00 5F8F      SUBI	R24,0xFF
    02B01 9380 03D1 STS	n,R24
    02B03 9180 03D1 LDS	R24,n
    02B05 3082      CPI	R24,2
    02B06 F40C      BGE	0x2B08
    02B07 CF56      RJMP	0x2A5E
(0732)                 }
(0733)                 if(state==1){
    02B08 9180 02E9 LDS	R24,state
    02B0A 3081      CPI	R24,1
    02B0B F009      BEQ	0x2B0D
    02B0C C034      RJMP	0x2B41
(0734)                     for(n=0;n<2;n++)
    02B0D 2422      CLR	R2
    02B0E 9220 03D1 STS	n,R2
    02B10 C028      RJMP	0x2B39
(0735)                         rGLCD_cursor_off(p_i+i3[n],p_j+j3[n]);
    02B11 90A0 03D1 LDS	R10,n
    02B13 24BB      CLR	R11
    02B14 FCA7      SBRC	R10,7
    02B15 94B0      COM	R11
    02B16 0CAA      LSL	R10
    02B17 1CBB      ROL	R11
    02B18 E383      LDI	R24,0x33
    02B19 E091      LDI	R25,1
    02B1A 01F5      MOVW	R30,R10
    02B1B 0FE8      ADD	R30,R24
    02B1C 1FF9      ADC	R31,R25
    02B1D 8020      LD	R2,Z
    02B1E 8031      LDD	R3,Z+1
    02B1F 9120 02ED LDS	R18,p_j
    02B21 9130 02EE LDS	R19,p_j+1
    02B23 0D22      ADD	R18,R2
    02B24 1D33      ADC	R19,R3
    02B25 E289      LDI	R24,0x29
    02B26 E091      LDI	R25,1
    02B27 01F5      MOVW	R30,R10
    02B28 0FE8      ADD	R30,R24
    02B29 1FF9      ADC	R31,R25
    02B2A 8020      LD	R2,Z
    02B2B 8031      LDD	R3,Z+1
    02B2C 9100 02EB LDS	R16,p_i
    02B2E 9110 02EC LDS	R17,p_i+1
    02B30 0D02      ADD	R16,R2
    02B31 1D13      ADC	R17,R3
    02B32 940E 0749 CALL	_rGLCD_cursor_off
    02B34 9180 03D1 LDS	R24,n
    02B36 5F8F      SUBI	R24,0xFF
    02B37 9380 03D1 STS	n,R24
    02B39 9180 03D1 LDS	R24,n
    02B3B 3082      CPI	R24,2
    02B3C F2A4      BLT	0x2B11
(0736)                     state=-1;
    02B3D EF8F      LDI	R24,0xFF
    02B3E 9380 02E9 STS	state,R24
(0737)                 }
    02B40 C110      RJMP	0x2C51
(0738)                 else if(state==2){
    02B41 9180 02E9 LDS	R24,state
    02B43 3082      CPI	R24,2
    02B44 F009      BEQ	0x2B46
    02B45 C03C      RJMP	0x2B82
(0739)                     for(n=0;n<2;n++)
    02B46 2422      CLR	R2
    02B47 9220 03D1 STS	n,R2
    02B49 C028      RJMP	0x2B72
(0740)                         rGLCD_cursor_off(i+i3[n],j+j3[n]);
    02B4A 90A0 03D1 LDS	R10,n
    02B4C 24BB      CLR	R11
    02B4D FCA7      SBRC	R10,7
    02B4E 94B0      COM	R11
    02B4F 0CAA      LSL	R10
    02B50 1CBB      ROL	R11
    02B51 E383      LDI	R24,0x33
    02B52 E091      LDI	R25,1
    02B53 01F5      MOVW	R30,R10
    02B54 0FE8      ADD	R30,R24
    02B55 1FF9      ADC	R31,R25
    02B56 8020      LD	R2,Z
    02B57 8031      LDD	R3,Z+1
    02B58 9120 0153 LDS	R18,j
    02B5A 9130 0154 LDS	R19,j+1
    02B5C 0D22      ADD	R18,R2
    02B5D 1D33      ADC	R19,R3
    02B5E E289      LDI	R24,0x29
    02B5F E091      LDI	R25,1
    02B60 01F5      MOVW	R30,R10
    02B61 0FE8      ADD	R30,R24
    02B62 1FF9      ADC	R31,R25
    02B63 8020      LD	R2,Z
    02B64 8031      LDD	R3,Z+1
    02B65 9100 0151 LDS	R16,i
    02B67 9110 0152 LDS	R17,i+1
    02B69 0D02      ADD	R16,R2
    02B6A 1D13      ADC	R17,R3
    02B6B 940E 0749 CALL	_rGLCD_cursor_off
    02B6D 9180 03D1 LDS	R24,n
    02B6F 5F8F      SUBI	R24,0xFF
    02B70 9380 03D1 STS	n,R24
    02B72 9180 03D1 LDS	R24,n
    02B74 3082      CPI	R24,2
    02B75 F2A4      BLT	0x2B4A
(0741)                     switch_turn("rship3");
    02B76 E203      LDI	R16,0x23
    02B77 E013      LDI	R17,3
    02B78 940E 0570 CALL	_switch_turn
(0742)                     off_bounded("rship3");
    02B7A E203      LDI	R16,0x23
    02B7B E013      LDI	R17,3
    02B7C 940E 22EE CALL	_off_bounded
(0743)                     state=-1;
    02B7E EF8F      LDI	R24,0xFF
    02B7F 9380 02E9 STS	state,R24
(0744)                 }
    02B81 C0CF      RJMP	0x2C51
(0745)                 else if(state==3){
    02B82 9180 02E9 LDS	R24,state
    02B84 3083      CPI	R24,3
    02B85 F009      BEQ	0x2B87
    02B86 C0CA      RJMP	0x2C51
(0746)                     for(n=0;n<2;n++)
    02B87 2422      CLR	R2
    02B88 9220 03D1 STS	n,R2
    02B8A C03C      RJMP	0x2BC7
(0747)                         if(game_set[i+i3[n]][j+j3[n]]) error=1;
    02B8B 90A0 03D1 LDS	R10,n
    02B8D 24BB      CLR	R11
    02B8E FCA7      SBRC	R10,7
    02B8F 94B0      COM	R11
    02B90 0CAA      LSL	R10
    02B91 1CBB      ROL	R11
    02B92 E289      LDI	R24,0x29
    02B93 E091      LDI	R25,1
    02B94 01F5      MOVW	R30,R10
    02B95 0FE8      ADD	R30,R24
    02B96 1FF9      ADC	R31,R25
    02B97 8020      LD	R2,Z
    02B98 8031      LDD	R3,Z+1
    02B99 9120 0151 LDS	R18,i
    02B9B 9130 0152 LDS	R19,i+1
    02B9D 0D22      ADD	R18,R2
    02B9E 1D33      ADC	R19,R3
    02B9F E100      LDI	R16,0x10
    02BA0 E010      LDI	R17,0
    02BA1 940E 4674 CALL	empy16s
    02BA3 0118      MOVW	R2,R16
    02BA4 E587      LDI	R24,0x57
    02BA5 E094      LDI	R25,4
    02BA6 0E28      ADD	R2,R24
    02BA7 1E39      ADC	R3,R25
    02BA8 E383      LDI	R24,0x33
    02BA9 E091      LDI	R25,1
    02BAA 01F5      MOVW	R30,R10
    02BAB 0FE8      ADD	R30,R24
    02BAC 1FF9      ADC	R31,R25
    02BAD 8040      LD	R4,Z
    02BAE 8051      LDD	R5,Z+1
    02BAF 91E0 0153 LDS	R30,j
    02BB1 91F0 0154 LDS	R31,j+1
    02BB3 0DE4      ADD	R30,R4
    02BB4 1DF5      ADC	R31,R5
    02BB5 0FEE      LSL	R30
    02BB6 1FFF      ROL	R31
    02BB7 0DE2      ADD	R30,R2
    02BB8 1DF3      ADC	R31,R3
    02BB9 8020      LD	R2,Z
    02BBA 8031      LDD	R3,Z+1
    02BBB 2022      TST	R2
    02BBC F411      BNE	0x2BBF
    02BBD 2033      TST	R3
    02BBE F019      BEQ	0x2BC2
    02BBF E081      LDI	R24,1
    02BC0 9380 02EF STS	error,R24
    02BC2 9180 03D1 LDS	R24,n
    02BC4 5F8F      SUBI	R24,0xFF
    02BC5 9380 03D1 STS	n,R24
    02BC7 9180 03D1 LDS	R24,n
    02BC9 3082      CPI	R24,2
    02BCA F40C      BGE	0x2BCC
    02BCB CFBF      RJMP	0x2B8B
(0748)                     if(!error){
    02BCC 9020 02EF LDS	R2,error
    02BCE 2022      TST	R2
    02BCF F009      BEQ	0x2BD1
    02BD0 C078      RJMP	0x2C49
(0749)                         for(n=0;n<2;n++) game_set[i+i3[n]][j+j3[n]]=3;
    02BD1 2422      CLR	R2
    02BD2 9220 03D1 STS	n,R2
    02BD4 C037      RJMP	0x2C0C
    02BD5 90A0 03D1 LDS	R10,n
    02BD7 24BB      CLR	R11
    02BD8 FCA7      SBRC	R10,7
    02BD9 94B0      COM	R11
    02BDA 0CAA      LSL	R10
    02BDB 1CBB      ROL	R11
    02BDC E289      LDI	R24,0x29
    02BDD E091      LDI	R25,1
    02BDE 01F5      MOVW	R30,R10
    02BDF 0FE8      ADD	R30,R24
    02BE0 1FF9      ADC	R31,R25
    02BE1 8020      LD	R2,Z
    02BE2 8031      LDD	R3,Z+1
    02BE3 9120 0151 LDS	R18,i
    02BE5 9130 0152 LDS	R19,i+1
    02BE7 0D22      ADD	R18,R2
    02BE8 1D33      ADC	R19,R3
    02BE9 E100      LDI	R16,0x10
    02BEA E010      LDI	R17,0
    02BEB 940E 4674 CALL	empy16s
    02BED 0118      MOVW	R2,R16
    02BEE E587      LDI	R24,0x57
    02BEF E094      LDI	R25,4
    02BF0 0E28      ADD	R2,R24
    02BF1 1E39      ADC	R3,R25
    02BF2 E383      LDI	R24,0x33
    02BF3 E091      LDI	R25,1
    02BF4 01F5      MOVW	R30,R10
    02BF5 0FE8      ADD	R30,R24
    02BF6 1FF9      ADC	R31,R25
    02BF7 8040      LD	R4,Z
    02BF8 8051      LDD	R5,Z+1
    02BF9 91E0 0153 LDS	R30,j
    02BFB 91F0 0154 LDS	R31,j+1
    02BFD 0DE4      ADD	R30,R4
    02BFE 1DF5      ADC	R31,R5
    02BFF 0FEE      LSL	R30
    02C00 1FFF      ROL	R31
    02C01 0DE2      ADD	R30,R2
    02C02 1DF3      ADC	R31,R3
    02C03 E083      LDI	R24,3
    02C04 E090      LDI	R25,0
    02C05 8391      STD	Z+1,R25
    02C06 8380      ST	Z,R24
    02C07 9180 03D1 LDS	R24,n
    02C09 5F8F      SUBI	R24,0xFF
    02C0A 9380 03D1 STS	n,R24
    02C0C 9180 03D1 LDS	R24,n
    02C0E 3082      CPI	R24,2
    02C0F F40C      BGE	0x2C11
    02C10 CFC4      RJMP	0x2BD5
(0750)                         ship3x=i, ship3y=j;
    02C11 9020 0151 LDS	R2,i
    02C13 9030 0152 LDS	R3,i+1
    02C15 9230 0445 STS	ship3x+1,R3
    02C17 9220 0444 STS	ship3x,R2
    02C19 9020 0153 LDS	R2,j
    02C1B 9030 0154 LDS	R3,j+1
    02C1D 9230 0443 STS	ship3y+1,R3
    02C1F 9220 0442 STS	ship3y,R2
(0751)                         i=0, j=1;
    02C21 2422      CLR	R2
    02C22 2433      CLR	R3
    02C23 9230 0152 STS	i+1,R3
    02C25 9220 0151 STS	i,R2
    02C27 E081      LDI	R24,1
    02C28 E090      LDI	R25,0
    02C29 9390 0154 STS	j+1,R25
    02C2B 9380 0153 STS	j,R24
(0752)                         imax=1, imin=0, jmax=0, jmin=-1;
    02C2D 9390 0455 STS	imax+1,R25
    02C2F 9380 0454 STS	imax,R24
    02C31 9230 0453 STS	imin+1,R3
    02C33 9220 0452 STS	imin,R2
    02C35 9230 0451 STS	jmax+1,R3
    02C37 9220 0450 STS	jmax,R2
    02C39 EF8F      LDI	R24,0xFF
    02C3A EF9F      LDI	R25,0xFF
    02C3B 9390 044F STS	jmin+1,R25
    02C3D 9380 044E STS	jmin,R24
(0753)                         cnt++;
    02C3F 9180 02EA LDS	R24,cnt
    02C41 5F8F      SUBI	R24,0xFF
    02C42 9380 02EA STS	cnt,R24
(0754)                         delay_ms(300);
    02C44 E20C      LDI	R16,0x2C
    02C45 E011      LDI	R17,1
    02C46 940E 04B0 CALL	_delay_ms
(0755)                     }
    02C48 C005      RJMP	0x2C4E
(0756)                     else {
(0757)                         vibrating();
    02C49 940E 1533 CALL	_vibrating
(0758)                         error=0;
    02C4B 2422      CLR	R2
    02C4C 9220 02EF STS	error,R2
(0759)                     }
(0760)                     state=-1;
    02C4E EF8F      LDI	R24,0xFF
    02C4F 9380 02E9 STS	state,R24
(0761)                 }
(0762)             }
    02C51 9180 02EA LDS	R24,cnt
    02C53 3082      CPI	R24,2
    02C54 F409      BNE	0x2C56
    02C55 CDA4      RJMP	0x29FA
    02C56 C259      RJMP	0x2EB0
(0763)             while(cnt==3){ //ship4. 4 blocks square
(0764)                 AtoD();
    02C57 940E 14EA CALL	_AtoD
(0765)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    02C59 9020 02E9 LDS	R2,state
    02C5B 2022      TST	R2
    02C5C F571      BNE	0x2C8B
    02C5D 9140 03CF LDS	R20,val_x
    02C5F 9150 03D0 LDS	R21,val_x+1
    02C61 E884      LDI	R24,0x84
    02C62 E093      LDI	R25,3
    02C63 1784      CP	R24,R20
    02C64 0795      CPC	R25,R21
    02C65 F07C      BLT	0x2C75
    02C66 3644      CPI	R20,0x64
    02C67 E0E0      LDI	R30,0
    02C68 075E      CPC	R21,R30
    02C69 F05C      BLT	0x2C75
    02C6A 9140 03CD LDS	R20,val_y
    02C6C 9150 03CE LDS	R21,val_y+1
    02C6E 1784      CP	R24,R20
    02C6F 0795      CPC	R25,R21
    02C70 F024      BLT	0x2C75
    02C71 3644      CPI	R20,0x64
    02C72 E0E0      LDI	R30,0
    02C73 075E      CPC	R21,R30
    02C74 F4B4      BGE	0x2C8B
(0766)                     p_i=i, p_j=j;
    02C75 9020 0151 LDS	R2,i
    02C77 9030 0152 LDS	R3,i+1
    02C79 9230 02EC STS	p_i+1,R3
    02C7B 9220 02EB STS	p_i,R2
    02C7D 9020 0153 LDS	R2,j
    02C7F 9030 0154 LDS	R3,j+1
    02C81 9230 02EE STS	p_j+1,R3
    02C83 9220 02ED STS	p_j,R2
(0767)                     joystick_setting();
    02C85 940E 173A CALL	_joystick_setting
(0768)                     state=1;//joystick select
    02C87 E081      LDI	R24,1
    02C88 9380 02E9 STS	state,R24
(0769)                 }
    02C8A C009      RJMP	0x2C94
(0770)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    02C8B 9020 02E9 LDS	R2,state
    02C8D 2022      TST	R2
    02C8E F429      BNE	0x2C94
    02C8F 9903      SBIC	0x00,3
    02C90 C003      RJMP	0x2C94
    02C91 E082      LDI	R24,2
    02C92 9380 02E9 STS	state,R24
(0771)                 if(state==-1){
    02C94 9180 02E9 LDS	R24,state
    02C96 3F8F      CPI	R24,0xFF
    02C97 F009      BEQ	0x2C99
    02C98 C0CD      RJMP	0x2D66
(0772)                     rship1(ship1x,ship1y),rship2(ship2x,ship2y),rship3(ship3x,ship3y);
    02C99 9120 044A LDS	R18,ship1y
    02C9B 9130 044B LDS	R19,ship1y+1
    02C9D 9100 044C LDS	R16,ship1x
    02C9F 9110 044D LDS	R17,ship1x+1
    02CA1 940E 04FB CALL	_rship1
    02CA3 9120 0446 LDS	R18,ship2y
    02CA5 9130 0447 LDS	R19,ship2y+1
    02CA7 9100 0448 LDS	R16,ship2x
    02CA9 9110 0449 LDS	R17,ship2x+1
    02CAB 940E 0522 CALL	_rship2
    02CAD 9120 0442 LDS	R18,ship3y
    02CAF 9130 0443 LDS	R19,ship3y+1
    02CB1 9100 0444 LDS	R16,ship3x
    02CB3 9110 0445 LDS	R17,ship3x+1
    02CB5 940E 0549 CALL	_rship3
(0773)                     for(n=0;n<4;n++){
    02CB7 2422      CLR	R2
    02CB8 9220 03D1 STS	n,R2
    02CBA C0A5      RJMP	0x2D60
(0774)                         if(game_set[i+i4[n]][j+j4[n]]) {
    02CBB 90A0 03D1 LDS	R10,n
    02CBD 24BB      CLR	R11
    02CBE FCA7      SBRC	R10,7
    02CBF 94B0      COM	R11
    02CC0 0CAA      LSL	R10
    02CC1 1CBB      ROL	R11
    02CC2 E387      LDI	R24,0x37
    02CC3 E091      LDI	R25,1
    02CC4 01F5      MOVW	R30,R10
    02CC5 0FE8      ADD	R30,R24
    02CC6 1FF9      ADC	R31,R25
    02CC7 8020      LD	R2,Z
    02CC8 8031      LDD	R3,Z+1
    02CC9 9120 0151 LDS	R18,i
    02CCB 9130 0152 LDS	R19,i+1
    02CCD 0D22      ADD	R18,R2
    02CCE 1D33      ADC	R19,R3
    02CCF E100      LDI	R16,0x10
    02CD0 E010      LDI	R17,0
    02CD1 940E 4674 CALL	empy16s
    02CD3 0118      MOVW	R2,R16
    02CD4 E587      LDI	R24,0x57
    02CD5 E094      LDI	R25,4
    02CD6 0E28      ADD	R2,R24
    02CD7 1E39      ADC	R3,R25
    02CD8 E481      LDI	R24,0x41
    02CD9 E091      LDI	R25,1
    02CDA 01F5      MOVW	R30,R10
    02CDB 0FE8      ADD	R30,R24
    02CDC 1FF9      ADC	R31,R25
    02CDD 8040      LD	R4,Z
    02CDE 8051      LDD	R5,Z+1
    02CDF 91E0 0153 LDS	R30,j
    02CE1 91F0 0154 LDS	R31,j+1
    02CE3 0DE4      ADD	R30,R4
    02CE4 1DF5      ADC	R31,R5
    02CE5 0FEE      LSL	R30
    02CE6 1FFF      ROL	R31
    02CE7 0DE2      ADD	R30,R2
    02CE8 1DF3      ADC	R31,R3
    02CE9 8020      LD	R2,Z
    02CEA 8031      LDD	R3,Z+1
    02CEB 2022      TST	R2
    02CEC F419      BNE	0x2CF0
    02CED 2033      TST	R3
    02CEE F409      BNE	0x2CF0
    02CEF C045      RJMP	0x2D35
(0775)                             rGLCD_cursor_off(i+i4[n],j+j4[n]);
    02CF0 90A0 03D1 LDS	R10,n
    02CF2 24BB      CLR	R11
    02CF3 FCA7      SBRC	R10,7
    02CF4 94B0      COM	R11
    02CF5 0CAA      LSL	R10
    02CF6 1CBB      ROL	R11
    02CF7 01F5      MOVW	R30,R10
    02CF8 0FE8      ADD	R30,R24
    02CF9 1FF9      ADC	R31,R25
    02CFA 8020      LD	R2,Z
    02CFB 8031      LDD	R3,Z+1
    02CFC 9120 0153 LDS	R18,j
    02CFE 9130 0154 LDS	R19,j+1
    02D00 0D22      ADD	R18,R2
    02D01 1D33      ADC	R19,R3
    02D02 E387      LDI	R24,0x37
    02D03 E091      LDI	R25,1
    02D04 01F5      MOVW	R30,R10
    02D05 0FE8      ADD	R30,R24
    02D06 1FF9      ADC	R31,R25
    02D07 8020      LD	R2,Z
    02D08 8031      LDD	R3,Z+1
    02D09 9100 0151 LDS	R16,i
    02D0B 9110 0152 LDS	R17,i+1
    02D0D 0D02      ADD	R16,R2
    02D0E 1D13      ADC	R17,R3
    02D0F 940E 0749 CALL	_rGLCD_cursor_off
(0776)                             rGLCD_fail(i+i4[n],j+j4[n]);
    02D11 90A0 03D1 LDS	R10,n
    02D13 24BB      CLR	R11
    02D14 FCA7      SBRC	R10,7
    02D15 94B0      COM	R11
    02D16 0CAA      LSL	R10
    02D17 1CBB      ROL	R11
    02D18 E481      LDI	R24,0x41
    02D19 E091      LDI	R25,1
    02D1A 01F5      MOVW	R30,R10
    02D1B 0FE8      ADD	R30,R24
    02D1C 1FF9      ADC	R31,R25
    02D1D 8020      LD	R2,Z
    02D1E 8031      LDD	R3,Z+1
    02D1F 9120 0153 LDS	R18,j
    02D21 9130 0154 LDS	R19,j+1
    02D23 0D22      ADD	R18,R2
    02D24 1D33      ADC	R19,R3
    02D25 E387      LDI	R24,0x37
    02D26 E091      LDI	R25,1
    02D27 01F5      MOVW	R30,R10
    02D28 0FE8      ADD	R30,R24
    02D29 1FF9      ADC	R31,R25
    02D2A 8020      LD	R2,Z
    02D2B 8031      LDD	R3,Z+1
    02D2C 9100 0151 LDS	R16,i
    02D2E 9110 0152 LDS	R17,i+1
    02D30 0D02      ADD	R16,R2
    02D31 1D13      ADC	R17,R3
    02D32 940E 09A9 CALL	_rGLCD_fail
(0777)                         }
    02D34 C023      RJMP	0x2D58
(0778)                         else rGLCD_1block(i+i4[n],j+j4[n]);
    02D35 90A0 03D1 LDS	R10,n
    02D37 24BB      CLR	R11
    02D38 FCA7      SBRC	R10,7
    02D39 94B0      COM	R11
    02D3A 0CAA      LSL	R10
    02D3B 1CBB      ROL	R11
    02D3C E481      LDI	R24,0x41
    02D3D E091      LDI	R25,1
    02D3E 01F5      MOVW	R30,R10
    02D3F 0FE8      ADD	R30,R24
    02D40 1FF9      ADC	R31,R25
    02D41 8020      LD	R2,Z
    02D42 8031      LDD	R3,Z+1
    02D43 9120 0153 LDS	R18,j
    02D45 9130 0154 LDS	R19,j+1
    02D47 0D22      ADD	R18,R2
    02D48 1D33      ADC	R19,R3
    02D49 E387      LDI	R24,0x37
    02D4A E091      LDI	R25,1
    02D4B 01F5      MOVW	R30,R10
    02D4C 0FE8      ADD	R30,R24
    02D4D 1FF9      ADC	R31,R25
    02D4E 8020      LD	R2,Z
    02D4F 8031      LDD	R3,Z+1
    02D50 9100 0151 LDS	R16,i
    02D52 9110 0152 LDS	R17,i+1
    02D54 0D02      ADD	R16,R2
    02D55 1D13      ADC	R17,R3
    02D56 940E 04C7 CALL	_rGLCD_1block
(0779)                         state=0;
    02D58 2422      CLR	R2
    02D59 9220 02E9 STS	state,R2
(0780)                     }
    02D5B 9180 03D1 LDS	R24,n
    02D5D 5F8F      SUBI	R24,0xFF
    02D5E 9380 03D1 STS	n,R24
    02D60 9180 03D1 LDS	R24,n
    02D62 3084      CPI	R24,4
    02D63 F40C      BGE	0x2D65
    02D64 CF56      RJMP	0x2CBB
(0781)                 }
    02D65 C14A      RJMP	0x2EB0
(0782)                 else if(state==1){
    02D66 9180 02E9 LDS	R24,state
    02D68 3081      CPI	R24,1
    02D69 F009      BEQ	0x2D6B
    02D6A C07A      RJMP	0x2DE5
(0783)                     for(n=0;n<4;n++)
    02D6B 2422      CLR	R2
    02D6C 9220 03D1 STS	n,R2
    02D6E C028      RJMP	0x2D97
(0784)                         rGLCD_cursor_off(p_i+i4[n],p_j+j4[n]);
    02D6F 90A0 03D1 LDS	R10,n
    02D71 24BB      CLR	R11
    02D72 FCA7      SBRC	R10,7
    02D73 94B0      COM	R11
    02D74 0CAA      LSL	R10
    02D75 1CBB      ROL	R11
    02D76 E481      LDI	R24,0x41
    02D77 E091      LDI	R25,1
    02D78 01F5      MOVW	R30,R10
    02D79 0FE8      ADD	R30,R24
    02D7A 1FF9      ADC	R31,R25
    02D7B 8020      LD	R2,Z
    02D7C 8031      LDD	R3,Z+1
    02D7D 9120 02ED LDS	R18,p_j
    02D7F 9130 02EE LDS	R19,p_j+1
    02D81 0D22      ADD	R18,R2
    02D82 1D33      ADC	R19,R3
    02D83 E387      LDI	R24,0x37
    02D84 E091      LDI	R25,1
    02D85 01F5      MOVW	R30,R10
    02D86 0FE8      ADD	R30,R24
    02D87 1FF9      ADC	R31,R25
    02D88 8020      LD	R2,Z
    02D89 8031      LDD	R3,Z+1
    02D8A 9100 02EB LDS	R16,p_i
    02D8C 9110 02EC LDS	R17,p_i+1
    02D8E 0D02      ADD	R16,R2
    02D8F 1D13      ADC	R17,R3
    02D90 940E 0749 CALL	_rGLCD_cursor_off
    02D92 9180 03D1 LDS	R24,n
    02D94 5F8F      SUBI	R24,0xFF
    02D95 9380 03D1 STS	n,R24
    02D97 9180 03D1 LDS	R24,n
    02D99 3084      CPI	R24,4
    02D9A F2A4      BLT	0x2D6F
(0785)                     if(i+imax>7||i+imin<0||j+jmax>7||j+jmin<0) i=p_i, j=p_j;
    02D9B 90A0 0151 LDS	R10,i
    02D9D 90B0 0152 LDS	R11,i+1
    02D9F 9020 0454 LDS	R2,imax
    02DA1 9030 0455 LDS	R3,imax+1
    02DA3 0125      MOVW	R4,R10
    02DA4 0C42      ADD	R4,R2
    02DA5 1C53      ADC	R5,R3
    02DA6 E087      LDI	R24,7
    02DA7 E090      LDI	R25,0
    02DA8 1584      CP	R24,R4
    02DA9 0595      CPC	R25,R5
    02DAA F134      BLT	0x2DD1
    02DAB 9020 0452 LDS	R2,imin
    02DAD 9030 0453 LDS	R3,imin+1
    02DAF 01C5      MOVW	R24,R10
    02DB0 0D82      ADD	R24,R2
    02DB1 1D93      ADC	R25,R3
    02DB2 3080      CPI	R24,0
    02DB3 E0E0      LDI	R30,0
    02DB4 079E      CPC	R25,R30
    02DB5 F0DC      BLT	0x2DD1
    02DB6 90A0 0153 LDS	R10,j
    02DB8 90B0 0154 LDS	R11,j+1
    02DBA 9020 0450 LDS	R2,jmax
    02DBC 9030 0451 LDS	R3,jmax+1
    02DBE 0125      MOVW	R4,R10
    02DBF 0C42      ADD	R4,R2
    02DC0 1C53      ADC	R5,R3
    02DC1 E087      LDI	R24,7
    02DC2 E090      LDI	R25,0
    02DC3 1584      CP	R24,R4
    02DC4 0595      CPC	R25,R5
    02DC5 F05C      BLT	0x2DD1
    02DC6 9020 044E LDS	R2,jmin
    02DC8 9030 044F LDS	R3,jmin+1
    02DCA 01C5      MOVW	R24,R10
    02DCB 0D82      ADD	R24,R2
    02DCC 1D93      ADC	R25,R3
    02DCD 3080      CPI	R24,0
    02DCE E0E0      LDI	R30,0
    02DCF 079E      CPC	R25,R30
    02DD0 F484      BGE	0x2DE1
    02DD1 9020 02EB LDS	R2,p_i
    02DD3 9030 02EC LDS	R3,p_i+1
    02DD5 9230 0152 STS	i+1,R3
    02DD7 9220 0151 STS	i,R2
    02DD9 9020 02ED LDS	R2,p_j
    02DDB 9030 02EE LDS	R3,p_j+1
    02DDD 9230 0154 STS	j+1,R3
    02DDF 9220 0153 STS	j,R2
(0786)                     state=-1;
    02DE1 EF8F      LDI	R24,0xFF
    02DE2 9380 02E9 STS	state,R24
(0787)                 }
    02DE4 C0CB      RJMP	0x2EB0
(0788)                 else if(state==2){
    02DE5 9180 02E9 LDS	R24,state
    02DE7 3082      CPI	R24,2
    02DE8 F009      BEQ	0x2DEA
    02DE9 C0C6      RJMP	0x2EB0
(0789)                     for(n=0;n<4;n++)
    02DEA 2422      CLR	R2
    02DEB 9220 03D1 STS	n,R2
    02DED C03C      RJMP	0x2E2A
(0790)                         if(game_set[i+i4[n]][j+j4[n]]) error=1;
    02DEE 90A0 03D1 LDS	R10,n
    02DF0 24BB      CLR	R11
    02DF1 FCA7      SBRC	R10,7
    02DF2 94B0      COM	R11
    02DF3 0CAA      LSL	R10
    02DF4 1CBB      ROL	R11
    02DF5 E387      LDI	R24,0x37
    02DF6 E091      LDI	R25,1
    02DF7 01F5      MOVW	R30,R10
    02DF8 0FE8      ADD	R30,R24
    02DF9 1FF9      ADC	R31,R25
    02DFA 8020      LD	R2,Z
    02DFB 8031      LDD	R3,Z+1
    02DFC 9120 0151 LDS	R18,i
    02DFE 9130 0152 LDS	R19,i+1
    02E00 0D22      ADD	R18,R2
    02E01 1D33      ADC	R19,R3
    02E02 E100      LDI	R16,0x10
    02E03 E010      LDI	R17,0
    02E04 940E 4674 CALL	empy16s
    02E06 0118      MOVW	R2,R16
    02E07 E587      LDI	R24,0x57
    02E08 E094      LDI	R25,4
    02E09 0E28      ADD	R2,R24
    02E0A 1E39      ADC	R3,R25
    02E0B E481      LDI	R24,0x41
    02E0C E091      LDI	R25,1
    02E0D 01F5      MOVW	R30,R10
    02E0E 0FE8      ADD	R30,R24
    02E0F 1FF9      ADC	R31,R25
    02E10 8040      LD	R4,Z
    02E11 8051      LDD	R5,Z+1
    02E12 91E0 0153 LDS	R30,j
    02E14 91F0 0154 LDS	R31,j+1
    02E16 0DE4      ADD	R30,R4
    02E17 1DF5      ADC	R31,R5
    02E18 0FEE      LSL	R30
    02E19 1FFF      ROL	R31
    02E1A 0DE2      ADD	R30,R2
    02E1B 1DF3      ADC	R31,R3
    02E1C 8020      LD	R2,Z
    02E1D 8031      LDD	R3,Z+1
    02E1E 2022      TST	R2
    02E1F F411      BNE	0x2E22
    02E20 2033      TST	R3
    02E21 F019      BEQ	0x2E25
    02E22 E081      LDI	R24,1
    02E23 9380 02EF STS	error,R24
    02E25 9180 03D1 LDS	R24,n
    02E27 5F8F      SUBI	R24,0xFF
    02E28 9380 03D1 STS	n,R24
    02E2A 9180 03D1 LDS	R24,n
    02E2C 3084      CPI	R24,4
    02E2D F40C      BGE	0x2E2F
    02E2E CFBF      RJMP	0x2DEE
(0791)                     if(!error){
    02E2F 9020 02EF LDS	R2,error
    02E31 2022      TST	R2
    02E32 F009      BEQ	0x2E34
    02E33 C074      RJMP	0x2EA8
(0792)                         for(n=0;n<4;n++) game_set[i+i4[n]][j+j4[n]]=4;
    02E34 2422      CLR	R2
    02E35 9220 03D1 STS	n,R2
    02E37 C037      RJMP	0x2E6F
    02E38 90A0 03D1 LDS	R10,n
    02E3A 24BB      CLR	R11
    02E3B FCA7      SBRC	R10,7
    02E3C 94B0      COM	R11
    02E3D 0CAA      LSL	R10
    02E3E 1CBB      ROL	R11
    02E3F E387      LDI	R24,0x37
    02E40 E091      LDI	R25,1
    02E41 01F5      MOVW	R30,R10
    02E42 0FE8      ADD	R30,R24
    02E43 1FF9      ADC	R31,R25
    02E44 8020      LD	R2,Z
    02E45 8031      LDD	R3,Z+1
    02E46 9120 0151 LDS	R18,i
    02E48 9130 0152 LDS	R19,i+1
    02E4A 0D22      ADD	R18,R2
    02E4B 1D33      ADC	R19,R3
    02E4C E100      LDI	R16,0x10
    02E4D E010      LDI	R17,0
    02E4E 940E 4674 CALL	empy16s
    02E50 0118      MOVW	R2,R16
    02E51 E587      LDI	R24,0x57
    02E52 E094      LDI	R25,4
    02E53 0E28      ADD	R2,R24
    02E54 1E39      ADC	R3,R25
    02E55 E481      LDI	R24,0x41
    02E56 E091      LDI	R25,1
    02E57 01F5      MOVW	R30,R10
    02E58 0FE8      ADD	R30,R24
    02E59 1FF9      ADC	R31,R25
    02E5A 8040      LD	R4,Z
    02E5B 8051      LDD	R5,Z+1
    02E5C 91E0 0153 LDS	R30,j
    02E5E 91F0 0154 LDS	R31,j+1
    02E60 0DE4      ADD	R30,R4
    02E61 1DF5      ADC	R31,R5
    02E62 0FEE      LSL	R30
    02E63 1FFF      ROL	R31
    02E64 0DE2      ADD	R30,R2
    02E65 1DF3      ADC	R31,R3
    02E66 E084      LDI	R24,4
    02E67 E090      LDI	R25,0
    02E68 8391      STD	Z+1,R25
    02E69 8380      ST	Z,R24
    02E6A 9180 03D1 LDS	R24,n
    02E6C 5F8F      SUBI	R24,0xFF
    02E6D 9380 03D1 STS	n,R24
    02E6F 9180 03D1 LDS	R24,n
    02E71 3084      CPI	R24,4
    02E72 F40C      BGE	0x2E74
    02E73 CFC4      RJMP	0x2E38
(0793)                         ship4x=i, ship4y=j;
    02E74 9020 0151 LDS	R2,i
    02E76 9030 0152 LDS	R3,i+1
    02E78 9230 0441 STS	ship4x+1,R3
    02E7A 9220 0440 STS	ship4x,R2
    02E7C 9020 0153 LDS	R2,j
    02E7E 9030 0154 LDS	R3,j+1
    02E80 9230 043F STS	ship4y+1,R3
    02E82 9220 043E STS	ship4y,R2
(0794)                         i=0, j=0;
    02E84 2422      CLR	R2
    02E85 2433      CLR	R3
    02E86 9230 0152 STS	i+1,R3
    02E88 9220 0151 STS	i,R2
    02E8A 9230 0154 STS	j+1,R3
    02E8C 9220 0153 STS	j,R2
(0795)                         imax=0, imin=0, jmax=0, jmin=0;
    02E8E 9230 0455 STS	imax+1,R3
    02E90 9220 0454 STS	imax,R2
    02E92 9230 0453 STS	imin+1,R3
    02E94 9220 0452 STS	imin,R2
    02E96 9230 0451 STS	jmax+1,R3
    02E98 9220 0450 STS	jmax,R2
    02E9A 9230 044F STS	jmin+1,R3
    02E9C 9220 044E STS	jmin,R2
(0796)                         cnt++;
    02E9E 9180 02EA LDS	R24,cnt
    02EA0 5F8F      SUBI	R24,0xFF
    02EA1 9380 02EA STS	cnt,R24
(0797)                         delay_ms(300);
    02EA3 E20C      LDI	R16,0x2C
    02EA4 E011      LDI	R17,1
    02EA5 940E 04B0 CALL	_delay_ms
(0798)                     }
    02EA7 C005      RJMP	0x2EAD
(0799)                     else {
(0800)                         vibrating();
    02EA8 940E 1533 CALL	_vibrating
(0801)                         error=0;
    02EAA 2422      CLR	R2
    02EAB 9220 02EF STS	error,R2
(0802)                     }
(0803)                     state=-1;
    02EAD EF8F      LDI	R24,0xFF
    02EAE 9380 02E9 STS	state,R24
(0804)                 }
(0805)             }
    02EB0 9180 02EA LDS	R24,cnt
    02EB2 3083      CPI	R24,3
    02EB3 F409      BNE	0x2EB5
    02EB4 CDA2      RJMP	0x2C57
    02EB5 C125      RJMP	0x2FDB
(0806)             while(cnt==4){ //item1
(0807)                 AtoD();
    02EB6 940E 14EA CALL	_AtoD
(0808)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    02EB8 9020 02E9 LDS	R2,state
    02EBA 2022      TST	R2
    02EBB F571      BNE	0x2EEA
    02EBC 9140 03CF LDS	R20,val_x
    02EBE 9150 03D0 LDS	R21,val_x+1
    02EC0 E884      LDI	R24,0x84
    02EC1 E093      LDI	R25,3
    02EC2 1784      CP	R24,R20
    02EC3 0795      CPC	R25,R21
    02EC4 F07C      BLT	0x2ED4
    02EC5 3644      CPI	R20,0x64
    02EC6 E0E0      LDI	R30,0
    02EC7 075E      CPC	R21,R30
    02EC8 F05C      BLT	0x2ED4
    02EC9 9140 03CD LDS	R20,val_y
    02ECB 9150 03CE LDS	R21,val_y+1
    02ECD 1784      CP	R24,R20
    02ECE 0795      CPC	R25,R21
    02ECF F024      BLT	0x2ED4
    02ED0 3644      CPI	R20,0x64
    02ED1 E0E0      LDI	R30,0
    02ED2 075E      CPC	R21,R30
    02ED3 F4B4      BGE	0x2EEA
(0809)                     p_i=i, p_j=j;
    02ED4 9020 0151 LDS	R2,i
    02ED6 9030 0152 LDS	R3,i+1
    02ED8 9230 02EC STS	p_i+1,R3
    02EDA 9220 02EB STS	p_i,R2
    02EDC 9020 0153 LDS	R2,j
    02EDE 9030 0154 LDS	R3,j+1
    02EE0 9230 02EE STS	p_j+1,R3
    02EE2 9220 02ED STS	p_j,R2
(0810)                     joystick_setting();
    02EE4 940E 173A CALL	_joystick_setting
(0811)                     state=1;
    02EE6 E081      LDI	R24,1
    02EE7 9380 02E9 STS	state,R24
(0812)                 }
    02EE9 C009      RJMP	0x2EF3
(0813)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    02EEA 9020 02E9 LDS	R2,state
    02EEC 2022      TST	R2
    02EED F429      BNE	0x2EF3
    02EEE 9903      SBIC	0x00,3
    02EEF C003      RJMP	0x2EF3
    02EF0 E082      LDI	R24,2
    02EF1 9380 02E9 STS	state,R24
(0814)                 if(state==-1){
    02EF3 9180 02E9 LDS	R24,state
    02EF5 3F8F      CPI	R24,0xFF
    02EF6 F009      BEQ	0x2EF8
    02EF7 C06A      RJMP	0x2F62
(0815)                     rship1(ship1x,ship1y), rship2(ship2x,ship2y), rship3(ship3x,ship3y), rship4(ship4x,ship4y);
    02EF8 9120 044A LDS	R18,ship1y
    02EFA 9130 044B LDS	R19,ship1y+1
    02EFC 9100 044C LDS	R16,ship1x
    02EFE 9110 044D LDS	R17,ship1x+1
    02F00 940E 04FB CALL	_rship1
    02F02 9120 0446 LDS	R18,ship2y
    02F04 9130 0447 LDS	R19,ship2y+1
    02F06 9100 0448 LDS	R16,ship2x
    02F08 9110 0449 LDS	R17,ship2x+1
    02F0A 940E 0522 CALL	_rship2
    02F0C 9120 0442 LDS	R18,ship3y
    02F0E 9130 0443 LDS	R19,ship3y+1
    02F10 9100 0444 LDS	R16,ship3x
    02F12 9110 0445 LDS	R17,ship3x+1
    02F14 940E 0549 CALL	_rship3
    02F16 9120 043E LDS	R18,ship4y
    02F18 9130 043F LDS	R19,ship4y+1
    02F1A 9100 0440 LDS	R16,ship4x
    02F1C 9110 0441 LDS	R17,ship4x+1
    02F1E 940E 0722 CALL	_rship4
(0816)                     if(game_set[i][j]){
    02F20 9120 0151 LDS	R18,i
    02F22 9130 0152 LDS	R19,i+1
    02F24 E100      LDI	R16,0x10
    02F25 E010      LDI	R17,0
    02F26 940E 4674 CALL	empy16s
    02F28 E587      LDI	R24,0x57
    02F29 E094      LDI	R25,4
    02F2A 0118      MOVW	R2,R16
    02F2B 0E28      ADD	R2,R24
    02F2C 1E39      ADC	R3,R25
    02F2D 91E0 0153 LDS	R30,j
    02F2F 91F0 0154 LDS	R31,j+1
    02F31 0FEE      LSL	R30
    02F32 1FFF      ROL	R31
    02F33 0DE2      ADD	R30,R2
    02F34 1DF3      ADC	R31,R3
    02F35 8020      LD	R2,Z
    02F36 8031      LDD	R3,Z+1
    02F37 2022      TST	R2
    02F38 F411      BNE	0x2F3B
    02F39 2033      TST	R3
    02F3A F0A9      BEQ	0x2F50
(0817)                         rGLCD_cursor_off(i,j);
    02F3B 9120 0153 LDS	R18,j
    02F3D 9130 0154 LDS	R19,j+1
    02F3F 9100 0151 LDS	R16,i
    02F41 9110 0152 LDS	R17,i+1
    02F43 940E 0749 CALL	_rGLCD_cursor_off
(0818)                         rGLCD_fail(i,j);
    02F45 9120 0153 LDS	R18,j
    02F47 9130 0154 LDS	R19,j+1
    02F49 9100 0151 LDS	R16,i
    02F4B 9110 0152 LDS	R17,i+1
    02F4D 940E 09A9 CALL	_rGLCD_fail
(0819)                     }
    02F4F C00A      RJMP	0x2F5A
(0820)                     else rGLCD_item(i,j);
    02F50 9120 0153 LDS	R18,j
    02F52 9130 0154 LDS	R19,j+1
    02F54 9100 0151 LDS	R16,i
    02F56 9110 0152 LDS	R17,i+1
    02F58 940E 0945 CALL	_rGLCD_item
(0821)                     state=0;
    02F5A 2422      CLR	R2
    02F5B 9220 02E9 STS	state,R2
(0822)                     delay_ms(300);
    02F5D E20C      LDI	R16,0x2C
    02F5E E011      LDI	R17,1
    02F5F 940E 04B0 CALL	_delay_ms
(0823)                 }
    02F61 C079      RJMP	0x2FDB
(0824)                 else if(state==1){
    02F62 9180 02E9 LDS	R24,state
    02F64 3081      CPI	R24,1
    02F65 F471      BNE	0x2F74
(0825)                     rGLCD_cursor_off(p_i,p_j);
    02F66 9120 02ED LDS	R18,p_j
    02F68 9130 02EE LDS	R19,p_j+1
    02F6A 9100 02EB LDS	R16,p_i
    02F6C 9110 02EC LDS	R17,p_i+1
    02F6E 940E 0749 CALL	_rGLCD_cursor_off
(0826)                     state=-1;
    02F70 EF8F      LDI	R24,0xFF
    02F71 9380 02E9 STS	state,R24
(0827)                 }
    02F73 C067      RJMP	0x2FDB
(0828)                 else if(state==2){
    02F74 9180 02E9 LDS	R24,state
    02F76 3082      CPI	R24,2
    02F77 F009      BEQ	0x2F79
    02F78 C062      RJMP	0x2FDB
(0829)                     if(!game_set[i][j]) {
    02F79 9120 0151 LDS	R18,i
    02F7B 9130 0152 LDS	R19,i+1
    02F7D E100      LDI	R16,0x10
    02F7E E010      LDI	R17,0
    02F7F 940E 4674 CALL	empy16s
    02F81 E587      LDI	R24,0x57
    02F82 E094      LDI	R25,4
    02F83 0118      MOVW	R2,R16
    02F84 0E28      ADD	R2,R24
    02F85 1E39      ADC	R3,R25
    02F86 91E0 0153 LDS	R30,j
    02F88 91F0 0154 LDS	R31,j+1
    02F8A 0FEE      LSL	R30
    02F8B 1FFF      ROL	R31
    02F8C 0DE2      ADD	R30,R2
    02F8D 1DF3      ADC	R31,R3
    02F8E 8020      LD	R2,Z
    02F8F 8031      LDD	R3,Z+1
    02F90 2022      TST	R2
    02F91 F009      BEQ	0x2F93
    02F92 C040      RJMP	0x2FD3
    02F93 2033      TST	R3
    02F94 F009      BEQ	0x2F96
    02F95 C03D      RJMP	0x2FD3
(0830)                         game_set[i][j]=5;
    02F96 9120 0151 LDS	R18,i
    02F98 9130 0152 LDS	R19,i+1
    02F9A E100      LDI	R16,0x10
    02F9B E010      LDI	R17,0
    02F9C 940E 4674 CALL	empy16s
    02F9E E587      LDI	R24,0x57
    02F9F E094      LDI	R25,4
    02FA0 0118      MOVW	R2,R16
    02FA1 0E28      ADD	R2,R24
    02FA2 1E39      ADC	R3,R25
    02FA3 91E0 0153 LDS	R30,j
    02FA5 91F0 0154 LDS	R31,j+1
    02FA7 0FEE      LSL	R30
    02FA8 1FFF      ROL	R31
    02FA9 0DE2      ADD	R30,R2
    02FAA 1DF3      ADC	R31,R3
    02FAB E085      LDI	R24,5
    02FAC E090      LDI	R25,0
    02FAD 8391      STD	Z+1,R25
    02FAE 8380      ST	Z,R24
(0831)                         item1x=i,item1y=j;
    02FAF 9020 0151 LDS	R2,i
    02FB1 9030 0152 LDS	R3,i+1
    02FB3 9230 043D STS	item1x+1,R3
    02FB5 9220 043C STS	item1x,R2
    02FB7 9020 0153 LDS	R2,j
    02FB9 9030 0154 LDS	R3,j+1
    02FBB 9230 043B STS	item1y+1,R3
    02FBD 9220 043A STS	item1y,R2
(0832)                         i=0,j=0;
    02FBF 2422      CLR	R2
    02FC0 2433      CLR	R3
    02FC1 9230 0152 STS	i+1,R3
    02FC3 9220 0151 STS	i,R2
    02FC5 9230 0154 STS	j+1,R3
    02FC7 9220 0153 STS	j,R2
(0833)                         cnt++;
    02FC9 9180 02EA LDS	R24,cnt
    02FCB 5F8F      SUBI	R24,0xFF
    02FCC 9380 02EA STS	cnt,R24
(0834)                         delay_ms(300);
    02FCE E20C      LDI	R16,0x2C
    02FCF E011      LDI	R17,1
    02FD0 940E 04B0 CALL	_delay_ms
(0835)                     }
    02FD2 C005      RJMP	0x2FD8
(0836)                     else {
(0837)                         vibrating();
    02FD3 940E 1533 CALL	_vibrating
(0838)                         error=0;
    02FD5 2422      CLR	R2
    02FD6 9220 02EF STS	error,R2
(0839)                     }
(0840)                     state=-1;
    02FD8 EF8F      LDI	R24,0xFF
    02FD9 9380 02E9 STS	state,R24
(0841)                 }
(0842)             }
    02FDB 9180 02EA LDS	R24,cnt
    02FDD 3084      CPI	R24,4
    02FDE F409      BNE	0x2FE0
    02FDF CED6      RJMP	0x2EB6
    02FE0 C12F      RJMP	0x3110
(0843)             while(cnt==5){ //item2
(0844)                 AtoD();
    02FE1 940E 14EA CALL	_AtoD
(0845)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    02FE3 9020 02E9 LDS	R2,state
    02FE5 2022      TST	R2
    02FE6 F571      BNE	0x3015
    02FE7 9140 03CF LDS	R20,val_x
    02FE9 9150 03D0 LDS	R21,val_x+1
    02FEB E884      LDI	R24,0x84
    02FEC E093      LDI	R25,3
    02FED 1784      CP	R24,R20
    02FEE 0795      CPC	R25,R21
    02FEF F07C      BLT	0x2FFF
    02FF0 3644      CPI	R20,0x64
    02FF1 E0E0      LDI	R30,0
    02FF2 075E      CPC	R21,R30
    02FF3 F05C      BLT	0x2FFF
    02FF4 9140 03CD LDS	R20,val_y
    02FF6 9150 03CE LDS	R21,val_y+1
    02FF8 1784      CP	R24,R20
    02FF9 0795      CPC	R25,R21
    02FFA F024      BLT	0x2FFF
    02FFB 3644      CPI	R20,0x64
    02FFC E0E0      LDI	R30,0
    02FFD 075E      CPC	R21,R30
    02FFE F4B4      BGE	0x3015
(0846)                     p_i=i, p_j=j;
    02FFF 9020 0151 LDS	R2,i
    03001 9030 0152 LDS	R3,i+1
    03003 9230 02EC STS	p_i+1,R3
    03005 9220 02EB STS	p_i,R2
    03007 9020 0153 LDS	R2,j
    03009 9030 0154 LDS	R3,j+1
    0300B 9230 02EE STS	p_j+1,R3
    0300D 9220 02ED STS	p_j,R2
(0847)                     joystick_setting();
    0300F 940E 173A CALL	_joystick_setting
(0848)                     state=1;
    03011 E081      LDI	R24,1
    03012 9380 02E9 STS	state,R24
(0849)                 }
    03014 C009      RJMP	0x301E
(0850)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    03015 9020 02E9 LDS	R2,state
    03017 2022      TST	R2
    03018 F429      BNE	0x301E
    03019 9903      SBIC	0x00,3
    0301A C003      RJMP	0x301E
    0301B E082      LDI	R24,2
    0301C 9380 02E9 STS	state,R24
(0851)                 if(state==-1){
    0301E 9180 02E9 LDS	R24,state
    03020 3F8F      CPI	R24,0xFF
    03021 F009      BEQ	0x3023
    03022 C074      RJMP	0x3097
(0852)                     rGLCD_item(item1x,item1y),
    03023 9120 043A LDS	R18,item1y
    03025 9130 043B LDS	R19,item1y+1
    03027 9100 043C LDS	R16,item1x
    03029 9110 043D LDS	R17,item1x+1
    0302B 940E 0945 CALL	_rGLCD_item
    0302D 9120 044A LDS	R18,ship1y
    0302F 9130 044B LDS	R19,ship1y+1
    03031 9100 044C LDS	R16,ship1x
    03033 9110 044D LDS	R17,ship1x+1
    03035 940E 04FB CALL	_rship1
    03037 9120 0446 LDS	R18,ship2y
    03039 9130 0447 LDS	R19,ship2y+1
    0303B 9100 0448 LDS	R16,ship2x
    0303D 9110 0449 LDS	R17,ship2x+1
    0303F 940E 0522 CALL	_rship2
    03041 9120 0442 LDS	R18,ship3y
    03043 9130 0443 LDS	R19,ship3y+1
    03045 9100 0444 LDS	R16,ship3x
    03047 9110 0445 LDS	R17,ship3x+1
    03049 940E 0549 CALL	_rship3
    0304B 9120 043E LDS	R18,ship4y
    0304D 9130 043F LDS	R19,ship4y+1
    0304F 9100 0440 LDS	R16,ship4x
    03051 9110 0441 LDS	R17,ship4x+1
    03053 940E 0722 CALL	_rship4
(0853)                     rship1(ship1x,ship1y), rship2(ship2x,ship2y), rship3(ship3x,ship3y), rship4(ship4x,ship4y);
(0854)                     if(game_set[i][j]){
    03055 9120 0151 LDS	R18,i
    03057 9130 0152 LDS	R19,i+1
    03059 E100      LDI	R16,0x10
    0305A E010      LDI	R17,0
    0305B 940E 4674 CALL	empy16s
    0305D E587      LDI	R24,0x57
    0305E E094      LDI	R25,4
    0305F 0118      MOVW	R2,R16
    03060 0E28      ADD	R2,R24
    03061 1E39      ADC	R3,R25
    03062 91E0 0153 LDS	R30,j
    03064 91F0 0154 LDS	R31,j+1
    03066 0FEE      LSL	R30
    03067 1FFF      ROL	R31
    03068 0DE2      ADD	R30,R2
    03069 1DF3      ADC	R31,R3
    0306A 8020      LD	R2,Z
    0306B 8031      LDD	R3,Z+1
    0306C 2022      TST	R2
    0306D F411      BNE	0x3070
    0306E 2033      TST	R3
    0306F F0A9      BEQ	0x3085
(0855)                         rGLCD_cursor_off(i,j);
    03070 9120 0153 LDS	R18,j
    03072 9130 0154 LDS	R19,j+1
    03074 9100 0151 LDS	R16,i
    03076 9110 0152 LDS	R17,i+1
    03078 940E 0749 CALL	_rGLCD_cursor_off
(0856)                         rGLCD_fail(i,j);
    0307A 9120 0153 LDS	R18,j
    0307C 9130 0154 LDS	R19,j+1
    0307E 9100 0151 LDS	R16,i
    03080 9110 0152 LDS	R17,i+1
    03082 940E 09A9 CALL	_rGLCD_fail
(0857)                     }
    03084 C00A      RJMP	0x308F
(0858)                     else rGLCD_item(i,j);
    03085 9120 0153 LDS	R18,j
    03087 9130 0154 LDS	R19,j+1
    03089 9100 0151 LDS	R16,i
    0308B 9110 0152 LDS	R17,i+1
    0308D 940E 0945 CALL	_rGLCD_item
(0859)                     state=0;
    0308F 2422      CLR	R2
    03090 9220 02E9 STS	state,R2
(0860)                     delay_ms(300);
    03092 E20C      LDI	R16,0x2C
    03093 E011      LDI	R17,1
    03094 940E 04B0 CALL	_delay_ms
(0861)                 }
    03096 C079      RJMP	0x3110
(0862)                 else if(state==1){
    03097 9180 02E9 LDS	R24,state
    03099 3081      CPI	R24,1
    0309A F471      BNE	0x30A9
(0863)                     rGLCD_cursor_off(p_i,p_j);
    0309B 9120 02ED LDS	R18,p_j
    0309D 9130 02EE LDS	R19,p_j+1
    0309F 9100 02EB LDS	R16,p_i
    030A1 9110 02EC LDS	R17,p_i+1
    030A3 940E 0749 CALL	_rGLCD_cursor_off
(0864)                     state=-1;
    030A5 EF8F      LDI	R24,0xFF
    030A6 9380 02E9 STS	state,R24
(0865)                 }
    030A8 C067      RJMP	0x3110
(0866)                 else if(state==2){
    030A9 9180 02E9 LDS	R24,state
    030AB 3082      CPI	R24,2
    030AC F009      BEQ	0x30AE
    030AD C062      RJMP	0x3110
(0867)                     if(!game_set[i][j]) {
    030AE 9120 0151 LDS	R18,i
    030B0 9130 0152 LDS	R19,i+1
    030B2 E100      LDI	R16,0x10
    030B3 E010      LDI	R17,0
    030B4 940E 4674 CALL	empy16s
    030B6 E587      LDI	R24,0x57
    030B7 E094      LDI	R25,4
    030B8 0118      MOVW	R2,R16
    030B9 0E28      ADD	R2,R24
    030BA 1E39      ADC	R3,R25
    030BB 91E0 0153 LDS	R30,j
    030BD 91F0 0154 LDS	R31,j+1
    030BF 0FEE      LSL	R30
    030C0 1FFF      ROL	R31
    030C1 0DE2      ADD	R30,R2
    030C2 1DF3      ADC	R31,R3
    030C3 8020      LD	R2,Z
    030C4 8031      LDD	R3,Z+1
    030C5 2022      TST	R2
    030C6 F009      BEQ	0x30C8
    030C7 C040      RJMP	0x3108
    030C8 2033      TST	R3
    030C9 F009      BEQ	0x30CB
    030CA C03D      RJMP	0x3108
(0868)                         game_set[i][j]=5;
    030CB 9120 0151 LDS	R18,i
    030CD 9130 0152 LDS	R19,i+1
    030CF E100      LDI	R16,0x10
    030D0 E010      LDI	R17,0
    030D1 940E 4674 CALL	empy16s
    030D3 E587      LDI	R24,0x57
    030D4 E094      LDI	R25,4
    030D5 0118      MOVW	R2,R16
    030D6 0E28      ADD	R2,R24
    030D7 1E39      ADC	R3,R25
    030D8 91E0 0153 LDS	R30,j
    030DA 91F0 0154 LDS	R31,j+1
    030DC 0FEE      LSL	R30
    030DD 1FFF      ROL	R31
    030DE 0DE2      ADD	R30,R2
    030DF 1DF3      ADC	R31,R3
    030E0 E085      LDI	R24,5
    030E1 E090      LDI	R25,0
    030E2 8391      STD	Z+1,R25
    030E3 8380      ST	Z,R24
(0869)                         item2x=i,item2y=j;
    030E4 9020 0151 LDS	R2,i
    030E6 9030 0152 LDS	R3,i+1
    030E8 9230 0439 STS	item2x+1,R3
    030EA 9220 0438 STS	item2x,R2
    030EC 9020 0153 LDS	R2,j
    030EE 9030 0154 LDS	R3,j+1
    030F0 9230 0437 STS	item2y+1,R3
    030F2 9220 0436 STS	item2y,R2
(0870)                         i=0,j=0;
    030F4 2422      CLR	R2
    030F5 2433      CLR	R3
    030F6 9230 0152 STS	i+1,R3
    030F8 9220 0151 STS	i,R2
    030FA 9230 0154 STS	j+1,R3
    030FC 9220 0153 STS	j,R2
(0871)                         cnt++;
    030FE 9180 02EA LDS	R24,cnt
    03100 5F8F      SUBI	R24,0xFF
    03101 9380 02EA STS	cnt,R24
(0872)                         delay_ms(300);
    03103 E20C      LDI	R16,0x2C
    03104 E011      LDI	R17,1
    03105 940E 04B0 CALL	_delay_ms
(0873)                     }
    03107 C005      RJMP	0x310D
(0874)                     else {
(0875)                         vibrating();
    03108 940E 1533 CALL	_vibrating
(0876)                         error=0;
    0310A 2422      CLR	R2
    0310B 9220 02EF STS	error,R2
(0877)                     }
(0878)                     state=-1;
    0310D EF8F      LDI	R24,0xFF
    0310E 9380 02E9 STS	state,R24
(0879)                 }
(0880)             }
    03110 9180 02EA LDS	R24,cnt
    03112 3085      CPI	R24,5
    03113 F409      BNE	0x3115
    03114 CECC      RJMP	0x2FE1
    03115 C139      RJMP	0x324F
(0881)             while(cnt==6){ //mine1
(0882)                 AtoD();
    03116 940E 14EA CALL	_AtoD
(0883)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    03118 9020 02E9 LDS	R2,state
    0311A 2022      TST	R2
    0311B F571      BNE	0x314A
    0311C 9140 03CF LDS	R20,val_x
    0311E 9150 03D0 LDS	R21,val_x+1
    03120 E884      LDI	R24,0x84
    03121 E093      LDI	R25,3
    03122 1784      CP	R24,R20
    03123 0795      CPC	R25,R21
    03124 F07C      BLT	0x3134
    03125 3644      CPI	R20,0x64
    03126 E0E0      LDI	R30,0
    03127 075E      CPC	R21,R30
    03128 F05C      BLT	0x3134
    03129 9140 03CD LDS	R20,val_y
    0312B 9150 03CE LDS	R21,val_y+1
    0312D 1784      CP	R24,R20
    0312E 0795      CPC	R25,R21
    0312F F024      BLT	0x3134
    03130 3644      CPI	R20,0x64
    03131 E0E0      LDI	R30,0
    03132 075E      CPC	R21,R30
    03133 F4B4      BGE	0x314A
(0884)                     p_i=i, p_j=j;
    03134 9020 0151 LDS	R2,i
    03136 9030 0152 LDS	R3,i+1
    03138 9230 02EC STS	p_i+1,R3
    0313A 9220 02EB STS	p_i,R2
    0313C 9020 0153 LDS	R2,j
    0313E 9030 0154 LDS	R3,j+1
    03140 9230 02EE STS	p_j+1,R3
    03142 9220 02ED STS	p_j,R2
(0885)                     joystick_setting();
    03144 940E 173A CALL	_joystick_setting
(0886)                     state=1;
    03146 E081      LDI	R24,1
    03147 9380 02E9 STS	state,R24
(0887)                 }
    03149 C009      RJMP	0x3153
(0888)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    0314A 9020 02E9 LDS	R2,state
    0314C 2022      TST	R2
    0314D F429      BNE	0x3153
    0314E 9903      SBIC	0x00,3
    0314F C003      RJMP	0x3153
    03150 E082      LDI	R24,2
    03151 9380 02E9 STS	state,R24
(0889)                 if(state==-1){
    03153 9180 02E9 LDS	R24,state
    03155 3F8F      CPI	R24,0xFF
    03156 F009      BEQ	0x3158
    03157 C07E      RJMP	0x31D6
(0890)                     rGLCD_item(item1x,item1y),rGLCD_item(item2x,item2y),
    03158 9120 043A LDS	R18,item1y
    0315A 9130 043B LDS	R19,item1y+1
    0315C 9100 043C LDS	R16,item1x
    0315E 9110 043D LDS	R17,item1x+1
    03160 940E 0945 CALL	_rGLCD_item
    03162 9120 0436 LDS	R18,item2y
    03164 9130 0437 LDS	R19,item2y+1
    03166 9100 0438 LDS	R16,item2x
    03168 9110 0439 LDS	R17,item2x+1
    0316A 940E 0945 CALL	_rGLCD_item
    0316C 9120 044A LDS	R18,ship1y
    0316E 9130 044B LDS	R19,ship1y+1
    03170 9100 044C LDS	R16,ship1x
    03172 9110 044D LDS	R17,ship1x+1
    03174 940E 04FB CALL	_rship1
    03176 9120 0446 LDS	R18,ship2y
    03178 9130 0447 LDS	R19,ship2y+1
    0317A 9100 0448 LDS	R16,ship2x
    0317C 9110 0449 LDS	R17,ship2x+1
    0317E 940E 0522 CALL	_rship2
    03180 9120 0442 LDS	R18,ship3y
    03182 9130 0443 LDS	R19,ship3y+1
    03184 9100 0444 LDS	R16,ship3x
    03186 9110 0445 LDS	R17,ship3x+1
    03188 940E 0549 CALL	_rship3
    0318A 9120 043E LDS	R18,ship4y
    0318C 9130 043F LDS	R19,ship4y+1
    0318E 9100 0440 LDS	R16,ship4x
    03190 9110 0441 LDS	R17,ship4x+1
    03192 940E 0722 CALL	_rship4
(0891)                     rship1(ship1x,ship1y), rship2(ship2x,ship2y), rship3(ship3x,ship3y), rship4(ship4x,ship4y);
(0892)                     if(game_set[i][j]){
    03194 9120 0151 LDS	R18,i
    03196 9130 0152 LDS	R19,i+1
    03198 E100      LDI	R16,0x10
    03199 E010      LDI	R17,0
    0319A 940E 4674 CALL	empy16s
    0319C E587      LDI	R24,0x57
    0319D E094      LDI	R25,4
    0319E 0118      MOVW	R2,R16
    0319F 0E28      ADD	R2,R24
    031A0 1E39      ADC	R3,R25
    031A1 91E0 0153 LDS	R30,j
    031A3 91F0 0154 LDS	R31,j+1
    031A5 0FEE      LSL	R30
    031A6 1FFF      ROL	R31
    031A7 0DE2      ADD	R30,R2
    031A8 1DF3      ADC	R31,R3
    031A9 8020      LD	R2,Z
    031AA 8031      LDD	R3,Z+1
    031AB 2022      TST	R2
    031AC F411      BNE	0x31AF
    031AD 2033      TST	R3
    031AE F0A9      BEQ	0x31C4
(0893)                         rGLCD_cursor_off(i,j);
    031AF 9120 0153 LDS	R18,j
    031B1 9130 0154 LDS	R19,j+1
    031B3 9100 0151 LDS	R16,i
    031B5 9110 0152 LDS	R17,i+1
    031B7 940E 0749 CALL	_rGLCD_cursor_off
(0894)                         rGLCD_fail(i,j);
    031B9 9120 0153 LDS	R18,j
    031BB 9130 0154 LDS	R19,j+1
    031BD 9100 0151 LDS	R16,i
    031BF 9110 0152 LDS	R17,i+1
    031C1 940E 09A9 CALL	_rGLCD_fail
(0895)                     }
    031C3 C00A      RJMP	0x31CE
(0896)                     else rGLCD_mine(i,j);
    031C4 9120 0153 LDS	R18,j
    031C6 9130 0154 LDS	R19,j+1
    031C8 9100 0151 LDS	R16,i
    031CA 9110 0152 LDS	R17,i+1
    031CC 940E 0832 CALL	_rGLCD_mine
(0897)                     state=0;
    031CE 2422      CLR	R2
    031CF 9220 02E9 STS	state,R2
(0898)                     delay_ms(300);
    031D1 E20C      LDI	R16,0x2C
    031D2 E011      LDI	R17,1
    031D3 940E 04B0 CALL	_delay_ms
(0899)                 }
    031D5 C079      RJMP	0x324F
(0900)                 else if(state==1){
    031D6 9180 02E9 LDS	R24,state
    031D8 3081      CPI	R24,1
    031D9 F471      BNE	0x31E8
(0901)                     rGLCD_cursor_off(p_i,p_j);
    031DA 9120 02ED LDS	R18,p_j
    031DC 9130 02EE LDS	R19,p_j+1
    031DE 9100 02EB LDS	R16,p_i
    031E0 9110 02EC LDS	R17,p_i+1
    031E2 940E 0749 CALL	_rGLCD_cursor_off
(0902)                     state=-1;
    031E4 EF8F      LDI	R24,0xFF
    031E5 9380 02E9 STS	state,R24
(0903)                 }
    031E7 C067      RJMP	0x324F
(0904)                 else if(state==2){
    031E8 9180 02E9 LDS	R24,state
    031EA 3082      CPI	R24,2
    031EB F009      BEQ	0x31ED
    031EC C062      RJMP	0x324F
(0905)                     if(!game_set[i][j]) {
    031ED 9120 0151 LDS	R18,i
    031EF 9130 0152 LDS	R19,i+1
    031F1 E100      LDI	R16,0x10
    031F2 E010      LDI	R17,0
    031F3 940E 4674 CALL	empy16s
    031F5 E587      LDI	R24,0x57
    031F6 E094      LDI	R25,4
    031F7 0118      MOVW	R2,R16
    031F8 0E28      ADD	R2,R24
    031F9 1E39      ADC	R3,R25
    031FA 91E0 0153 LDS	R30,j
    031FC 91F0 0154 LDS	R31,j+1
    031FE 0FEE      LSL	R30
    031FF 1FFF      ROL	R31
    03200 0DE2      ADD	R30,R2
    03201 1DF3      ADC	R31,R3
    03202 8020      LD	R2,Z
    03203 8031      LDD	R3,Z+1
    03204 2022      TST	R2
    03205 F009      BEQ	0x3207
    03206 C040      RJMP	0x3247
    03207 2033      TST	R3
    03208 F009      BEQ	0x320A
    03209 C03D      RJMP	0x3247
(0906)                         game_set[i][j]=6;
    0320A 9120 0151 LDS	R18,i
    0320C 9130 0152 LDS	R19,i+1
    0320E E100      LDI	R16,0x10
    0320F E010      LDI	R17,0
    03210 940E 4674 CALL	empy16s
    03212 E587      LDI	R24,0x57
    03213 E094      LDI	R25,4
    03214 0118      MOVW	R2,R16
    03215 0E28      ADD	R2,R24
    03216 1E39      ADC	R3,R25
    03217 91E0 0153 LDS	R30,j
    03219 91F0 0154 LDS	R31,j+1
    0321B 0FEE      LSL	R30
    0321C 1FFF      ROL	R31
    0321D 0DE2      ADD	R30,R2
    0321E 1DF3      ADC	R31,R3
    0321F E086      LDI	R24,6
    03220 E090      LDI	R25,0
    03221 8391      STD	Z+1,R25
    03222 8380      ST	Z,R24
(0907)                         mine1x=i,mine1y=j;
    03223 9020 0151 LDS	R2,i
    03225 9030 0152 LDS	R3,i+1
    03227 9230 0435 STS	mine1x+1,R3
    03229 9220 0434 STS	mine1x,R2
    0322B 9020 0153 LDS	R2,j
    0322D 9030 0154 LDS	R3,j+1
    0322F 9230 0433 STS	mine1y+1,R3
    03231 9220 0432 STS	mine1y,R2
(0908)                         i=0,j=0;
    03233 2422      CLR	R2
    03234 2433      CLR	R3
    03235 9230 0152 STS	i+1,R3
    03237 9220 0151 STS	i,R2
    03239 9230 0154 STS	j+1,R3
    0323B 9220 0153 STS	j,R2
(0909)                         cnt++;
    0323D 9180 02EA LDS	R24,cnt
    0323F 5F8F      SUBI	R24,0xFF
    03240 9380 02EA STS	cnt,R24
(0910)                         delay_ms(300);
    03242 E20C      LDI	R16,0x2C
    03243 E011      LDI	R17,1
    03244 940E 04B0 CALL	_delay_ms
(0911)                     }
    03246 C005      RJMP	0x324C
(0912)                     else {
(0913)                         vibrating();
    03247 940E 1533 CALL	_vibrating
(0914)                         error=0;
    03249 2422      CLR	R2
    0324A 9220 02EF STS	error,R2
(0915)                     }
(0916)                     state=-1;
    0324C EF8F      LDI	R24,0xFF
    0324D 9380 02E9 STS	state,R24
(0917)                 }
(0918)             }
    0324F 9180 02EA LDS	R24,cnt
    03251 3086      CPI	R24,6
    03252 F409      BNE	0x3254
    03253 CEC2      RJMP	0x3116
    03254 C143      RJMP	0x3398
(0919)             while(cnt==7){ //mine2
(0920)                 AtoD();
    03255 940E 14EA CALL	_AtoD
(0921)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    03257 9020 02E9 LDS	R2,state
    03259 2022      TST	R2
    0325A F571      BNE	0x3289
    0325B 9140 03CF LDS	R20,val_x
    0325D 9150 03D0 LDS	R21,val_x+1
    0325F E884      LDI	R24,0x84
    03260 E093      LDI	R25,3
    03261 1784      CP	R24,R20
    03262 0795      CPC	R25,R21
    03263 F07C      BLT	0x3273
    03264 3644      CPI	R20,0x64
    03265 E0E0      LDI	R30,0
    03266 075E      CPC	R21,R30
    03267 F05C      BLT	0x3273
    03268 9140 03CD LDS	R20,val_y
    0326A 9150 03CE LDS	R21,val_y+1
    0326C 1784      CP	R24,R20
    0326D 0795      CPC	R25,R21
    0326E F024      BLT	0x3273
    0326F 3644      CPI	R20,0x64
    03270 E0E0      LDI	R30,0
    03271 075E      CPC	R21,R30
    03272 F4B4      BGE	0x3289
(0922)                     p_i=i, p_j=j;
    03273 9020 0151 LDS	R2,i
    03275 9030 0152 LDS	R3,i+1
    03277 9230 02EC STS	p_i+1,R3
    03279 9220 02EB STS	p_i,R2
    0327B 9020 0153 LDS	R2,j
    0327D 9030 0154 LDS	R3,j+1
    0327F 9230 02EE STS	p_j+1,R3
    03281 9220 02ED STS	p_j,R2
(0923)                     joystick_setting();
    03283 940E 173A CALL	_joystick_setting
(0924)                     state=1;
    03285 E081      LDI	R24,1
    03286 9380 02E9 STS	state,R24
(0925)                 }
    03288 C009      RJMP	0x3292
(0926)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    03289 9020 02E9 LDS	R2,state
    0328B 2022      TST	R2
    0328C F429      BNE	0x3292
    0328D 9903      SBIC	0x00,3
    0328E C003      RJMP	0x3292
    0328F E082      LDI	R24,2
    03290 9380 02E9 STS	state,R24
(0927)                 if(state==-1){
    03292 9180 02E9 LDS	R24,state
    03294 3F8F      CPI	R24,0xFF
    03295 F009      BEQ	0x3297
    03296 C088      RJMP	0x331F
(0928)                     rGLCD_item(item1x,item1y),rGLCD_item(item2x,item2y),rGLCD_mine(mine1x,mine1y),
    03297 9120 043A LDS	R18,item1y
    03299 9130 043B LDS	R19,item1y+1
    0329B 9100 043C LDS	R16,item1x
    0329D 9110 043D LDS	R17,item1x+1
    0329F 940E 0945 CALL	_rGLCD_item
    032A1 9120 0436 LDS	R18,item2y
    032A3 9130 0437 LDS	R19,item2y+1
    032A5 9100 0438 LDS	R16,item2x
    032A7 9110 0439 LDS	R17,item2x+1
    032A9 940E 0945 CALL	_rGLCD_item
    032AB 9120 0432 LDS	R18,mine1y
    032AD 9130 0433 LDS	R19,mine1y+1
    032AF 9100 0434 LDS	R16,mine1x
    032B1 9110 0435 LDS	R17,mine1x+1
    032B3 940E 0832 CALL	_rGLCD_mine
    032B5 9120 044A LDS	R18,ship1y
    032B7 9130 044B LDS	R19,ship1y+1
    032B9 9100 044C LDS	R16,ship1x
    032BB 9110 044D LDS	R17,ship1x+1
    032BD 940E 04FB CALL	_rship1
    032BF 9120 0446 LDS	R18,ship2y
    032C1 9130 0447 LDS	R19,ship2y+1
    032C3 9100 0448 LDS	R16,ship2x
    032C5 9110 0449 LDS	R17,ship2x+1
    032C7 940E 0522 CALL	_rship2
    032C9 9120 0442 LDS	R18,ship3y
    032CB 9130 0443 LDS	R19,ship3y+1
    032CD 9100 0444 LDS	R16,ship3x
    032CF 9110 0445 LDS	R17,ship3x+1
    032D1 940E 0549 CALL	_rship3
    032D3 9120 043E LDS	R18,ship4y
    032D5 9130 043F LDS	R19,ship4y+1
    032D7 9100 0440 LDS	R16,ship4x
    032D9 9110 0441 LDS	R17,ship4x+1
    032DB 940E 0722 CALL	_rship4
(0929)                     rship1(ship1x,ship1y), rship2(ship2x,ship2y), rship3(ship3x,ship3y), rship4(ship4x,ship4y);
(0930)                     if(game_set[i][j]){
    032DD 9120 0151 LDS	R18,i
    032DF 9130 0152 LDS	R19,i+1
    032E1 E100      LDI	R16,0x10
    032E2 E010      LDI	R17,0
    032E3 940E 4674 CALL	empy16s
    032E5 E587      LDI	R24,0x57
    032E6 E094      LDI	R25,4
    032E7 0118      MOVW	R2,R16
    032E8 0E28      ADD	R2,R24
    032E9 1E39      ADC	R3,R25
    032EA 91E0 0153 LDS	R30,j
    032EC 91F0 0154 LDS	R31,j+1
    032EE 0FEE      LSL	R30
    032EF 1FFF      ROL	R31
    032F0 0DE2      ADD	R30,R2
    032F1 1DF3      ADC	R31,R3
    032F2 8020      LD	R2,Z
    032F3 8031      LDD	R3,Z+1
    032F4 2022      TST	R2
    032F5 F411      BNE	0x32F8
    032F6 2033      TST	R3
    032F7 F0A9      BEQ	0x330D
(0931)                         rGLCD_cursor_off(i,j);
    032F8 9120 0153 LDS	R18,j
    032FA 9130 0154 LDS	R19,j+1
    032FC 9100 0151 LDS	R16,i
    032FE 9110 0152 LDS	R17,i+1
    03300 940E 0749 CALL	_rGLCD_cursor_off
(0932)                         rGLCD_fail(i,j);
    03302 9120 0153 LDS	R18,j
    03304 9130 0154 LDS	R19,j+1
    03306 9100 0151 LDS	R16,i
    03308 9110 0152 LDS	R17,i+1
    0330A 940E 09A9 CALL	_rGLCD_fail
(0933)                     }
    0330C C00A      RJMP	0x3317
(0934)                     else rGLCD_mine(i,j);
    0330D 9120 0153 LDS	R18,j
    0330F 9130 0154 LDS	R19,j+1
    03311 9100 0151 LDS	R16,i
    03313 9110 0152 LDS	R17,i+1
    03315 940E 0832 CALL	_rGLCD_mine
(0935)                     state=0;
    03317 2422      CLR	R2
    03318 9220 02E9 STS	state,R2
(0936)                     delay_ms(300);
    0331A E20C      LDI	R16,0x2C
    0331B E011      LDI	R17,1
    0331C 940E 04B0 CALL	_delay_ms
(0937)                 }
    0331E C079      RJMP	0x3398
(0938)                 else if(state==1){
    0331F 9180 02E9 LDS	R24,state
    03321 3081      CPI	R24,1
    03322 F471      BNE	0x3331
(0939)                     rGLCD_cursor_off(p_i,p_j);
    03323 9120 02ED LDS	R18,p_j
    03325 9130 02EE LDS	R19,p_j+1
    03327 9100 02EB LDS	R16,p_i
    03329 9110 02EC LDS	R17,p_i+1
    0332B 940E 0749 CALL	_rGLCD_cursor_off
(0940)                     state=-1;
    0332D EF8F      LDI	R24,0xFF
    0332E 9380 02E9 STS	state,R24
(0941)                 }
    03330 C067      RJMP	0x3398
(0942)                 else if(state==2){
    03331 9180 02E9 LDS	R24,state
    03333 3082      CPI	R24,2
    03334 F009      BEQ	0x3336
    03335 C062      RJMP	0x3398
(0943)                     if(!game_set[i][j]) {
    03336 9120 0151 LDS	R18,i
    03338 9130 0152 LDS	R19,i+1
    0333A E100      LDI	R16,0x10
    0333B E010      LDI	R17,0
    0333C 940E 4674 CALL	empy16s
    0333E E587      LDI	R24,0x57
    0333F E094      LDI	R25,4
    03340 0118      MOVW	R2,R16
    03341 0E28      ADD	R2,R24
    03342 1E39      ADC	R3,R25
    03343 91E0 0153 LDS	R30,j
    03345 91F0 0154 LDS	R31,j+1
    03347 0FEE      LSL	R30
    03348 1FFF      ROL	R31
    03349 0DE2      ADD	R30,R2
    0334A 1DF3      ADC	R31,R3
    0334B 8020      LD	R2,Z
    0334C 8031      LDD	R3,Z+1
    0334D 2022      TST	R2
    0334E F009      BEQ	0x3350
    0334F C040      RJMP	0x3390
    03350 2033      TST	R3
    03351 F009      BEQ	0x3353
    03352 C03D      RJMP	0x3390
(0944)                         game_set[i][j]=6;
    03353 9120 0151 LDS	R18,i
    03355 9130 0152 LDS	R19,i+1
    03357 E100      LDI	R16,0x10
    03358 E010      LDI	R17,0
    03359 940E 4674 CALL	empy16s
    0335B E587      LDI	R24,0x57
    0335C E094      LDI	R25,4
    0335D 0118      MOVW	R2,R16
    0335E 0E28      ADD	R2,R24
    0335F 1E39      ADC	R3,R25
    03360 91E0 0153 LDS	R30,j
    03362 91F0 0154 LDS	R31,j+1
    03364 0FEE      LSL	R30
    03365 1FFF      ROL	R31
    03366 0DE2      ADD	R30,R2
    03367 1DF3      ADC	R31,R3
    03368 E086      LDI	R24,6
    03369 E090      LDI	R25,0
    0336A 8391      STD	Z+1,R25
    0336B 8380      ST	Z,R24
(0945)                         mine2x=i,mine2y=j;
    0336C 9020 0151 LDS	R2,i
    0336E 9030 0152 LDS	R3,i+1
    03370 9230 0431 STS	mine2x+1,R3
    03372 9220 0430 STS	mine2x,R2
    03374 9020 0153 LDS	R2,j
    03376 9030 0154 LDS	R3,j+1
    03378 9230 042F STS	mine2y+1,R3
    0337A 9220 042E STS	mine2y,R2
(0946)                         i=0,j=0;
    0337C 2422      CLR	R2
    0337D 2433      CLR	R3
    0337E 9230 0152 STS	i+1,R3
    03380 9220 0151 STS	i,R2
    03382 9230 0154 STS	j+1,R3
    03384 9220 0153 STS	j,R2
(0947)                         cnt++;
    03386 9180 02EA LDS	R24,cnt
    03388 5F8F      SUBI	R24,0xFF
    03389 9380 02EA STS	cnt,R24
(0948)                         delay_ms(300);
    0338B E20C      LDI	R16,0x2C
    0338C E011      LDI	R17,1
    0338D 940E 04B0 CALL	_delay_ms
(0949)                     }
    0338F C005      RJMP	0x3395
(0950)                     else {
(0951)                         vibrating();
    03390 940E 1533 CALL	_vibrating
(0952)                         error=0;
    03392 2422      CLR	R2
    03393 9220 02EF STS	error,R2
(0953)                     }
(0954)                     state=-1;
    03395 EF8F      LDI	R24,0xFF
    03396 9380 02E9 STS	state,R24
(0955)                 }
(0956)             }
    03398 9180 02EA LDS	R24,cnt
    0339A 3087      CPI	R24,7
    0339B F409      BNE	0x339D
    0339C CEB8      RJMP	0x3255
    0339D C14B      RJMP	0x34E9
(0957)             while(cnt==8){ //rock1
(0958)                 AtoD();
    0339E 940E 14EA CALL	_AtoD
(0959)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    033A0 9020 02E9 LDS	R2,state
    033A2 2022      TST	R2
    033A3 F571      BNE	0x33D2
    033A4 9140 03CF LDS	R20,val_x
    033A6 9150 03D0 LDS	R21,val_x+1
    033A8 E884      LDI	R24,0x84
    033A9 E093      LDI	R25,3
    033AA 1784      CP	R24,R20
    033AB 0795      CPC	R25,R21
    033AC F07C      BLT	0x33BC
    033AD 3644      CPI	R20,0x64
    033AE E0E0      LDI	R30,0
    033AF 075E      CPC	R21,R30
    033B0 F05C      BLT	0x33BC
    033B1 9140 03CD LDS	R20,val_y
    033B3 9150 03CE LDS	R21,val_y+1
    033B5 1784      CP	R24,R20
    033B6 0795      CPC	R25,R21
    033B7 F024      BLT	0x33BC
    033B8 3644      CPI	R20,0x64
    033B9 E0E0      LDI	R30,0
    033BA 075E      CPC	R21,R30
    033BB F4B4      BGE	0x33D2
(0960)                     p_i=i, p_j=j;
    033BC 9020 0151 LDS	R2,i
    033BE 9030 0152 LDS	R3,i+1
    033C0 9230 02EC STS	p_i+1,R3
    033C2 9220 02EB STS	p_i,R2
    033C4 9020 0153 LDS	R2,j
    033C6 9030 0154 LDS	R3,j+1
    033C8 9230 02EE STS	p_j+1,R3
    033CA 9220 02ED STS	p_j,R2
(0961)                     joystick_setting();
    033CC 940E 173A CALL	_joystick_setting
(0962)                     state=1;
    033CE E081      LDI	R24,1
    033CF 9380 02E9 STS	state,R24
(0963)                 }
    033D1 C009      RJMP	0x33DB
(0964)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    033D2 9020 02E9 LDS	R2,state
    033D4 2022      TST	R2
    033D5 F429      BNE	0x33DB
    033D6 9903      SBIC	0x00,3
    033D7 C003      RJMP	0x33DB
    033D8 E082      LDI	R24,2
    033D9 9380 02E9 STS	state,R24
(0965)                 if(state==-1){
    033DB 9180 02E9 LDS	R24,state
    033DD 3F8F      CPI	R24,0xFF
    033DE F009      BEQ	0x33E0
    033DF C092      RJMP	0x3472
(0966)                     rGLCD_item(item1x,item1y),rGLCD_item(item2x,item2y),rGLCD_mine(mine1x,mine1y),rGLCD_mine(mine2x,mine2y),
    033E0 9120 043A LDS	R18,item1y
    033E2 9130 043B LDS	R19,item1y+1
    033E4 9100 043C LDS	R16,item1x
    033E6 9110 043D LDS	R17,item1x+1
    033E8 940E 0945 CALL	_rGLCD_item
    033EA 9120 0436 LDS	R18,item2y
    033EC 9130 0437 LDS	R19,item2y+1
    033EE 9100 0438 LDS	R16,item2x
    033F0 9110 0439 LDS	R17,item2x+1
    033F2 940E 0945 CALL	_rGLCD_item
    033F4 9120 0432 LDS	R18,mine1y
    033F6 9130 0433 LDS	R19,mine1y+1
    033F8 9100 0434 LDS	R16,mine1x
    033FA 9110 0435 LDS	R17,mine1x+1
    033FC 940E 0832 CALL	_rGLCD_mine
    033FE 9120 042E LDS	R18,mine2y
    03400 9130 042F LDS	R19,mine2y+1
    03402 9100 0430 LDS	R16,mine2x
    03404 9110 0431 LDS	R17,mine2x+1
    03406 940E 0832 CALL	_rGLCD_mine
    03408 9120 044A LDS	R18,ship1y
    0340A 9130 044B LDS	R19,ship1y+1
    0340C 9100 044C LDS	R16,ship1x
    0340E 9110 044D LDS	R17,ship1x+1
    03410 940E 04FB CALL	_rship1
    03412 9120 0446 LDS	R18,ship2y
    03414 9130 0447 LDS	R19,ship2y+1
    03416 9100 0448 LDS	R16,ship2x
    03418 9110 0449 LDS	R17,ship2x+1
    0341A 940E 0522 CALL	_rship2
    0341C 9120 0442 LDS	R18,ship3y
    0341E 9130 0443 LDS	R19,ship3y+1
    03420 9100 0444 LDS	R16,ship3x
    03422 9110 0445 LDS	R17,ship3x+1
    03424 940E 0549 CALL	_rship3
    03426 9120 043E LDS	R18,ship4y
    03428 9130 043F LDS	R19,ship4y+1
    0342A 9100 0440 LDS	R16,ship4x
    0342C 9110 0441 LDS	R17,ship4x+1
    0342E 940E 0722 CALL	_rship4
(0967)                     rship1(ship1x,ship1y), rship2(ship2x,ship2y), rship3(ship3x,ship3y), rship4(ship4x,ship4y);
(0968)                     if(game_set[i][j]){
    03430 9120 0151 LDS	R18,i
    03432 9130 0152 LDS	R19,i+1
    03434 E100      LDI	R16,0x10
    03435 E010      LDI	R17,0
    03436 940E 4674 CALL	empy16s
    03438 E587      LDI	R24,0x57
    03439 E094      LDI	R25,4
    0343A 0118      MOVW	R2,R16
    0343B 0E28      ADD	R2,R24
    0343C 1E39      ADC	R3,R25
    0343D 91E0 0153 LDS	R30,j
    0343F 91F0 0154 LDS	R31,j+1
    03441 0FEE      LSL	R30
    03442 1FFF      ROL	R31
    03443 0DE2      ADD	R30,R2
    03444 1DF3      ADC	R31,R3
    03445 8020      LD	R2,Z
    03446 8031      LDD	R3,Z+1
    03447 2022      TST	R2
    03448 F411      BNE	0x344B
    03449 2033      TST	R3
    0344A F0A9      BEQ	0x3460
(0969)                         rGLCD_cursor_off(i,j);
    0344B 9120 0153 LDS	R18,j
    0344D 9130 0154 LDS	R19,j+1
    0344F 9100 0151 LDS	R16,i
    03451 9110 0152 LDS	R17,i+1
    03453 940E 0749 CALL	_rGLCD_cursor_off
(0970)                         rGLCD_fail(i,j);
    03455 9120 0153 LDS	R18,j
    03457 9130 0154 LDS	R19,j+1
    03459 9100 0151 LDS	R16,i
    0345B 9110 0152 LDS	R17,i+1
    0345D 940E 09A9 CALL	_rGLCD_fail
(0971)                     }
    0345F C00A      RJMP	0x346A
(0972)                     else rGLCD_rock(i,j);
    03460 9120 0153 LDS	R18,j
    03462 9130 0154 LDS	R19,j+1
    03464 9100 0151 LDS	R16,i
    03466 9110 0152 LDS	R17,i+1
    03468 940E 0A33 CALL	_rGLCD_rock
(0973)                     state=0;
    0346A 2422      CLR	R2
    0346B 9220 02E9 STS	state,R2
(0974)                     delay_ms(300);
    0346D E20C      LDI	R16,0x2C
    0346E E011      LDI	R17,1
    0346F 940E 04B0 CALL	_delay_ms
(0975)                 }
    03471 C077      RJMP	0x34E9
(0976)                 else if(state==1){
    03472 9180 02E9 LDS	R24,state
    03474 3081      CPI	R24,1
    03475 F471      BNE	0x3484
(0977)                     rGLCD_cursor_off(p_i,p_j);
    03476 9120 02ED LDS	R18,p_j
    03478 9130 02EE LDS	R19,p_j+1
    0347A 9100 02EB LDS	R16,p_i
    0347C 9110 02EC LDS	R17,p_i+1
    0347E 940E 0749 CALL	_rGLCD_cursor_off
(0978)                     state=-1;
    03480 EF8F      LDI	R24,0xFF
    03481 9380 02E9 STS	state,R24
(0979)                 }
    03483 C065      RJMP	0x34E9
(0980)                 else if(state==2){
    03484 9180 02E9 LDS	R24,state
    03486 3082      CPI	R24,2
    03487 F009      BEQ	0x3489
    03488 C060      RJMP	0x34E9
(0981)                     if(!game_set[i][j]) {
    03489 9120 0151 LDS	R18,i
    0348B 9130 0152 LDS	R19,i+1
    0348D E100      LDI	R16,0x10
    0348E E010      LDI	R17,0
    0348F 940E 4674 CALL	empy16s
    03491 E587      LDI	R24,0x57
    03492 E094      LDI	R25,4
    03493 0118      MOVW	R2,R16
    03494 0E28      ADD	R2,R24
    03495 1E39      ADC	R3,R25
    03496 91E0 0153 LDS	R30,j
    03498 91F0 0154 LDS	R31,j+1
    0349A 0FEE      LSL	R30
    0349B 1FFF      ROL	R31
    0349C 0DE2      ADD	R30,R2
    0349D 1DF3      ADC	R31,R3
    0349E 8020      LD	R2,Z
    0349F 8031      LDD	R3,Z+1
    034A0 2022      TST	R2
    034A1 F009      BEQ	0x34A3
    034A2 C03E      RJMP	0x34E1
    034A3 2033      TST	R3
    034A4 F009      BEQ	0x34A6
    034A5 C03B      RJMP	0x34E1
(0982)                         game_set[i][j]=7;
    034A6 9120 0151 LDS	R18,i
    034A8 9130 0152 LDS	R19,i+1
    034AA E100      LDI	R16,0x10
    034AB E010      LDI	R17,0
    034AC 940E 4674 CALL	empy16s
    034AE E587      LDI	R24,0x57
    034AF E094      LDI	R25,4
    034B0 0118      MOVW	R2,R16
    034B1 0E28      ADD	R2,R24
    034B2 1E39      ADC	R3,R25
    034B3 91E0 0153 LDS	R30,j
    034B5 91F0 0154 LDS	R31,j+1
    034B7 0FEE      LSL	R30
    034B8 1FFF      ROL	R31
    034B9 0DE2      ADD	R30,R2
    034BA 1DF3      ADC	R31,R3
    034BB E087      LDI	R24,7
    034BC E090      LDI	R25,0
    034BD 8391      STD	Z+1,R25
    034BE 8380      ST	Z,R24
(0983)                         rock1x=i,rock1y=j;
    034BF 9020 0151 LDS	R2,i
    034C1 9030 0152 LDS	R3,i+1
    034C3 9230 042D STS	rock1x+1,R3
    034C5 9220 042C STS	rock1x,R2
    034C7 9020 0153 LDS	R2,j
    034C9 9030 0154 LDS	R3,j+1
    034CB 9230 042B STS	rock1y+1,R3
    034CD 9220 042A STS	rock1y,R2
(0984)                         i=0,j=0;
    034CF 2422      CLR	R2
    034D0 2433      CLR	R3
    034D1 9230 0152 STS	i+1,R3
    034D3 9220 0151 STS	i,R2
    034D5 9230 0154 STS	j+1,R3
    034D7 9220 0153 STS	j,R2
(0985)                         cnt=9;
    034D9 E089      LDI	R24,0x9
    034DA 9380 02EA STS	cnt,R24
(0986)                         delay_ms(300);
    034DC E20C      LDI	R16,0x2C
    034DD E011      LDI	R17,1
    034DE 940E 04B0 CALL	_delay_ms
(0987)                     }
    034E0 C005      RJMP	0x34E6
(0988)                     else {
(0989)                         vibrating();
    034E1 940E 1533 CALL	_vibrating
(0990)                         error=0;
    034E3 2422      CLR	R2
    034E4 9220 02EF STS	error,R2
(0991)                     }
(0992)                     state=-1;
    034E6 EF8F      LDI	R24,0xFF
    034E7 9380 02E9 STS	state,R24
(0993)                 }
(0994)             }
    034E9 9180 02EA LDS	R24,cnt
    034EB 3088      CPI	R24,0x8
    034EC F409      BNE	0x34EE
    034ED CEB0      RJMP	0x339E
    034EE C152      RJMP	0x3641
(0995)             while(cnt==9){ //rock2
(0996)                 AtoD();
    034EF 940E 14EA CALL	_AtoD
(0997)                 if(!state&&(val_x>900||val_x<100||val_y>900||val_y<100)) {
    034F1 9020 02E9 LDS	R2,state
    034F3 2022      TST	R2
    034F4 F571      BNE	0x3523
    034F5 9140 03CF LDS	R20,val_x
    034F7 9150 03D0 LDS	R21,val_x+1
    034F9 E884      LDI	R24,0x84
    034FA E093      LDI	R25,3
    034FB 1784      CP	R24,R20
    034FC 0795      CPC	R25,R21
    034FD F07C      BLT	0x350D
    034FE 3644      CPI	R20,0x64
    034FF E0E0      LDI	R30,0
    03500 075E      CPC	R21,R30
    03501 F05C      BLT	0x350D
    03502 9140 03CD LDS	R20,val_y
    03504 9150 03CE LDS	R21,val_y+1
    03506 1784      CP	R24,R20
    03507 0795      CPC	R25,R21
    03508 F024      BLT	0x350D
    03509 3644      CPI	R20,0x64
    0350A E0E0      LDI	R30,0
    0350B 075E      CPC	R21,R30
    0350C F4B4      BGE	0x3523
(0998)                     p_i=i, p_j=j;
    0350D 9020 0151 LDS	R2,i
    0350F 9030 0152 LDS	R3,i+1
    03511 9230 02EC STS	p_i+1,R3
    03513 9220 02EB STS	p_i,R2
    03515 9020 0153 LDS	R2,j
    03517 9030 0154 LDS	R3,j+1
    03519 9230 02EE STS	p_j+1,R3
    0351B 9220 02ED STS	p_j,R2
(0999)                     joystick_setting();
    0351D 940E 173A CALL	_joystick_setting
(1000)                     state=1;
    0351F E081      LDI	R24,1
    03520 9380 02E9 STS	state,R24
(1001)                 }
    03522 C009      RJMP	0x352C
(1002)                 else if(!state&&(PINF&0x08)==0x00) state=2;
    03523 9020 02E9 LDS	R2,state
    03525 2022      TST	R2
    03526 F429      BNE	0x352C
    03527 9903      SBIC	0x00,3
    03528 C003      RJMP	0x352C
    03529 E082      LDI	R24,2
    0352A 9380 02E9 STS	state,R24
(1003)                 if(state==-1){
    0352C 9180 02E9 LDS	R24,state
    0352E 3F8F      CPI	R24,0xFF
    0352F F009      BEQ	0x3531
    03530 C09C      RJMP	0x35CD
(1004)                     rGLCD_item(item1x,item1y),rGLCD_item(item2x,item2y),rGLCD_mine(mine1x,mine1y),rGLCD_mine(mine2x,mine2y),rGLCD_rock(rock1x,rock1y),
    03531 9120 043A LDS	R18,item1y
    03533 9130 043B LDS	R19,item1y+1
    03535 9100 043C LDS	R16,item1x
    03537 9110 043D LDS	R17,item1x+1
    03539 940E 0945 CALL	_rGLCD_item
    0353B 9120 0436 LDS	R18,item2y
    0353D 9130 0437 LDS	R19,item2y+1
    0353F 9100 0438 LDS	R16,item2x
    03541 9110 0439 LDS	R17,item2x+1
    03543 940E 0945 CALL	_rGLCD_item
    03545 9120 0432 LDS	R18,mine1y
    03547 9130 0433 LDS	R19,mine1y+1
    03549 9100 0434 LDS	R16,mine1x
    0354B 9110 0435 LDS	R17,mine1x+1
    0354D 940E 0832 CALL	_rGLCD_mine
    0354F 9120 042E LDS	R18,mine2y
    03551 9130 042F LDS	R19,mine2y+1
    03553 9100 0430 LDS	R16,mine2x
    03555 9110 0431 LDS	R17,mine2x+1
    03557 940E 0832 CALL	_rGLCD_mine
    03559 9120 042A LDS	R18,rock1y
    0355B 9130 042B LDS	R19,rock1y+1
    0355D 9100 042C LDS	R16,rock1x
    0355F 9110 042D LDS	R17,rock1x+1
    03561 940E 0A33 CALL	_rGLCD_rock
    03563 9120 044A LDS	R18,ship1y
    03565 9130 044B LDS	R19,ship1y+1
    03567 9100 044C LDS	R16,ship1x
    03569 9110 044D LDS	R17,ship1x+1
    0356B 940E 04FB CALL	_rship1
    0356D 9120 0446 LDS	R18,ship2y
    0356F 9130 0447 LDS	R19,ship2y+1
    03571 9100 0448 LDS	R16,ship2x
    03573 9110 0449 LDS	R17,ship2x+1
    03575 940E 0522 CALL	_rship2
    03577 9120 0442 LDS	R18,ship3y
    03579 9130 0443 LDS	R19,ship3y+1
    0357B 9100 0444 LDS	R16,ship3x
    0357D 9110 0445 LDS	R17,ship3x+1
    0357F 940E 0549 CALL	_rship3
    03581 9120 043E LDS	R18,ship4y
    03583 9130 043F LDS	R19,ship4y+1
    03585 9100 0440 LDS	R16,ship4x
    03587 9110 0441 LDS	R17,ship4x+1
    03589 940E 0722 CALL	_rship4
(1005)                     rship1(ship1x,ship1y), rship2(ship2x,ship2y), rship3(ship3x,ship3y), rship4(ship4x,ship4y);
(1006)                     if(game_set[i][j]){
    0358B 9120 0151 LDS	R18,i
    0358D 9130 0152 LDS	R19,i+1
    0358F E100      LDI	R16,0x10
    03590 E010      LDI	R17,0
    03591 940E 4674 CALL	empy16s
    03593 E587      LDI	R24,0x57
    03594 E094      LDI	R25,4
    03595 0118      MOVW	R2,R16
    03596 0E28      ADD	R2,R24
    03597 1E39      ADC	R3,R25
    03598 91E0 0153 LDS	R30,j
    0359A 91F0 0154 LDS	R31,j+1
    0359C 0FEE      LSL	R30
    0359D 1FFF      ROL	R31
    0359E 0DE2      ADD	R30,R2
    0359F 1DF3      ADC	R31,R3
    035A0 8020      LD	R2,Z
    035A1 8031      LDD	R3,Z+1
    035A2 2022      TST	R2
    035A3 F411      BNE	0x35A6
    035A4 2033      TST	R3
    035A5 F0A9      BEQ	0x35BB
(1007)                         rGLCD_cursor_off(i,j);
    035A6 9120 0153 LDS	R18,j
    035A8 9130 0154 LDS	R19,j+1
    035AA 9100 0151 LDS	R16,i
    035AC 9110 0152 LDS	R17,i+1
    035AE 940E 0749 CALL	_rGLCD_cursor_off
(1008)                         rGLCD_fail(i,j);
    035B0 9120 0153 LDS	R18,j
    035B2 9130 0154 LDS	R19,j+1
    035B4 9100 0151 LDS	R16,i
    035B6 9110 0152 LDS	R17,i+1
    035B8 940E 09A9 CALL	_rGLCD_fail
(1009)                     }
    035BA C00A      RJMP	0x35C5
(1010)                     else rGLCD_rock(i,j);
    035BB 9120 0153 LDS	R18,j
    035BD 9130 0154 LDS	R19,j+1
    035BF 9100 0151 LDS	R16,i
    035C1 9110 0152 LDS	R17,i+1
    035C3 940E 0A33 CALL	_rGLCD_rock
(1011)                     state=0;
    035C5 2422      CLR	R2
    035C6 9220 02E9 STS	state,R2
(1012)                     delay_ms
    035C8 E20C      LDI	R16,0x2C
    035C9 E011      LDI	R17,1
    035CA 940E 04B0 CALL	_delay_ms
(1013)                     (300);
(1014)                 }
    035CC C074      RJMP	0x3641
(1015)                 else if(state==1){
    035CD 9180 02E9 LDS	R24,state
    035CF 3081      CPI	R24,1
    035D0 F471      BNE	0x35DF
(1016)                     rGLCD_cursor_off(p_i,p_j);
    035D1 9120 02ED LDS	R18,p_j
    035D3 9130 02EE LDS	R19,p_j+1
    035D5 9100 02EB LDS	R16,p_i
    035D7 9110 02EC LDS	R17,p_i+1
    035D9 940E 0749 CALL	_rGLCD_cursor_off
(1017)                     state=-1;
    035DB EF8F      LDI	R24,0xFF
    035DC 9380 02E9 STS	state,R24
(1018)                 }
    035DE C062      RJMP	0x3641
(1019)                 else if(state==2){
    035DF 9180 02E9 LDS	R24,state
    035E1 3082      CPI	R24,2
    035E2 F009      BEQ	0x35E4
    035E3 C05D      RJMP	0x3641
(1020)                     if(!game_set[i][j]) {
    035E4 9120 0151 LDS	R18,i
    035E6 9130 0152 LDS	R19,i+1
    035E8 E100      LDI	R16,0x10
    035E9 E010      LDI	R17,0
    035EA 940E 4674 CALL	empy16s
    035EC E587      LDI	R24,0x57
    035ED E094      LDI	R25,4
    035EE 0118      MOVW	R2,R16
    035EF 0E28      ADD	R2,R24
    035F0 1E39      ADC	R3,R25
    035F1 91E0 0153 LDS	R30,j
    035F3 91F0 0154 LDS	R31,j+1
    035F5 0FEE      LSL	R30
    035F6 1FFF      ROL	R31
    035F7 0DE2      ADD	R30,R2
    035F8 1DF3      ADC	R31,R3
    035F9 8020      LD	R2,Z
    035FA 8031      LDD	R3,Z+1
    035FB 2022      TST	R2
    035FC F009      BEQ	0x35FE
    035FD C03E      RJMP	0x363C
    035FE 2033      TST	R3
    035FF F009      BEQ	0x3601
    03600 C03B      RJMP	0x363C
(1021)                         game_set[i][j]=7;
    03601 9120 0151 LDS	R18,i
    03603 9130 0152 LDS	R19,i+1
    03605 E100      LDI	R16,0x10
    03606 E010      LDI	R17,0
    03607 940E 4674 CALL	empy16s
    03609 E587      LDI	R24,0x57
    0360A E094      LDI	R25,4
    0360B 0118      MOVW	R2,R16
    0360C 0E28      ADD	R2,R24
    0360D 1E39      ADC	R3,R25
    0360E 91E0 0153 LDS	R30,j
    03610 91F0 0154 LDS	R31,j+1
    03612 0FEE      LSL	R30
    03613 1FFF      ROL	R31
    03614 0DE2      ADD	R30,R2
    03615 1DF3      ADC	R31,R3
    03616 E087      LDI	R24,7
    03617 E090      LDI	R25,0
    03618 8391      STD	Z+1,R25
    03619 8380      ST	Z,R24
(1022)                         rock2x=i,rock2y=j;
    0361A 9020 0151 LDS	R2,i
    0361C 9030 0152 LDS	R3,i+1
    0361E 9230 0429 STS	rock2x+1,R3
    03620 9220 0428 STS	rock2x,R2
    03622 9020 0153 LDS	R2,j
    03624 9030 0154 LDS	R3,j+1
    03626 9230 0427 STS	rock2y+1,R3
    03628 9220 0426 STS	rock2y,R2
(1023)                         i=0,j=0;
    0362A 2422      CLR	R2
    0362B 2433      CLR	R3
    0362C 9230 0152 STS	i+1,R3
    0362E 9220 0151 STS	i,R2
    03630 9230 0154 STS	j+1,R3
    03632 9220 0153 STS	j,R2
(1024)                         cnt=10;
    03634 E08A      LDI	R24,0xA
    03635 9380 02EA STS	cnt,R24
(1025)                         delay_ms(300);
    03637 E20C      LDI	R16,0x2C
    03638 E011      LDI	R17,1
    03639 940E 04B0 CALL	_delay_ms
(1026)                     }
    0363B C005      RJMP	0x3641
(1027)                     else {
(1028)                         vibrating();
    0363C 940E 1533 CALL	_vibrating
(1029)                         error=0;
    0363E 2422      CLR	R2
    0363F 9220 02EF STS	error,R2
(1030)                     }
(1031)                 }
(1032)             }
    03641 9180 02EA LDS	R24,cnt
    03643 3089      CPI	R24,0x9
    03644 F409      BNE	0x3646
    03645 CEA9      RJMP	0x34EF
(1033)             break;
    03646 C004      RJMP	0x364B
    03647 940C 27A4 JMP	0x27A4
    03649 940C 25FE JMP	0x25FE
(1034)         }
(1035)         break;
(1036)     }
(1037) 
(1038)     GLCD_Initialize();
    0364B 940E 0487 CALL	_GLCD_Initialize
(1039)     GLCD_Clear();
    0364D 940E 04C4 CALL	_GLCD_Clear
(1040)     srand(AtoD_cnt);
    0364F 9100 02F0 LDS	R16,AtoD_cnt
    03651 9110 02F1 LDS	R17,AtoD_cnt+1
    03653 940E 0826 CALL	_srand
(1041)     GLCD_screen();
    03655 940E 0BDF CALL	_GLCD_screen
(1042) 
(1043)     for(i=0;i<8;i++)
    03657 2422      CLR	R2
    03658 2433      CLR	R3
    03659 9230 0152 STS	i+1,R3
    0365B 9220 0151 STS	i,R2
(1044)         for(j=0;j<8;j++){
    0365D 2422      CLR	R2
    0365E 2433      CLR	R3
    0365F 9230 0154 STS	j+1,R3
    03661 9220 0153 STS	j,R2
(1045)             if(game_set[i][j]>=1&&game_set[i][j]<=4) rGLCD_1block(i,j);
    03663 9120 0151 LDS	R18,i
    03665 9130 0152 LDS	R19,i+1
    03667 E100      LDI	R16,0x10
    03668 E010      LDI	R17,0
    03669 940E 4674 CALL	empy16s
    0366B E587      LDI	R24,0x57
    0366C E094      LDI	R25,4
    0366D 0118      MOVW	R2,R16
    0366E 0E28      ADD	R2,R24
    0366F 1E39      ADC	R3,R25
    03670 91E0 0153 LDS	R30,j
    03672 91F0 0154 LDS	R31,j+1
    03674 0FEE      LSL	R30
    03675 1FFF      ROL	R31
    03676 0DE2      ADD	R30,R2
    03677 1DF3      ADC	R31,R3
    03678 8140      LD	R20,Z
    03679 8151      LDD	R21,Z+1
    0367A 3041      CPI	R20,1
    0367B E0E0      LDI	R30,0
    0367C 075E      CPC	R21,R30
    0367D F084      BLT	0x368E
    0367E E084      LDI	R24,4
    0367F E090      LDI	R25,0
    03680 1784      CP	R24,R20
    03681 0795      CPC	R25,R21
    03682 F05C      BLT	0x368E
    03683 9120 0153 LDS	R18,j
    03685 9130 0154 LDS	R19,j+1
    03687 9100 0151 LDS	R16,i
    03689 9110 0152 LDS	R17,i+1
    0368B 940E 04C7 CALL	_rGLCD_1block
    0368D C071      RJMP	0x36FF
(1046)             else if(game_set[i][j]==5) rGLCD_item(i,j);
    0368E 9120 0151 LDS	R18,i
    03690 9130 0152 LDS	R19,i+1
    03692 E100      LDI	R16,0x10
    03693 E010      LDI	R17,0
    03694 940E 4674 CALL	empy16s
    03696 E587      LDI	R24,0x57
    03697 E094      LDI	R25,4
    03698 0118      MOVW	R2,R16
    03699 0E28      ADD	R2,R24
    0369A 1E39      ADC	R3,R25
    0369B 91E0 0153 LDS	R30,j
    0369D 91F0 0154 LDS	R31,j+1
    0369F 0FEE      LSL	R30
    036A0 1FFF      ROL	R31
    036A1 0DE2      ADD	R30,R2
    036A2 1DF3      ADC	R31,R3
    036A3 8180      LD	R24,Z
    036A4 8191      LDD	R25,Z+1
    036A5 3085      CPI	R24,5
    036A6 E0E0      LDI	R30,0
    036A7 079E      CPC	R25,R30
    036A8 F459      BNE	0x36B4
    036A9 9120 0153 LDS	R18,j
    036AB 9130 0154 LDS	R19,j+1
    036AD 9100 0151 LDS	R16,i
    036AF 9110 0152 LDS	R17,i+1
    036B1 940E 0945 CALL	_rGLCD_item
    036B3 C04B      RJMP	0x36FF
(1047)             else if(game_set[i][j]==6) rGLCD_mine(i,j);
    036B4 9120 0151 LDS	R18,i
    036B6 9130 0152 LDS	R19,i+1
    036B8 E100      LDI	R16,0x10
    036B9 E010      LDI	R17,0
    036BA 940E 4674 CALL	empy16s
    036BC E587      LDI	R24,0x57
    036BD E094      LDI	R25,4
    036BE 0118      MOVW	R2,R16
    036BF 0E28      ADD	R2,R24
    036C0 1E39      ADC	R3,R25
    036C1 91E0 0153 LDS	R30,j
    036C3 91F0 0154 LDS	R31,j+1
    036C5 0FEE      LSL	R30
    036C6 1FFF      ROL	R31
    036C7 0DE2      ADD	R30,R2
    036C8 1DF3      ADC	R31,R3
    036C9 8180      LD	R24,Z
    036CA 8191      LDD	R25,Z+1
    036CB 3086      CPI	R24,6
    036CC E0E0      LDI	R30,0
    036CD 079E      CPC	R25,R30
    036CE F459      BNE	0x36DA
    036CF 9120 0153 LDS	R18,j
    036D1 9130 0154 LDS	R19,j+1
    036D3 9100 0151 LDS	R16,i
    036D5 9110 0152 LDS	R17,i+1
    036D7 940E 0832 CALL	_rGLCD_mine
    036D9 C025      RJMP	0x36FF
(1048)             else if(game_set[i][j]==7) rGLCD_rock(i,j);
    036DA 9120 0151 LDS	R18,i
    036DC 9130 0152 LDS	R19,i+1
    036DE E100      LDI	R16,0x10
    036DF E010      LDI	R17,0
    036E0 940E 4674 CALL	empy16s
    036E2 E587      LDI	R24,0x57
    036E3 E094      LDI	R25,4
    036E4 0118      MOVW	R2,R16
    036E5 0E28      ADD	R2,R24
    036E6 1E39      ADC	R3,R25
    036E7 91E0 0153 LDS	R30,j
    036E9 91F0 0154 LDS	R31,j+1
    036EB 0FEE      LSL	R30
    036EC 1FFF      ROL	R31
    036ED 0DE2      ADD	R30,R2
    036EE 1DF3      ADC	R31,R3
    036EF 8180      LD	R24,Z
    036F0 8191      LDD	R25,Z+1
    036F1 3087      CPI	R24,7
    036F2 E0E0      LDI	R30,0
    036F3 079E      CPC	R25,R30
    036F4 F451      BNE	0x36FF
    036F5 9120 0153 LDS	R18,j
    036F7 9130 0154 LDS	R19,j+1
    036F9 9100 0151 LDS	R16,i
    036FB 9110 0152 LDS	R17,i+1
    036FD 940E 0A33 CALL	_rGLCD_rock
(1049)         }
    036FF 9180 0153 LDS	R24,j
    03701 9190 0154 LDS	R25,j+1
    03703 9601      ADIW	R24,1
    03704 9390 0154 STS	j+1,R25
    03706 9380 0153 STS	j,R24
    03708 3088      CPI	R24,0x8
    03709 E0E0      LDI	R30,0
    0370A 079E      CPC	R25,R30
    0370B F40C      BGE	0x370D
    0370C CF56      RJMP	0x3663
    0370D 9180 0151 LDS	R24,i
    0370F 9190 0152 LDS	R25,i+1
    03711 9601      ADIW	R24,1
    03712 9390 0152 STS	i+1,R25
    03714 9380 0151 STS	i,R24
    03716 3088      CPI	R24,0x8
    03717 E0E0      LDI	R30,0
    03718 079E      CPC	R25,R30
    03719 F40C      BGE	0x371B
    0371A CF42      RJMP	0x365D
(1050) 
(1051)     if(mode==0){//1ÀÎ¿ë
    0371B 9020 02E6 LDS	R2,mode
    0371D 2022      TST	R2
    0371E F011      BEQ	0x3721
    0371F 940C 44C1 JMP	0x44C1
(1052)         char overlap=0;
    03721 24AA      CLR	R10
(1053)         for(i=0;i<8;i++)
    03722 2422      CLR	R2
    03723 2433      CLR	R3
    03724 9230 0152 STS	i+1,R3
    03726 9220 0151 STS	i,R2
(1054)         for(j=0;j<8;j++)
    03728 2422      CLR	R2
    03729 2433      CLR	R3
    0372A 9230 0154 STS	j+1,R3
    0372C 9220 0153 STS	j,R2
(1055)         counter_set[i][j]=0;
    0372E 9120 0151 LDS	R18,i
    03730 9130 0152 LDS	R19,i+1
    03732 E100      LDI	R16,0x10
    03733 E010      LDI	R17,0
    03734 940E 4674 CALL	empy16s
    03736 E585      LDI	R24,0x55
    03737 E091      LDI	R25,1
    03738 0118      MOVW	R2,R16
    03739 0E28      ADD	R2,R24
    0373A 1E39      ADC	R3,R25
    0373B 91E0 0153 LDS	R30,j
    0373D 91F0 0154 LDS	R31,j+1
    0373F 0FEE      LSL	R30
    03740 1FFF      ROL	R31
    03741 0DE2      ADD	R30,R2
    03742 1DF3      ADC	R31,R3
    03743 2422      CLR	R2
    03744 2433      CLR	R3
    03745 8231      STD	Z+1,R3
    03746 8220      ST	Z,R2
    03747 9180 0153 LDS	R24,j
    03749 9190 0154 LDS	R25,j+1
    0374B 9601      ADIW	R24,1
    0374C 9390 0154 STS	j+1,R25
    0374E 9380 0153 STS	j,R24
    03750 3088      CPI	R24,0x8
    03751 E0E0      LDI	R30,0
    03752 079E      CPC	R25,R30
    03753 F2D4      BLT	0x372E
    03754 9180 0151 LDS	R24,i
    03756 9190 0152 LDS	R25,i+1
    03758 9601      ADIW	R24,1
    03759 9390 0152 STS	i+1,R25
    0375B 9380 0151 STS	i,R24
    0375D 3088      CPI	R24,0x8
    0375E E0E0      LDI	R30,0
    0375F 079E      CPC	R25,R30
    03760 F23C      BLT	0x3728
(1056) 
(1057)         cnt=0;
    03761 2422      CLR	R2
    03762 9220 02EA STS	cnt,R2
    03764 C57A      RJMP	0x3CDF
(1058)         while(1){//ÄÄÇ»ÅÍ°¡ ¼¼ÆÃ
(1059)             while(cnt==0){//ship1
(1060)             overlap=0;
    03765 24AA      CLR	R10
(1061)             i=rand()%8;
    03766 940E 0823 CALL	_rand
    03768 E028      LDI	R18,0x8
    03769 E030      LDI	R19,0
    0376A 940E 45B8 CALL	mod16s
    0376C 9310 0152 STS	i+1,R17
    0376E 9300 0151 STS	i,R16
(1062)             j=rand()%8;
    03770 940E 0823 CALL	_rand
    03772 0168      MOVW	R12,R16
    03773 E028      LDI	R18,0x8
    03774 E030      LDI	R19,0
    03775 940E 45B8 CALL	mod16s
    03777 9310 0154 STS	j+1,R17
    03779 9300 0153 STS	j,R16
(1063)             if(counter_set[i][j]==0){
    0377B 9120 0151 LDS	R18,i
    0377D 9130 0152 LDS	R19,i+1
    0377F E100      LDI	R16,0x10
    03780 E010      LDI	R17,0
    03781 940E 4674 CALL	empy16s
    03783 E585      LDI	R24,0x55
    03784 E091      LDI	R25,1
    03785 0118      MOVW	R2,R16
    03786 0E28      ADD	R2,R24
    03787 1E39      ADC	R3,R25
    03788 91E0 0153 LDS	R30,j
    0378A 91F0 0154 LDS	R31,j+1
    0378C 0FEE      LSL	R30
    0378D 1FFF      ROL	R31
    0378E 0DE2      ADD	R30,R2
    0378F 1DF3      ADC	R31,R3
    03790 8020      LD	R2,Z
    03791 8031      LDD	R3,Z+1
    03792 2022      TST	R2
    03793 F009      BEQ	0x3795
    03794 C0AB      RJMP	0x3840
    03795 2033      TST	R3
    03796 F009      BEQ	0x3798
    03797 C0A8      RJMP	0x3840
(1064)                 if(i>-1&&i<7&&j>0&&j<7){
    03798 9140 0151 LDS	R20,i
    0379A 9150 0152 LDS	R21,i+1
    0379C EF8F      LDI	R24,0xFF
    0379D EF9F      LDI	R25,0xFF
    0379E 1784      CP	R24,R20
    0379F 0795      CPC	R25,R21
    037A0 F00C      BLT	0x37A2
    037A1 C09E      RJMP	0x3840
    037A2 3047      CPI	R20,7
    037A3 E0E0      LDI	R30,0
    037A4 075E      CPC	R21,R30
    037A5 F00C      BLT	0x37A7
    037A6 C099      RJMP	0x3840
    037A7 9140 0153 LDS	R20,j
    037A9 9150 0154 LDS	R21,j+1
    037AB 2422      CLR	R2
    037AC 2433      CLR	R3
    037AD 1624      CP	R2,R20
    037AE 0635      CPC	R3,R21
    037AF F00C      BLT	0x37B1
    037B0 C08F      RJMP	0x3840
    037B1 3047      CPI	R20,7
    037B2 E0E0      LDI	R30,0
    037B3 075E      CPC	R21,R30
    037B4 F00C      BLT	0x37B6
    037B5 C08A      RJMP	0x3840
(1065)                     for(n=0;n<4;n++)
    037B6 9220 03D1 STS	n,R2
    037B8 C03A      RJMP	0x37F3
(1066)                         if(counter_set[i+i1[n]][j+j1[n]]!=0) //ÁÖº¯ Áßº¹°Ë»ç
    037B9 90C0 03D1 LDS	R12,n
    037BB 24DD      CLR	R13
    037BC FCC7      SBRC	R12,7
    037BD 94D0      COM	R13
    037BE 0CCC      LSL	R12
    037BF 1CDD      ROL	R13
    037C0 E081      LDI	R24,1
    037C1 E091      LDI	R25,1
    037C2 01F6      MOVW	R30,R12
    037C3 0FE8      ADD	R30,R24
    037C4 1FF9      ADC	R31,R25
    037C5 8020      LD	R2,Z
    037C6 8031      LDD	R3,Z+1
    037C7 9120 0151 LDS	R18,i
    037C9 9130 0152 LDS	R19,i+1
    037CB 0D22      ADD	R18,R2
    037CC 1D33      ADC	R19,R3
    037CD E100      LDI	R16,0x10
    037CE E010      LDI	R17,0
    037CF 940E 4674 CALL	empy16s
    037D1 0118      MOVW	R2,R16
    037D2 E585      LDI	R24,0x55
    037D3 E091      LDI	R25,1
    037D4 0E28      ADD	R2,R24
    037D5 1E39      ADC	R3,R25
    037D6 E08B      LDI	R24,0xB
    037D7 E091      LDI	R25,1
    037D8 01F6      MOVW	R30,R12
    037D9 0FE8      ADD	R30,R24
    037DA 1FF9      ADC	R31,R25
    037DB 8040      LD	R4,Z
    037DC 8051      LDD	R5,Z+1
    037DD 91E0 0153 LDS	R30,j
    037DF 91F0 0154 LDS	R31,j+1
    037E1 0DE4      ADD	R30,R4
    037E2 1DF5      ADC	R31,R5
    037E3 0FEE      LSL	R30
    037E4 1FFF      ROL	R31
    037E5 0DE2      ADD	R30,R2
    037E6 1DF3      ADC	R31,R3
    037E7 8020      LD	R2,Z
    037E8 8031      LDD	R3,Z+1
    037E9 2022      TST	R2
    037EA F411      BNE	0x37ED
    037EB 2033      TST	R3
    037EC F009      BEQ	0x37EE
(1067)                             overlap++;
    037ED 94A3      INC	R10
    037EE 9180 03D1 LDS	R24,n
    037F0 5F8F      SUBI	R24,0xFF
    037F1 9380 03D1 STS	n,R24
    037F3 9180 03D1 LDS	R24,n
    037F5 3084      CPI	R24,4
    037F6 F40C      BGE	0x37F8
    037F7 CFC1      RJMP	0x37B9
(1068)                     if(overlap==0){
    037F8 20AA      TST	R10
    037F9 F009      BEQ	0x37FB
    037FA C045      RJMP	0x3840
(1069)                         for(n=0;n<4;n++)
    037FB 2422      CLR	R2
    037FC 9220 03D1 STS	n,R2
    037FE C037      RJMP	0x3836
(1070)                             counter_set[i+i1[n]][j+j1[n]]=1;
    037FF 90C0 03D1 LDS	R12,n
    03801 24DD      CLR	R13
    03802 FCC7      SBRC	R12,7
    03803 94D0      COM	R13
    03804 0CCC      LSL	R12
    03805 1CDD      ROL	R13
    03806 E081      LDI	R24,1
    03807 E091      LDI	R25,1
    03808 01F6      MOVW	R30,R12
    03809 0FE8      ADD	R30,R24
    0380A 1FF9      ADC	R31,R25
    0380B 8020      LD	R2,Z
    0380C 8031      LDD	R3,Z+1
    0380D 9120 0151 LDS	R18,i
    0380F 9130 0152 LDS	R19,i+1
    03811 0D22      ADD	R18,R2
    03812 1D33      ADC	R19,R3
    03813 E100      LDI	R16,0x10
    03814 E010      LDI	R17,0
    03815 940E 4674 CALL	empy16s
    03817 0118      MOVW	R2,R16
    03818 E585      LDI	R24,0x55
    03819 E091      LDI	R25,1
    0381A 0E28      ADD	R2,R24
    0381B 1E39      ADC	R3,R25
    0381C E08B      LDI	R24,0xB
    0381D E091      LDI	R25,1
    0381E 01F6      MOVW	R30,R12
    0381F 0FE8      ADD	R30,R24
    03820 1FF9      ADC	R31,R25
    03821 8040      LD	R4,Z
    03822 8051      LDD	R5,Z+1
    03823 91E0 0153 LDS	R30,j
    03825 91F0 0154 LDS	R31,j+1
    03827 0DE4      ADD	R30,R4
    03828 1DF5      ADC	R31,R5
    03829 0FEE      LSL	R30
    0382A 1FFF      ROL	R31
    0382B 0DE2      ADD	R30,R2
    0382C 1DF3      ADC	R31,R3
    0382D E081      LDI	R24,1
    0382E E090      LDI	R25,0
    0382F 8391      STD	Z+1,R25
    03830 8380      ST	Z,R24
    03831 9180 03D1 LDS	R24,n
    03833 5F8F      SUBI	R24,0xFF
    03834 9380 03D1 STS	n,R24
    03836 9180 03D1 LDS	R24,n
    03838 3084      CPI	R24,4
    03839 F40C      BGE	0x383B
    0383A CFC4      RJMP	0x37FF
(1071)                         cnt++;
    0383B 9180 02EA LDS	R24,cnt
    0383D 5F8F      SUBI	R24,0xFF
    0383E 9380 02EA STS	cnt,R24
(1072)                     }
(1073)                 }
(1074)             }
(1075)             }
    03840 9020 02EA LDS	R2,cnt
    03842 2022      TST	R2
    03843 F409      BNE	0x3845
    03844 CF20      RJMP	0x3765
    03845 C0D9      RJMP	0x391F
(1076)             while(cnt==1){//ship2
(1077)             overlap=0;
    03846 24AA      CLR	R10
(1078)             i=rand()%8;
    03847 940E 0823 CALL	_rand
    03849 E028      LDI	R18,0x8
    0384A E030      LDI	R19,0
    0384B 940E 45B8 CALL	mod16s
    0384D 9310 0152 STS	i+1,R17
    0384F 9300 0151 STS	i,R16
(1079)             j=rand()%8;
    03851 940E 0823 CALL	_rand
    03853 0168      MOVW	R12,R16
    03854 E028      LDI	R18,0x8
    03855 E030      LDI	R19,0
    03856 940E 45B8 CALL	mod16s
    03858 9310 0154 STS	j+1,R17
    0385A 9300 0153 STS	j,R16
(1080)             if(counter_set[i][j]==0){
    0385C 9120 0151 LDS	R18,i
    0385E 9130 0152 LDS	R19,i+1
    03860 E100      LDI	R16,0x10
    03861 E010      LDI	R17,0
    03862 940E 4674 CALL	empy16s
    03864 E585      LDI	R24,0x55
    03865 E091      LDI	R25,1
    03866 0118      MOVW	R2,R16
    03867 0E28      ADD	R2,R24
    03868 1E39      ADC	R3,R25
    03869 91E0 0153 LDS	R30,j
    0386B 91F0 0154 LDS	R31,j+1
    0386D 0FEE      LSL	R30
    0386E 1FFF      ROL	R31
    0386F 0DE2      ADD	R30,R2
    03870 1DF3      ADC	R31,R3
    03871 8020      LD	R2,Z
    03872 8031      LDD	R3,Z+1
    03873 2022      TST	R2
    03874 F009      BEQ	0x3876
    03875 C0A9      RJMP	0x391F
    03876 2033      TST	R3
    03877 F009      BEQ	0x3879
    03878 C0A6      RJMP	0x391F
(1081)                 if(i>0&&i<6&&j>0&&j<8){
    03879 9140 0151 LDS	R20,i
    0387B 9150 0152 LDS	R21,i+1
    0387D 2422      CLR	R2
    0387E 2433      CLR	R3
    0387F 1624      CP	R2,R20
    03880 0635      CPC	R3,R21
    03881 F00C      BLT	0x3883
    03882 C09C      RJMP	0x391F
    03883 3046      CPI	R20,6
    03884 E0E0      LDI	R30,0
    03885 075E      CPC	R21,R30
    03886 F00C      BLT	0x3888
    03887 C097      RJMP	0x391F
    03888 9140 0153 LDS	R20,j
    0388A 9150 0154 LDS	R21,j+1
    0388C 1624      CP	R2,R20
    0388D 0635      CPC	R3,R21
    0388E F00C      BLT	0x3890
    0388F C08F      RJMP	0x391F
    03890 3048      CPI	R20,0x8
    03891 E0E0      LDI	R30,0
    03892 075E      CPC	R21,R30
    03893 F00C      BLT	0x3895
    03894 C08A      RJMP	0x391F
(1082)                     for(n=0;n<5;n++)
    03895 9220 03D1 STS	n,R2
    03897 C03A      RJMP	0x38D2
(1083)                         if(counter_set[i+i2[n]][j+j2[n]]!=0) //ÁÖº¯ Áßº¹°Ë»ç
    03898 90C0 03D1 LDS	R12,n
    0389A 24DD      CLR	R13
    0389B FCC7      SBRC	R12,7
    0389C 94D0      COM	R13
    0389D 0CCC      LSL	R12
    0389E 1CDD      ROL	R13
    0389F E185      LDI	R24,0x15
    038A0 E091      LDI	R25,1
    038A1 01F6      MOVW	R30,R12
    038A2 0FE8      ADD	R30,R24
    038A3 1FF9      ADC	R31,R25
    038A4 8020      LD	R2,Z
    038A5 8031      LDD	R3,Z+1
    038A6 9120 0151 LDS	R18,i
    038A8 9130 0152 LDS	R19,i+1
    038AA 0D22      ADD	R18,R2
    038AB 1D33      ADC	R19,R3
    038AC E100      LDI	R16,0x10
    038AD E010      LDI	R17,0
    038AE 940E 4674 CALL	empy16s
    038B0 0118      MOVW	R2,R16
    038B1 E585      LDI	R24,0x55
    038B2 E091      LDI	R25,1
    038B3 0E28      ADD	R2,R24
    038B4 1E39      ADC	R3,R25
    038B5 E18F      LDI	R24,0x1F
    038B6 E091      LDI	R25,1
    038B7 01F6      MOVW	R30,R12
    038B8 0FE8      ADD	R30,R24
    038B9 1FF9      ADC	R31,R25
    038BA 8040      LD	R4,Z
    038BB 8051      LDD	R5,Z+1
    038BC 91E0 0153 LDS	R30,j
    038BE 91F0 0154 LDS	R31,j+1
    038C0 0DE4      ADD	R30,R4
    038C1 1DF5      ADC	R31,R5
    038C2 0FEE      LSL	R30
    038C3 1FFF      ROL	R31
    038C4 0DE2      ADD	R30,R2
    038C5 1DF3      ADC	R31,R3
    038C6 8020      LD	R2,Z
    038C7 8031      LDD	R3,Z+1
    038C8 2022      TST	R2
    038C9 F411      BNE	0x38CC
    038CA 2033      TST	R3
    038CB F009      BEQ	0x38CD
(1084)                             overlap++;
    038CC 94A3      INC	R10
    038CD 9180 03D1 LDS	R24,n
    038CF 5F8F      SUBI	R24,0xFF
    038D0 9380 03D1 STS	n,R24
    038D2 9180 03D1 LDS	R24,n
    038D4 3085      CPI	R24,5
    038D5 F40C      BGE	0x38D7
    038D6 CFC1      RJMP	0x3898
(1085)                     if(overlap==0){
    038D7 20AA      TST	R10
    038D8 F009      BEQ	0x38DA
    038D9 C045      RJMP	0x391F
(1086)                         for(n=0;n<5;n++)
    038DA 2422      CLR	R2
    038DB 9220 03D1 STS	n,R2
    038DD C037      RJMP	0x3915
(1087)                             counter_set[i+i2[n]][j+j2[n]]=2;
    038DE 90C0 03D1 LDS	R12,n
    038E0 24DD      CLR	R13
    038E1 FCC7      SBRC	R12,7
    038E2 94D0      COM	R13
    038E3 0CCC      LSL	R12
    038E4 1CDD      ROL	R13
    038E5 E185      LDI	R24,0x15
    038E6 E091      LDI	R25,1
    038E7 01F6      MOVW	R30,R12
    038E8 0FE8      ADD	R30,R24
    038E9 1FF9      ADC	R31,R25
    038EA 8020      LD	R2,Z
    038EB 8031      LDD	R3,Z+1
    038EC 9120 0151 LDS	R18,i
    038EE 9130 0152 LDS	R19,i+1
    038F0 0D22      ADD	R18,R2
    038F1 1D33      ADC	R19,R3
    038F2 E100      LDI	R16,0x10
    038F3 E010      LDI	R17,0
    038F4 940E 4674 CALL	empy16s
    038F6 0118      MOVW	R2,R16
    038F7 E585      LDI	R24,0x55
    038F8 E091      LDI	R25,1
    038F9 0E28      ADD	R2,R24
    038FA 1E39      ADC	R3,R25
    038FB E18F      LDI	R24,0x1F
    038FC E091      LDI	R25,1
    038FD 01F6      MOVW	R30,R12
    038FE 0FE8      ADD	R30,R24
    038FF 1FF9      ADC	R31,R25
    03900 8040      LD	R4,Z
    03901 8051      LDD	R5,Z+1
    03902 91E0 0153 LDS	R30,j
    03904 91F0 0154 LDS	R31,j+1
    03906 0DE4      ADD	R30,R4
    03907 1DF5      ADC	R31,R5
    03908 0FEE      LSL	R30
    03909 1FFF      ROL	R31
    0390A 0DE2      ADD	R30,R2
    0390B 1DF3      ADC	R31,R3
    0390C E082      LDI	R24,2
    0390D E090      LDI	R25,0
    0390E 8391      STD	Z+1,R25
    0390F 8380      ST	Z,R24
    03910 9180 03D1 LDS	R24,n
    03912 5F8F      SUBI	R24,0xFF
    03913 9380 03D1 STS	n,R24
    03915 9180 03D1 LDS	R24,n
    03917 3085      CPI	R24,5
    03918 F40C      BGE	0x391A
    03919 CFC4      RJMP	0x38DE
(1088)                         cnt++;
    0391A 9180 02EA LDS	R24,cnt
    0391C 5F8F      SUBI	R24,0xFF
    0391D 9380 02EA STS	cnt,R24
(1089)                     }
(1090)                 }
(1091)             }
(1092)             }
    0391F 9180 02EA LDS	R24,cnt
    03921 3081      CPI	R24,1
    03922 F409      BNE	0x3924
    03923 CF22      RJMP	0x3846
    03924 C0DA      RJMP	0x39FF
(1093)             while(cnt==2){//ship3
(1094)             overlap=0;
    03925 24AA      CLR	R10
(1095)             i=rand()%8;
    03926 940E 0823 CALL	_rand
    03928 E028      LDI	R18,0x8
    03929 E030      LDI	R19,0
    0392A 940E 45B8 CALL	mod16s
    0392C 9310 0152 STS	i+1,R17
    0392E 9300 0151 STS	i,R16
(1096)             j=rand()%8;
    03930 940E 0823 CALL	_rand
    03932 0168      MOVW	R12,R16
    03933 E028      LDI	R18,0x8
    03934 E030      LDI	R19,0
    03935 940E 45B8 CALL	mod16s
    03937 9310 0154 STS	j+1,R17
    03939 9300 0153 STS	j,R16
(1097)            if(counter_set[i][j]==0){
    0393B 9120 0151 LDS	R18,i
    0393D 9130 0152 LDS	R19,i+1
    0393F E100      LDI	R16,0x10
    03940 E010      LDI	R17,0
    03941 940E 4674 CALL	empy16s
    03943 E585      LDI	R24,0x55
    03944 E091      LDI	R25,1
    03945 0118      MOVW	R2,R16
    03946 0E28      ADD	R2,R24
    03947 1E39      ADC	R3,R25
    03948 91E0 0153 LDS	R30,j
    0394A 91F0 0154 LDS	R31,j+1
    0394C 0FEE      LSL	R30
    0394D 1FFF      ROL	R31
    0394E 0DE2      ADD	R30,R2
    0394F 1DF3      ADC	R31,R3
    03950 8020      LD	R2,Z
    03951 8031      LDD	R3,Z+1
    03952 2022      TST	R2
    03953 F009      BEQ	0x3955
    03954 C0AA      RJMP	0x39FF
    03955 2033      TST	R3
    03956 F009      BEQ	0x3958
    03957 C0A7      RJMP	0x39FF
(1098)                 if(i>-1&&i<7&&j>-1&&j<8){
    03958 9140 0151 LDS	R20,i
    0395A 9150 0152 LDS	R21,i+1
    0395C EF8F      LDI	R24,0xFF
    0395D EF9F      LDI	R25,0xFF
    0395E 1784      CP	R24,R20
    0395F 0795      CPC	R25,R21
    03960 F00C      BLT	0x3962
    03961 C09D      RJMP	0x39FF
    03962 3047      CPI	R20,7
    03963 E0E0      LDI	R30,0
    03964 075E      CPC	R21,R30
    03965 F00C      BLT	0x3967
    03966 C098      RJMP	0x39FF
    03967 9140 0153 LDS	R20,j
    03969 9150 0154 LDS	R21,j+1
    0396B 1784      CP	R24,R20
    0396C 0795      CPC	R25,R21
    0396D F00C      BLT	0x396F
    0396E C090      RJMP	0x39FF
    0396F 3048      CPI	R20,0x8
    03970 E0E0      LDI	R30,0
    03971 075E      CPC	R21,R30
    03972 F00C      BLT	0x3974
    03973 C08B      RJMP	0x39FF
(1099)                     for(n=0;n<2;n++)
    03974 2422      CLR	R2
    03975 9220 03D1 STS	n,R2
    03977 C03A      RJMP	0x39B2
(1100)                         if(counter_set[i+i3[n]][j+j3[n]]!=0) //ÁÖº¯ Áßº¹°Ë»ç
    03978 90C0 03D1 LDS	R12,n
    0397A 24DD      CLR	R13
    0397B FCC7      SBRC	R12,7
    0397C 94D0      COM	R13
    0397D 0CCC      LSL	R12
    0397E 1CDD      ROL	R13
    0397F E289      LDI	R24,0x29
    03980 E091      LDI	R25,1
    03981 01F6      MOVW	R30,R12
    03982 0FE8      ADD	R30,R24
    03983 1FF9      ADC	R31,R25
    03984 8020      LD	R2,Z
    03985 8031      LDD	R3,Z+1
    03986 9120 0151 LDS	R18,i
    03988 9130 0152 LDS	R19,i+1
    0398A 0D22      ADD	R18,R2
    0398B 1D33      ADC	R19,R3
    0398C E100      LDI	R16,0x10
    0398D E010      LDI	R17,0
    0398E 940E 4674 CALL	empy16s
    03990 0118      MOVW	R2,R16
    03991 E585      LDI	R24,0x55
    03992 E091      LDI	R25,1
    03993 0E28      ADD	R2,R24
    03994 1E39      ADC	R3,R25
    03995 E383      LDI	R24,0x33
    03996 E091      LDI	R25,1
    03997 01F6      MOVW	R30,R12
    03998 0FE8      ADD	R30,R24
    03999 1FF9      ADC	R31,R25
    0399A 8040      LD	R4,Z
    0399B 8051      LDD	R5,Z+1
    0399C 91E0 0153 LDS	R30,j
    0399E 91F0 0154 LDS	R31,j+1
    039A0 0DE4      ADD	R30,R4
    039A1 1DF5      ADC	R31,R5
    039A2 0FEE      LSL	R30
    039A3 1FFF      ROL	R31
    039A4 0DE2      ADD	R30,R2
    039A5 1DF3      ADC	R31,R3
    039A6 8020      LD	R2,Z
    039A7 8031      LDD	R3,Z+1
    039A8 2022      TST	R2
    039A9 F411      BNE	0x39AC
    039AA 2033      TST	R3
    039AB F009      BEQ	0x39AD
(1101)                             overlap++;
    039AC 94A3      INC	R10
    039AD 9180 03D1 LDS	R24,n
    039AF 5F8F      SUBI	R24,0xFF
    039B0 9380 03D1 STS	n,R24
    039B2 9180 03D1 LDS	R24,n
    039B4 3082      CPI	R24,2
    039B5 F40C      BGE	0x39B7
    039B6 CFC1      RJMP	0x3978
(1102)                     if(overlap==0){
    039B7 20AA      TST	R10
    039B8 F009      BEQ	0x39BA
    039B9 C045      RJMP	0x39FF
(1103)                         for(n=0;n<2;n++)
    039BA 2422      CLR	R2
    039BB 9220 03D1 STS	n,R2
    039BD C037      RJMP	0x39F5
(1104)                             counter_set[i+i3[n]][j+j3[n]]=3;
    039BE 90C0 03D1 LDS	R12,n
    039C0 24DD      CLR	R13
    039C1 FCC7      SBRC	R12,7
    039C2 94D0      COM	R13
    039C3 0CCC      LSL	R12
    039C4 1CDD      ROL	R13
    039C5 E289      LDI	R24,0x29
    039C6 E091      LDI	R25,1
    039C7 01F6      MOVW	R30,R12
    039C8 0FE8      ADD	R30,R24
    039C9 1FF9      ADC	R31,R25
    039CA 8020      LD	R2,Z
    039CB 8031      LDD	R3,Z+1
    039CC 9120 0151 LDS	R18,i
    039CE 9130 0152 LDS	R19,i+1
    039D0 0D22      ADD	R18,R2
    039D1 1D33      ADC	R19,R3
    039D2 E100      LDI	R16,0x10
    039D3 E010      LDI	R17,0
    039D4 940E 4674 CALL	empy16s
    039D6 0118      MOVW	R2,R16
    039D7 E585      LDI	R24,0x55
    039D8 E091      LDI	R25,1
    039D9 0E28      ADD	R2,R24
    039DA 1E39      ADC	R3,R25
    039DB E383      LDI	R24,0x33
    039DC E091      LDI	R25,1
    039DD 01F6      MOVW	R30,R12
    039DE 0FE8      ADD	R30,R24
    039DF 1FF9      ADC	R31,R25
    039E0 8040      LD	R4,Z
    039E1 8051      LDD	R5,Z+1
    039E2 91E0 0153 LDS	R30,j
    039E4 91F0 0154 LDS	R31,j+1
    039E6 0DE4      ADD	R30,R4
    039E7 1DF5      ADC	R31,R5
    039E8 0FEE      LSL	R30
    039E9 1FFF      ROL	R31
    039EA 0DE2      ADD	R30,R2
    039EB 1DF3      ADC	R31,R3
    039EC E083      LDI	R24,3
    039ED E090      LDI	R25,0
    039EE 8391      STD	Z+1,R25
    039EF 8380      ST	Z,R24
    039F0 9180 03D1 LDS	R24,n
    039F2 5F8F      SUBI	R24,0xFF
    039F3 9380 03D1 STS	n,R24
    039F5 9180 03D1 LDS	R24,n
    039F7 3082      CPI	R24,2
    039F8 F40C      BGE	0x39FA
    039F9 CFC4      RJMP	0x39BE
(1105)                         cnt++;
    039FA 9180 02EA LDS	R24,cnt
    039FC 5F8F      SUBI	R24,0xFF
    039FD 9380 02EA STS	cnt,R24
(1106)                     }
(1107)                 }
(1108)             }
(1109)             }
    039FF 9180 02EA LDS	R24,cnt
    03A01 3082      CPI	R24,2
    03A02 F409      BNE	0x3A04
    03A03 CF21      RJMP	0x3925
    03A04 C0DA      RJMP	0x3ADF
(1110)             while(cnt==3){//ship4
(1111)             overlap=0;
    03A05 24AA      CLR	R10
(1112)             i=rand()%8;
    03A06 940E 0823 CALL	_rand
    03A08 E028      LDI	R18,0x8
    03A09 E030      LDI	R19,0
    03A0A 940E 45B8 CALL	mod16s
    03A0C 9310 0152 STS	i+1,R17
    03A0E 9300 0151 STS	i,R16
(1113)             j=rand()%8;
    03A10 940E 0823 CALL	_rand
    03A12 0168      MOVW	R12,R16
    03A13 E028      LDI	R18,0x8
    03A14 E030      LDI	R19,0
    03A15 940E 45B8 CALL	mod16s
    03A17 9310 0154 STS	j+1,R17
    03A19 9300 0153 STS	j,R16
(1114)            if(counter_set[i][j]==0){
    03A1B 9120 0151 LDS	R18,i
    03A1D 9130 0152 LDS	R19,i+1
    03A1F E100      LDI	R16,0x10
    03A20 E010      LDI	R17,0
    03A21 940E 4674 CALL	empy16s
    03A23 E585      LDI	R24,0x55
    03A24 E091      LDI	R25,1
    03A25 0118      MOVW	R2,R16
    03A26 0E28      ADD	R2,R24
    03A27 1E39      ADC	R3,R25
    03A28 91E0 0153 LDS	R30,j
    03A2A 91F0 0154 LDS	R31,j+1
    03A2C 0FEE      LSL	R30
    03A2D 1FFF      ROL	R31
    03A2E 0DE2      ADD	R30,R2
    03A2F 1DF3      ADC	R31,R3
    03A30 8020      LD	R2,Z
    03A31 8031      LDD	R3,Z+1
    03A32 2022      TST	R2
    03A33 F009      BEQ	0x3A35
    03A34 C0AA      RJMP	0x3ADF
    03A35 2033      TST	R3
    03A36 F009      BEQ	0x3A38
    03A37 C0A7      RJMP	0x3ADF
(1115)                 if(i>-1&&i<7&&j>-1&&j<7){
    03A38 9140 0151 LDS	R20,i
    03A3A 9150 0152 LDS	R21,i+1
    03A3C EF8F      LDI	R24,0xFF
    03A3D EF9F      LDI	R25,0xFF
    03A3E 1784      CP	R24,R20
    03A3F 0795      CPC	R25,R21
    03A40 F00C      BLT	0x3A42
    03A41 C09D      RJMP	0x3ADF
    03A42 3047      CPI	R20,7
    03A43 E0E0      LDI	R30,0
    03A44 075E      CPC	R21,R30
    03A45 F00C      BLT	0x3A47
    03A46 C098      RJMP	0x3ADF
    03A47 9140 0153 LDS	R20,j
    03A49 9150 0154 LDS	R21,j+1
    03A4B 1784      CP	R24,R20
    03A4C 0795      CPC	R25,R21
    03A4D F00C      BLT	0x3A4F
    03A4E C090      RJMP	0x3ADF
    03A4F 3047      CPI	R20,7
    03A50 E0E0      LDI	R30,0
    03A51 075E      CPC	R21,R30
    03A52 F00C      BLT	0x3A54
    03A53 C08B      RJMP	0x3ADF
(1116)                     for(n=0;n<4;n++)
    03A54 2422      CLR	R2
    03A55 9220 03D1 STS	n,R2
    03A57 C03A      RJMP	0x3A92
(1117)                         if(counter_set[i+i4[n]][j+j4[n]]!=0) //ÁÖº¯ Áßº¹°Ë»ç
    03A58 90C0 03D1 LDS	R12,n
    03A5A 24DD      CLR	R13
    03A5B FCC7      SBRC	R12,7
    03A5C 94D0      COM	R13
    03A5D 0CCC      LSL	R12
    03A5E 1CDD      ROL	R13
    03A5F E387      LDI	R24,0x37
    03A60 E091      LDI	R25,1
    03A61 01F6      MOVW	R30,R12
    03A62 0FE8      ADD	R30,R24
    03A63 1FF9      ADC	R31,R25
    03A64 8020      LD	R2,Z
    03A65 8031      LDD	R3,Z+1
    03A66 9120 0151 LDS	R18,i
    03A68 9130 0152 LDS	R19,i+1
    03A6A 0D22      ADD	R18,R2
    03A6B 1D33      ADC	R19,R3
    03A6C E100      LDI	R16,0x10
    03A6D E010      LDI	R17,0
    03A6E 940E 4674 CALL	empy16s
    03A70 0118      MOVW	R2,R16
    03A71 E585      LDI	R24,0x55
    03A72 E091      LDI	R25,1
    03A73 0E28      ADD	R2,R24
    03A74 1E39      ADC	R3,R25
    03A75 E481      LDI	R24,0x41
    03A76 E091      LDI	R25,1
    03A77 01F6      MOVW	R30,R12
    03A78 0FE8      ADD	R30,R24
    03A79 1FF9      ADC	R31,R25
    03A7A 8040      LD	R4,Z
    03A7B 8051      LDD	R5,Z+1
    03A7C 91E0 0153 LDS	R30,j
    03A7E 91F0 0154 LDS	R31,j+1
    03A80 0DE4      ADD	R30,R4
    03A81 1DF5      ADC	R31,R5
    03A82 0FEE      LSL	R30
    03A83 1FFF      ROL	R31
    03A84 0DE2      ADD	R30,R2
    03A85 1DF3      ADC	R31,R3
    03A86 8020      LD	R2,Z
    03A87 8031      LDD	R3,Z+1
    03A88 2022      TST	R2
    03A89 F411      BNE	0x3A8C
    03A8A 2033      TST	R3
    03A8B F009      BEQ	0x3A8D
(1118)                             overlap++;
    03A8C 94A3      INC	R10
    03A8D 9180 03D1 LDS	R24,n
    03A8F 5F8F      SUBI	R24,0xFF
    03A90 9380 03D1 STS	n,R24
    03A92 9180 03D1 LDS	R24,n
    03A94 3084      CPI	R24,4
    03A95 F40C      BGE	0x3A97
    03A96 CFC1      RJMP	0x3A58
(1119)                     if(overlap==0){
    03A97 20AA      TST	R10
    03A98 F009      BEQ	0x3A9A
    03A99 C045      RJMP	0x3ADF
(1120)                         for(n=0;n<4;n++)
    03A9A 2422      CLR	R2
    03A9B 9220 03D1 STS	n,R2
    03A9D C037      RJMP	0x3AD5
(1121)                             counter_set[i+i4[n]][j+j4[n]]=4;
    03A9E 90A0 03D1 LDS	R10,n
    03AA0 24BB      CLR	R11
    03AA1 FCA7      SBRC	R10,7
    03AA2 94B0      COM	R11
    03AA3 0CAA      LSL	R10
    03AA4 1CBB      ROL	R11
    03AA5 E387      LDI	R24,0x37
    03AA6 E091      LDI	R25,1
    03AA7 01F5      MOVW	R30,R10
    03AA8 0FE8      ADD	R30,R24
    03AA9 1FF9      ADC	R31,R25
    03AAA 8020      LD	R2,Z
    03AAB 8031      LDD	R3,Z+1
    03AAC 9120 0151 LDS	R18,i
    03AAE 9130 0152 LDS	R19,i+1
    03AB0 0D22      ADD	R18,R2
    03AB1 1D33      ADC	R19,R3
    03AB2 E100      LDI	R16,0x10
    03AB3 E010      LDI	R17,0
    03AB4 940E 4674 CALL	empy16s
    03AB6 0118      MOVW	R2,R16
    03AB7 E585      LDI	R24,0x55
    03AB8 E091      LDI	R25,1
    03AB9 0E28      ADD	R2,R24
    03ABA 1E39      ADC	R3,R25
    03ABB E481      LDI	R24,0x41
    03ABC E091      LDI	R25,1
    03ABD 01F5      MOVW	R30,R10
    03ABE 0FE8      ADD	R30,R24
    03ABF 1FF9      ADC	R31,R25
    03AC0 8040      LD	R4,Z
    03AC1 8051      LDD	R5,Z+1
    03AC2 91E0 0153 LDS	R30,j
    03AC4 91F0 0154 LDS	R31,j+1
    03AC6 0DE4      ADD	R30,R4
    03AC7 1DF5      ADC	R31,R5
    03AC8 0FEE      LSL	R30
    03AC9 1FFF      ROL	R31
    03ACA 0DE2      ADD	R30,R2
    03ACB 1DF3      ADC	R31,R3
    03ACC E084      LDI	R24,4
    03ACD E090      LDI	R25,0
    03ACE 8391      STD	Z+1,R25
    03ACF 8380      ST	Z,R24
    03AD0 9180 03D1 LDS	R24,n
    03AD2 5F8F      SUBI	R24,0xFF
    03AD3 9380 03D1 STS	n,R24
    03AD5 9180 03D1 LDS	R24,n
    03AD7 3084      CPI	R24,4
    03AD8 F40C      BGE	0x3ADA
    03AD9 CFC4      RJMP	0x3A9E
(1122)                         cnt++;
    03ADA 9180 02EA LDS	R24,cnt
    03ADC 5F8F      SUBI	R24,0xFF
    03ADD 9380 02EA STS	cnt,R24
(1123)                     }
(1124)                 }
(1125)             }
(1126)             }
    03ADF 9180 02EA LDS	R24,cnt
    03AE1 3083      CPI	R24,3
    03AE2 F409      BNE	0x3AE4
    03AE3 CF21      RJMP	0x3A05
    03AE4 C04E      RJMP	0x3B33
(1127)             while(cnt==4){//item1
(1128)             i=rand()%8;
    03AE5 940E 0823 CALL	_rand
    03AE7 E028      LDI	R18,0x8
    03AE8 E030      LDI	R19,0
    03AE9 940E 45B8 CALL	mod16s
    03AEB 9310 0152 STS	i+1,R17
    03AED 9300 0151 STS	i,R16
(1129)             j=rand()%8;
    03AEF 940E 0823 CALL	_rand
    03AF1 0158      MOVW	R10,R16
    03AF2 E028      LDI	R18,0x8
    03AF3 E030      LDI	R19,0
    03AF4 940E 45B8 CALL	mod16s
    03AF6 9310 0154 STS	j+1,R17
    03AF8 9300 0153 STS	j,R16
(1130)             if(counter_set[i][j]==0){
    03AFA 9120 0151 LDS	R18,i
    03AFC 9130 0152 LDS	R19,i+1
    03AFE E100      LDI	R16,0x10
    03AFF E010      LDI	R17,0
    03B00 940E 4674 CALL	empy16s
    03B02 E585      LDI	R24,0x55
    03B03 E091      LDI	R25,1
    03B04 0118      MOVW	R2,R16
    03B05 0E28      ADD	R2,R24
    03B06 1E39      ADC	R3,R25
    03B07 91E0 0153 LDS	R30,j
    03B09 91F0 0154 LDS	R31,j+1
    03B0B 0FEE      LSL	R30
    03B0C 1FFF      ROL	R31
    03B0D 0DE2      ADD	R30,R2
    03B0E 1DF3      ADC	R31,R3
    03B0F 8020      LD	R2,Z
    03B10 8031      LDD	R3,Z+1
    03B11 2022      TST	R2
    03B12 F501      BNE	0x3B33
    03B13 2033      TST	R3
    03B14 F4F1      BNE	0x3B33
(1131)                 counter_set[i][j]=5;
    03B15 9120 0151 LDS	R18,i
    03B17 9130 0152 LDS	R19,i+1
    03B19 E100      LDI	R16,0x10
    03B1A E010      LDI	R17,0
    03B1B 940E 4674 CALL	empy16s
    03B1D E585      LDI	R24,0x55
    03B1E E091      LDI	R25,1
    03B1F 0118      MOVW	R2,R16
    03B20 0E28      ADD	R2,R24
    03B21 1E39      ADC	R3,R25
    03B22 91E0 0153 LDS	R30,j
    03B24 91F0 0154 LDS	R31,j+1
    03B26 0FEE      LSL	R30
    03B27 1FFF      ROL	R31
    03B28 0DE2      ADD	R30,R2
    03B29 1DF3      ADC	R31,R3
    03B2A E085      LDI	R24,5
    03B2B E090      LDI	R25,0
    03B2C 8391      STD	Z+1,R25
    03B2D 8380      ST	Z,R24
(1132)                 cnt++;
    03B2E 9180 02EA LDS	R24,cnt
    03B30 5F8F      SUBI	R24,0xFF
    03B31 9380 02EA STS	cnt,R24
(1133) 
(1134)                 }
(1135)             }
    03B33 9180 02EA LDS	R24,cnt
    03B35 3084      CPI	R24,4
    03B36 F409      BNE	0x3B38
    03B37 CFAD      RJMP	0x3AE5
    03B38 C04E      RJMP	0x3B87
(1136)             while(cnt==5){//item2
(1137)             i=rand()%8;
    03B39 940E 0823 CALL	_rand
    03B3B E028      LDI	R18,0x8
    03B3C E030      LDI	R19,0
    03B3D 940E 45B8 CALL	mod16s
    03B3F 9310 0152 STS	i+1,R17
    03B41 9300 0151 STS	i,R16
(1138)             j=rand()%8;
    03B43 940E 0823 CALL	_rand
    03B45 0158      MOVW	R10,R16
    03B46 E028      LDI	R18,0x8
    03B47 E030      LDI	R19,0
    03B48 940E 45B8 CALL	mod16s
    03B4A 9310 0154 STS	j+1,R17
    03B4C 9300 0153 STS	j,R16
(1139)             if(counter_set[i][j]==0){
    03B4E 9120 0151 LDS	R18,i
    03B50 9130 0152 LDS	R19,i+1
    03B52 E100      LDI	R16,0x10
    03B53 E010      LDI	R17,0
    03B54 940E 4674 CALL	empy16s
    03B56 E585      LDI	R24,0x55
    03B57 E091      LDI	R25,1
    03B58 0118      MOVW	R2,R16
    03B59 0E28      ADD	R2,R24
    03B5A 1E39      ADC	R3,R25
    03B5B 91E0 0153 LDS	R30,j
    03B5D 91F0 0154 LDS	R31,j+1
    03B5F 0FEE      LSL	R30
    03B60 1FFF      ROL	R31
    03B61 0DE2      ADD	R30,R2
    03B62 1DF3      ADC	R31,R3
    03B63 8020      LD	R2,Z
    03B64 8031      LDD	R3,Z+1
    03B65 2022      TST	R2
    03B66 F501      BNE	0x3B87
    03B67 2033      TST	R3
    03B68 F4F1      BNE	0x3B87
(1140)                 counter_set[i][j]=5;
    03B69 9120 0151 LDS	R18,i
    03B6B 9130 0152 LDS	R19,i+1
    03B6D E100      LDI	R16,0x10
    03B6E E010      LDI	R17,0
    03B6F 940E 4674 CALL	empy16s
    03B71 E585      LDI	R24,0x55
    03B72 E091      LDI	R25,1
    03B73 0118      MOVW	R2,R16
    03B74 0E28      ADD	R2,R24
    03B75 1E39      ADC	R3,R25
    03B76 91E0 0153 LDS	R30,j
    03B78 91F0 0154 LDS	R31,j+1
    03B7A 0FEE      LSL	R30
    03B7B 1FFF      ROL	R31
    03B7C 0DE2      ADD	R30,R2
    03B7D 1DF3      ADC	R31,R3
    03B7E E085      LDI	R24,5
    03B7F E090      LDI	R25,0
    03B80 8391      STD	Z+1,R25
    03B81 8380      ST	Z,R24
(1141)                 cnt++;
    03B82 9180 02EA LDS	R24,cnt
    03B84 5F8F      SUBI	R24,0xFF
    03B85 9380 02EA STS	cnt,R24
(1142) 
(1143)                 }
(1144)             }
    03B87 9180 02EA LDS	R24,cnt
    03B89 3085      CPI	R24,5
    03B8A F409      BNE	0x3B8C
    03B8B CFAD      RJMP	0x3B39
    03B8C C054      RJMP	0x3BE1
(1145)             while(cnt==6){//mine1
(1146)             i=rand()%8;
    03B8D 940E 0823 CALL	_rand
    03B8F E028      LDI	R18,0x8
    03B90 E030      LDI	R19,0
    03B91 940E 45B8 CALL	mod16s
    03B93 9310 0152 STS	i+1,R17
    03B95 9300 0151 STS	i,R16
(1147)             j=rand()%8;
    03B97 940E 0823 CALL	_rand
    03B99 0158      MOVW	R10,R16
    03B9A E028      LDI	R18,0x8
    03B9B E030      LDI	R19,0
    03B9C 940E 45B8 CALL	mod16s
    03B9E 9310 0154 STS	j+1,R17
    03BA0 9300 0153 STS	j,R16
(1148)            if(counter_set[i][j]==0){
    03BA2 9120 0151 LDS	R18,i
    03BA4 9130 0152 LDS	R19,i+1
    03BA6 E100      LDI	R16,0x10
    03BA7 E010      LDI	R17,0
    03BA8 940E 4674 CALL	empy16s
    03BAA E585      LDI	R24,0x55
    03BAB E091      LDI	R25,1
    03BAC 0118      MOVW	R2,R16
    03BAD 0E28      ADD	R2,R24
    03BAE 1E39      ADC	R3,R25
    03BAF 91E0 0153 LDS	R30,j
    03BB1 91F0 0154 LDS	R31,j+1
    03BB3 0FEE      LSL	R30
    03BB4 1FFF      ROL	R31
    03BB5 0DE2      ADD	R30,R2
    03BB6 1DF3      ADC	R31,R3
    03BB7 8020      LD	R2,Z
    03BB8 8031      LDD	R3,Z+1
    03BB9 2022      TST	R2
    03BBA F531      BNE	0x3BE1
    03BBB 2033      TST	R3
    03BBC F521      BNE	0x3BE1
(1149)                 counter_set[i][j]=6;
    03BBD 9120 0151 LDS	R18,i
    03BBF 9130 0152 LDS	R19,i+1
    03BC1 E100      LDI	R16,0x10
    03BC2 E010      LDI	R17,0
    03BC3 940E 4674 CALL	empy16s
    03BC5 E585      LDI	R24,0x55
    03BC6 E091      LDI	R25,1
    03BC7 0118      MOVW	R2,R16
    03BC8 0E28      ADD	R2,R24
    03BC9 1E39      ADC	R3,R25
    03BCA 91E0 0153 LDS	R30,j
    03BCC 91F0 0154 LDS	R31,j+1
    03BCE 0FEE      LSL	R30
    03BCF 1FFF      ROL	R31
    03BD0 0DE2      ADD	R30,R2
    03BD1 1DF3      ADC	R31,R3
    03BD2 E086      LDI	R24,6
    03BD3 E090      LDI	R25,0
    03BD4 8391      STD	Z+1,R25
    03BD5 8380      ST	Z,R24
(1150)                 cnt++;
    03BD6 9180 02EA LDS	R24,cnt
    03BD8 5F8F      SUBI	R24,0xFF
    03BD9 9380 02EA STS	cnt,R24
(1151)                 lGLCD_fail(1,6);
    03BDB E026      LDI	R18,6
    03BDC E030      LDI	R19,0
    03BDD E001      LDI	R16,1
    03BDE E010      LDI	R17,0
    03BDF 940E 1310 CALL	_lGLCD_fail
(1152) 
(1153)                 }
(1154)             }
    03BE1 9180 02EA LDS	R24,cnt
    03BE3 3086      CPI	R24,6
    03BE4 F409      BNE	0x3BE6
    03BE5 CFA7      RJMP	0x3B8D
    03BE6 C04E      RJMP	0x3C35
(1155)             while(cnt==7){//mine2
(1156)             i=rand()%8;
    03BE7 940E 0823 CALL	_rand
    03BE9 E028      LDI	R18,0x8
    03BEA E030      LDI	R19,0
    03BEB 940E 45B8 CALL	mod16s
    03BED 9310 0152 STS	i+1,R17
    03BEF 9300 0151 STS	i,R16
(1157)             j=rand()%8;
    03BF1 940E 0823 CALL	_rand
    03BF3 0158      MOVW	R10,R16
    03BF4 E028      LDI	R18,0x8
    03BF5 E030      LDI	R19,0
    03BF6 940E 45B8 CALL	mod16s
    03BF8 9310 0154 STS	j+1,R17
    03BFA 9300 0153 STS	j,R16
(1158)            if(counter_set[i][j]==0){
    03BFC 9120 0151 LDS	R18,i
    03BFE 9130 0152 LDS	R19,i+1
    03C00 E100      LDI	R16,0x10
    03C01 E010      LDI	R17,0
    03C02 940E 4674 CALL	empy16s
    03C04 E585      LDI	R24,0x55
    03C05 E091      LDI	R25,1
    03C06 0118      MOVW	R2,R16
    03C07 0E28      ADD	R2,R24
    03C08 1E39      ADC	R3,R25
    03C09 91E0 0153 LDS	R30,j
    03C0B 91F0 0154 LDS	R31,j+1
    03C0D 0FEE      LSL	R30
    03C0E 1FFF      ROL	R31
    03C0F 0DE2      ADD	R30,R2
    03C10 1DF3      ADC	R31,R3
    03C11 8020      LD	R2,Z
    03C12 8031      LDD	R3,Z+1
    03C13 2022      TST	R2
    03C14 F501      BNE	0x3C35
    03C15 2033      TST	R3
    03C16 F4F1      BNE	0x3C35
(1159)                 counter_set[i][j]=6;
    03C17 9120 0151 LDS	R18,i
    03C19 9130 0152 LDS	R19,i+1
    03C1B E100      LDI	R16,0x10
    03C1C E010      LDI	R17,0
    03C1D 940E 4674 CALL	empy16s
    03C1F E585      LDI	R24,0x55
    03C20 E091      LDI	R25,1
    03C21 0118      MOVW	R2,R16
    03C22 0E28      ADD	R2,R24
    03C23 1E39      ADC	R3,R25
    03C24 91E0 0153 LDS	R30,j
    03C26 91F0 0154 LDS	R31,j+1
    03C28 0FEE      LSL	R30
    03C29 1FFF      ROL	R31
    03C2A 0DE2      ADD	R30,R2
    03C2B 1DF3      ADC	R31,R3
    03C2C E086      LDI	R24,6
    03C2D E090      LDI	R25,0
    03C2E 8391      STD	Z+1,R25
    03C2F 8380      ST	Z,R24
(1160)                 cnt++;
    03C30 9180 02EA LDS	R24,cnt
    03C32 5F8F      SUBI	R24,0xFF
    03C33 9380 02EA STS	cnt,R24
(1161) 
(1162)                 }
(1163)             }
    03C35 9180 02EA LDS	R24,cnt
    03C37 3087      CPI	R24,7
    03C38 F409      BNE	0x3C3A
    03C39 CFAD      RJMP	0x3BE7
    03C3A C04E      RJMP	0x3C89
(1164)             while(cnt==8){//rock1
(1165)             i=rand()%8;
    03C3B 940E 0823 CALL	_rand
    03C3D E028      LDI	R18,0x8
    03C3E E030      LDI	R19,0
    03C3F 940E 45B8 CALL	mod16s
    03C41 9310 0152 STS	i+1,R17
    03C43 9300 0151 STS	i,R16
(1166)             j=rand()%8;
    03C45 940E 0823 CALL	_rand
    03C47 0158      MOVW	R10,R16
    03C48 E028      LDI	R18,0x8
    03C49 E030      LDI	R19,0
    03C4A 940E 45B8 CALL	mod16s
    03C4C 9310 0154 STS	j+1,R17
    03C4E 9300 0153 STS	j,R16
(1167)             if(counter_set[i][j]==0){
    03C50 9120 0151 LDS	R18,i
    03C52 9130 0152 LDS	R19,i+1
    03C54 E100      LDI	R16,0x10
    03C55 E010      LDI	R17,0
    03C56 940E 4674 CALL	empy16s
    03C58 E585      LDI	R24,0x55
    03C59 E091      LDI	R25,1
    03C5A 0118      MOVW	R2,R16
    03C5B 0E28      ADD	R2,R24
    03C5C 1E39      ADC	R3,R25
    03C5D 91E0 0153 LDS	R30,j
    03C5F 91F0 0154 LDS	R31,j+1
    03C61 0FEE      LSL	R30
    03C62 1FFF      ROL	R31
    03C63 0DE2      ADD	R30,R2
    03C64 1DF3      ADC	R31,R3
    03C65 8020      LD	R2,Z
    03C66 8031      LDD	R3,Z+1
    03C67 2022      TST	R2
    03C68 F501      BNE	0x3C89
    03C69 2033      TST	R3
    03C6A F4F1      BNE	0x3C89
(1168)                 counter_set[i][j]=7;
    03C6B 9120 0151 LDS	R18,i
    03C6D 9130 0152 LDS	R19,i+1
    03C6F E100      LDI	R16,0x10
    03C70 E010      LDI	R17,0
    03C71 940E 4674 CALL	empy16s
    03C73 E585      LDI	R24,0x55
    03C74 E091      LDI	R25,1
    03C75 0118      MOVW	R2,R16
    03C76 0E28      ADD	R2,R24
    03C77 1E39      ADC	R3,R25
    03C78 91E0 0153 LDS	R30,j
    03C7A 91F0 0154 LDS	R31,j+1
    03C7C 0FEE      LSL	R30
    03C7D 1FFF      ROL	R31
    03C7E 0DE2      ADD	R30,R2
    03C7F 1DF3      ADC	R31,R3
    03C80 E087      LDI	R24,7
    03C81 E090      LDI	R25,0
    03C82 8391      STD	Z+1,R25
    03C83 8380      ST	Z,R24
(1169)                 cnt++;
    03C84 9180 02EA LDS	R24,cnt
    03C86 5F8F      SUBI	R24,0xFF
    03C87 9380 02EA STS	cnt,R24
(1170) 
(1171)                 }
(1172)             }
    03C89 9180 02EA LDS	R24,cnt
    03C8B 3088      CPI	R24,0x8
    03C8C F409      BNE	0x3C8E
    03C8D CFAD      RJMP	0x3C3B
    03C8E C04A      RJMP	0x3CD9
(1173)             while(cnt==9){//rock2
(1174)             i=rand()%8;
    03C8F 940E 0823 CALL	_rand
    03C91 E028      LDI	R18,0x8
    03C92 E030      LDI	R19,0
    03C93 940E 45B8 CALL	mod16s
    03C95 9310 0152 STS	i+1,R17
    03C97 9300 0151 STS	i,R16
(1175)             j=rand()%8;
    03C99 940E 0823 CALL	_rand
    03C9B 0158      MOVW	R10,R16
    03C9C E028      LDI	R18,0x8
    03C9D E030      LDI	R19,0
    03C9E 940E 45B8 CALL	mod16s
    03CA0 9310 0154 STS	j+1,R17
    03CA2 9300 0153 STS	j,R16
(1176)            if(counter_set[i][j]==0){
    03CA4 9120 0151 LDS	R18,i
    03CA6 9130 0152 LDS	R19,i+1
    03CA8 E100      LDI	R16,0x10
    03CA9 E010      LDI	R17,0
    03CAA 940E 4674 CALL	empy16s
    03CAC E585      LDI	R24,0x55
    03CAD E091      LDI	R25,1
    03CAE 0118      MOVW	R2,R16
    03CAF 0E28      ADD	R2,R24
    03CB0 1E39      ADC	R3,R25
    03CB1 91E0 0153 LDS	R30,j
    03CB3 91F0 0154 LDS	R31,j+1
    03CB5 0FEE      LSL	R30
    03CB6 1FFF      ROL	R31
    03CB7 0DE2      ADD	R30,R2
    03CB8 1DF3      ADC	R31,R3
    03CB9 8020      LD	R2,Z
    03CBA 8031      LDD	R3,Z+1
    03CBB 2022      TST	R2
    03CBC F519      BNE	0x3CE0
    03CBD 2033      TST	R3
    03CBE F509      BNE	0x3CE0
(1177)                 counter_set[i][j]=7;
    03CBF 9120 0151 LDS	R18,i
    03CC1 9130 0152 LDS	R19,i+1
    03CC3 E100      LDI	R16,0x10
    03CC4 E010      LDI	R17,0
    03CC5 940E 4674 CALL	empy16s
    03CC7 E585      LDI	R24,0x55
    03CC8 E091      LDI	R25,1
    03CC9 0118      MOVW	R2,R16
    03CCA 0E28      ADD	R2,R24
    03CCB 1E39      ADC	R3,R25
    03CCC 91E0 0153 LDS	R30,j
    03CCE 91F0 0154 LDS	R31,j+1
    03CD0 0FEE      LSL	R30
    03CD1 1FFF      ROL	R31
    03CD2 0DE2      ADD	R30,R2
    03CD3 1DF3      ADC	R31,R3
    03CD4 E087      LDI	R24,7
    03CD5 E090      LDI	R25,0
    03CD6 8391      STD	Z+1,R25
    03CD7 8380      ST	Z,R24
(1178)                 break;
    03CD8 C007      RJMP	0x3CE0
    03CD9 9180 02EA LDS	R24,cnt
    03CDB 3089      CPI	R24,0x9
    03CDC F409      BNE	0x3CDE
    03CDD CFB1      RJMP	0x3C8F
(1179) 
(1180)                 }
(1181)                 break;
(1182)             }
(1183)         break;
    03CDE C001      RJMP	0x3CE0
    03CDF CB60      RJMP	0x3840
(1184)         }
(1185) 
(1186)         GLCD_Clear();
    03CE0 940E 04C4 CALL	_GLCD_Clear
(1187)         GLCD_screen();
    03CE2 940E 0BDF CALL	_GLCD_screen
(1188) 
(1189)         for(i=0;i<8;i++)
    03CE4 2422      CLR	R2
    03CE5 2433      CLR	R3
    03CE6 9230 0152 STS	i+1,R3
    03CE8 9220 0151 STS	i,R2
(1190)             for(j=0;j<8;j++){
    03CEA 2422      CLR	R2
    03CEB 2433      CLR	R3
    03CEC 9230 0154 STS	j+1,R3
    03CEE 9220 0153 STS	j,R2
(1191)             if(game_set[i][j]>=1&&game_set[i][j]<=4) rGLCD_1block(i,j);
    03CF0 9120 0151 LDS	R18,i
    03CF2 9130 0152 LDS	R19,i+1
    03CF4 E100      LDI	R16,0x10
    03CF5 E010      LDI	R17,0
    03CF6 940E 4674 CALL	empy16s
    03CF8 E587      LDI	R24,0x57
    03CF9 E094      LDI	R25,4
    03CFA 0118      MOVW	R2,R16
    03CFB 0E28      ADD	R2,R24
    03CFC 1E39      ADC	R3,R25
    03CFD 91E0 0153 LDS	R30,j
    03CFF 91F0 0154 LDS	R31,j+1
    03D01 0FEE      LSL	R30
    03D02 1FFF      ROL	R31
    03D03 0DE2      ADD	R30,R2
    03D04 1DF3      ADC	R31,R3
    03D05 8140      LD	R20,Z
    03D06 8151      LDD	R21,Z+1
    03D07 3041      CPI	R20,1
    03D08 E0E0      LDI	R30,0
    03D09 075E      CPC	R21,R30
    03D0A F084      BLT	0x3D1B
    03D0B E084      LDI	R24,4
    03D0C E090      LDI	R25,0
    03D0D 1784      CP	R24,R20
    03D0E 0795      CPC	R25,R21
    03D0F F05C      BLT	0x3D1B
    03D10 9120 0153 LDS	R18,j
    03D12 9130 0154 LDS	R19,j+1
    03D14 9100 0151 LDS	R16,i
    03D16 9110 0152 LDS	R17,i+1
    03D18 940E 04C7 CALL	_rGLCD_1block
    03D1A C071      RJMP	0x3D8C
(1192)             else if(game_set[i][j]==5) rGLCD_item(i,j);
    03D1B 9120 0151 LDS	R18,i
    03D1D 9130 0152 LDS	R19,i+1
    03D1F E100      LDI	R16,0x10
    03D20 E010      LDI	R17,0
    03D21 940E 4674 CALL	empy16s
    03D23 E587      LDI	R24,0x57
    03D24 E094      LDI	R25,4
    03D25 0118      MOVW	R2,R16
    03D26 0E28      ADD	R2,R24
    03D27 1E39      ADC	R3,R25
    03D28 91E0 0153 LDS	R30,j
    03D2A 91F0 0154 LDS	R31,j+1
    03D2C 0FEE      LSL	R30
    03D2D 1FFF      ROL	R31
    03D2E 0DE2      ADD	R30,R2
    03D2F 1DF3      ADC	R31,R3
    03D30 8180      LD	R24,Z
    03D31 8191      LDD	R25,Z+1
    03D32 3085      CPI	R24,5
    03D33 E0E0      LDI	R30,0
    03D34 079E      CPC	R25,R30
    03D35 F459      BNE	0x3D41
    03D36 9120 0153 LDS	R18,j
    03D38 9130 0154 LDS	R19,j+1
    03D3A 9100 0151 LDS	R16,i
    03D3C 9110 0152 LDS	R17,i+1
    03D3E 940E 0945 CALL	_rGLCD_item
    03D40 C04B      RJMP	0x3D8C
(1193)             else if(game_set[i][j]==6) rGLCD_mine(i,j);
    03D41 9120 0151 LDS	R18,i
    03D43 9130 0152 LDS	R19,i+1
    03D45 E100      LDI	R16,0x10
    03D46 E010      LDI	R17,0
    03D47 940E 4674 CALL	empy16s
    03D49 E587      LDI	R24,0x57
    03D4A E094      LDI	R25,4
    03D4B 0118      MOVW	R2,R16
    03D4C 0E28      ADD	R2,R24
    03D4D 1E39      ADC	R3,R25
    03D4E 91E0 0153 LDS	R30,j
    03D50 91F0 0154 LDS	R31,j+1
    03D52 0FEE      LSL	R30
    03D53 1FFF      ROL	R31
    03D54 0DE2      ADD	R30,R2
    03D55 1DF3      ADC	R31,R3
    03D56 8180      LD	R24,Z
    03D57 8191      LDD	R25,Z+1
    03D58 3086      CPI	R24,6
    03D59 E0E0      LDI	R30,0
    03D5A 079E      CPC	R25,R30
    03D5B F459      BNE	0x3D67
    03D5C 9120 0153 LDS	R18,j
    03D5E 9130 0154 LDS	R19,j+1
    03D60 9100 0151 LDS	R16,i
    03D62 9110 0152 LDS	R17,i+1
    03D64 940E 0832 CALL	_rGLCD_mine
    03D66 C025      RJMP	0x3D8C
(1194)             else if(game_set[i][j]==7) rGLCD_rock(i,j);
    03D67 9120 0151 LDS	R18,i
    03D69 9130 0152 LDS	R19,i+1
    03D6B E100      LDI	R16,0x10
    03D6C E010      LDI	R17,0
    03D6D 940E 4674 CALL	empy16s
    03D6F E587      LDI	R24,0x57
    03D70 E094      LDI	R25,4
    03D71 0118      MOVW	R2,R16
    03D72 0E28      ADD	R2,R24
    03D73 1E39      ADC	R3,R25
    03D74 91E0 0153 LDS	R30,j
    03D76 91F0 0154 LDS	R31,j+1
    03D78 0FEE      LSL	R30
    03D79 1FFF      ROL	R31
    03D7A 0DE2      ADD	R30,R2
    03D7B 1DF3      ADC	R31,R3
    03D7C 8180      LD	R24,Z
    03D7D 8191      LDD	R25,Z+1
    03D7E 3087      CPI	R24,7
    03D7F E0E0      LDI	R30,0
    03D80 079E      CPC	R25,R30
    03D81 F451      BNE	0x3D8C
    03D82 9120 0153 LDS	R18,j
    03D84 9130 0154 LDS	R19,j+1
    03D86 9100 0151 LDS	R16,i
    03D88 9110 0152 LDS	R17,i+1
    03D8A 940E 0A33 CALL	_rGLCD_rock
(1195)         }/*
    03D8C 9180 0153 LDS	R24,j
    03D8E 9190 0154 LDS	R25,j+1
    03D90 9601      ADIW	R24,1
    03D91 9390 0154 STS	j+1,R25
    03D93 9380 0153 STS	j,R24
    03D95 3088      CPI	R24,0x8
    03D96 E0E0      LDI	R30,0
    03D97 079E      CPC	R25,R30
    03D98 F40C      BGE	0x3D9A
    03D99 CF56      RJMP	0x3CF0
    03D9A 9180 0151 LDS	R24,i
    03D9C 9190 0152 LDS	R25,i+1
    03D9E 9601      ADIW	R24,1
    03D9F 9390 0152 STS	i+1,R25
    03DA1 9380 0151 STS	i,R24
    03DA3 3088      CPI	R24,0x8
    03DA4 E0E0      LDI	R30,0
    03DA5 079E      CPC	R25,R30
    03DA6 F40C      BGE	0x3DA8
    03DA7 CF42      RJMP	0x3CEA
    03DA8 C522      RJMP	0x42CB
(1196) //ÄÄ ¼¼ÆÃ º¸ÀÌ°Ô ÇÏ±â
(1197)        for(i=0;i<8;i++)
(1198)             for(j=0;j<8;j++){
(1199)             if(counter_set[i][j]>=1&&counter_set[i][j]<=4) lGLCD_success(i,j);
(1200)             else if(counter_set[i][j]==5) lGLCD_item(i,j);
(1201)             else if(counter_set[i][j]==6) lGLCD_mine(i,j);
(1202)             else if(counter_set[i][j]==7) lGLCD_rock(i,j);
(1203)         }
(1204) */
(1205)        while(1){ //playing
(1206)         flag=1;
    03DA9 E081      LDI	R24,1
    03DAA 9380 02D5 STS	flag,R24
(1207)         i=0,j=0;
    03DAC 2422      CLR	R2
    03DAD 2433      CLR	R3
    03DAE 9230 0152 STS	i+1,R3
    03DB0 9220 0151 STS	i,R2
    03DB2 9230 0154 STS	j+1,R3
    03DB4 9220 0153 STS	j,R2
(1208)         lGLCD_cursor(i,j);
    03DB6 0191      MOVW	R18,R2
    03DB7 0181      MOVW	R16,R2
    03DB8 940E 0F13 CALL	_lGLCD_cursor
    03DBA C249      RJMP	0x4004
(1209)         while(flag>0){ //my turnn
(1210)          if(time_flag>=1)
    03DBB 9180 02E5 LDS	R24,time_flag
    03DBD 3081      CPI	R24,1
    03DBE F028      BCS	0x3DC4
(1211)         {
(1212)             register_timer();
    03DBF 940E 22E5 CALL	_register_timer
(1213)             time_flag=0;
    03DC1 2422      CLR	R2
    03DC2 9220 02E5 STS	time_flag,R2
(1214)         }
(1215)             joystick_playing();
    03DC4 940E 17DA CALL	_joystick_playing
(1216)             if((PINF&0x08)==0x00){ //select
    03DC6 9903      SBIC	0x00,3
    03DC7 C233      RJMP	0x3FFB
(1217)                 if(!counter_detect[i][j]){
    03DC8 9120 0151 LDS	R18,i
    03DCA 9130 0152 LDS	R19,i+1
    03DCC E100      LDI	R16,0x10
    03DCD E010      LDI	R17,0
    03DCE 940E 4674 CALL	empy16s
    03DD0 ED85      LDI	R24,0xD5
    03DD1 E091      LDI	R25,1
    03DD2 0118      MOVW	R2,R16
    03DD3 0E28      ADD	R2,R24
    03DD4 1E39      ADC	R3,R25
    03DD5 91E0 0153 LDS	R30,j
    03DD7 91F0 0154 LDS	R31,j+1
    03DD9 0FEE      LSL	R30
    03DDA 1FFF      ROL	R31
    03DDB 0DE2      ADD	R30,R2
    03DDC 1DF3      ADC	R31,R3
    03DDD 8020      LD	R2,Z
    03DDE 8031      LDD	R3,Z+1
    03DDF 2022      TST	R2
    03DE0 F009      BEQ	0x3DE2
    03DE1 C210      RJMP	0x3FF2
    03DE2 2033      TST	R3
    03DE3 F009      BEQ	0x3DE5
    03DE4 C20D      RJMP	0x3FF2
(1218)                     switch_select();
    03DE5 940E 1DC7 CALL	_switch_select
(1219)                     if(counter_set[i][j]==1){
    03DE7 9120 0151 LDS	R18,i
    03DE9 9130 0152 LDS	R19,i+1
    03DEB E100      LDI	R16,0x10
    03DEC E010      LDI	R17,0
    03DED 940E 4674 CALL	empy16s
    03DEF E585      LDI	R24,0x55
    03DF0 E091      LDI	R25,1
    03DF1 0118      MOVW	R2,R16
    03DF2 0E28      ADD	R2,R24
    03DF3 1E39      ADC	R3,R25
    03DF4 91E0 0153 LDS	R30,j
    03DF6 91F0 0154 LDS	R31,j+1
    03DF8 0FEE      LSL	R30
    03DF9 1FFF      ROL	R31
    03DFA 0DE2      ADD	R30,R2
    03DFB 1DF3      ADC	R31,R3
    03DFC 8180      LD	R24,Z
    03DFD 8191      LDD	R25,Z+1
    03DFE 3081      CPI	R24,1
    03DFF E0E0      LDI	R30,0
    03E00 079E      CPC	R25,R30
    03E01 F009      BEQ	0x3E03
    03E02 C19D      RJMP	0x3FA0
(1220)                         for(n=0;n<5;n++){
    03E03 2422      CLR	R2
    03E04 9220 03D1 STS	n,R2
    03E06 C120      RJMP	0x3F27
(1221)                             if(destroy[n]==-1&&!counter_detect[ship1x+i1[n]][ship1y+j1[n]]) destroy[0]=0;
    03E07 90A0 03D1 LDS	R10,n
    03E09 24BB      CLR	R11
    03E0A FCA7      SBRC	R10,7
    03E0B 94B0      COM	R11
    03E0C 0CAA      LSL	R10
    03E0D 1CBB      ROL	R11
    03E0E ED87      LDI	R24,0xD7
    03E0F E092      LDI	R25,2
    03E10 01F5      MOVW	R30,R10
    03E11 0FE8      ADD	R30,R24
    03E12 1FF9      ADC	R31,R25
    03E13 8180      LD	R24,Z
    03E14 8191      LDD	R25,Z+1
    03E15 3F8F      CPI	R24,0xFF
    03E16 EFEF      LDI	R30,0xFF
    03E17 079E      CPC	R25,R30
    03E18 F009      BEQ	0x3E1A
    03E19 C034      RJMP	0x3E4E
    03E1A E081      LDI	R24,1
    03E1B E091      LDI	R25,1
    03E1C 01F5      MOVW	R30,R10
    03E1D 0FE8      ADD	R30,R24
    03E1E 1FF9      ADC	R31,R25
    03E1F 8020      LD	R2,Z
    03E20 8031      LDD	R3,Z+1
    03E21 9120 044C LDS	R18,ship1x
    03E23 9130 044D LDS	R19,ship1x+1
    03E25 0D22      ADD	R18,R2
    03E26 1D33      ADC	R19,R3
    03E27 E100      LDI	R16,0x10
    03E28 E010      LDI	R17,0
    03E29 940E 4674 CALL	empy16s
    03E2B 0118      MOVW	R2,R16
    03E2C ED85      LDI	R24,0xD5
    03E2D E091      LDI	R25,1
    03E2E 0E28      ADD	R2,R24
    03E2F 1E39      ADC	R3,R25
    03E30 E08B      LDI	R24,0xB
    03E31 E091      LDI	R25,1
    03E32 01F5      MOVW	R30,R10
    03E33 0FE8      ADD	R30,R24
    03E34 1FF9      ADC	R31,R25
    03E35 8040      LD	R4,Z
    03E36 8051      LDD	R5,Z+1
    03E37 91E0 044A LDS	R30,ship1y
    03E39 91F0 044B LDS	R31,ship1y+1
    03E3B 0DE4      ADD	R30,R4
    03E3C 1DF5      ADC	R31,R5
    03E3D 0FEE      LSL	R30
    03E3E 1FFF      ROL	R31
    03E3F 0DE2      ADD	R30,R2
    03E40 1DF3      ADC	R31,R3
    03E41 8020      LD	R2,Z
    03E42 8031      LDD	R3,Z+1
    03E43 2022      TST	R2
    03E44 F449      BNE	0x3E4E
    03E45 2033      TST	R3
    03E46 F439      BNE	0x3E4E
    03E47 2422      CLR	R2
    03E48 2433      CLR	R3
    03E49 9230 02D8 STS	destroy+1,R3
    03E4B 9220 02D7 STS	destroy,R2
    03E4D C0D4      RJMP	0x3F22
(1222)                             else if(destroy[n]==-1&&!counter_detect[ship2x+i2[n]][ship2y+j2[n]]) destroy[1]=0;
    03E4E 90A0 03D1 LDS	R10,n
    03E50 24BB      CLR	R11
    03E51 FCA7      SBRC	R10,7
    03E52 94B0      COM	R11
    03E53 0CAA      LSL	R10
    03E54 1CBB      ROL	R11
    03E55 ED87      LDI	R24,0xD7
    03E56 E092      LDI	R25,2
    03E57 01F5      MOVW	R30,R10
    03E58 0FE8      ADD	R30,R24
    03E59 1FF9      ADC	R31,R25
    03E5A 8180      LD	R24,Z
    03E5B 8191      LDD	R25,Z+1
    03E5C 3F8F      CPI	R24,0xFF
    03E5D EFEF      LDI	R30,0xFF
    03E5E 079E      CPC	R25,R30
    03E5F F009      BEQ	0x3E61
    03E60 C034      RJMP	0x3E95
    03E61 E185      LDI	R24,0x15
    03E62 E091      LDI	R25,1
    03E63 01F5      MOVW	R30,R10
    03E64 0FE8      ADD	R30,R24
    03E65 1FF9      ADC	R31,R25
    03E66 8020      LD	R2,Z
    03E67 8031      LDD	R3,Z+1
    03E68 9120 0448 LDS	R18,ship2x
    03E6A 9130 0449 LDS	R19,ship2x+1
    03E6C 0D22      ADD	R18,R2
    03E6D 1D33      ADC	R19,R3
    03E6E E100      LDI	R16,0x10
    03E6F E010      LDI	R17,0
    03E70 940E 4674 CALL	empy16s
    03E72 0118      MOVW	R2,R16
    03E73 ED85      LDI	R24,0xD5
    03E74 E091      LDI	R25,1
    03E75 0E28      ADD	R2,R24
    03E76 1E39      ADC	R3,R25
    03E77 E18F      LDI	R24,0x1F
    03E78 E091      LDI	R25,1
    03E79 01F5      MOVW	R30,R10
    03E7A 0FE8      ADD	R30,R24
    03E7B 1FF9      ADC	R31,R25
    03E7C 8040      LD	R4,Z
    03E7D 8051      LDD	R5,Z+1
    03E7E 91E0 0446 LDS	R30,ship2y
    03E80 91F0 0447 LDS	R31,ship2y+1
    03E82 0DE4      ADD	R30,R4
    03E83 1DF5      ADC	R31,R5
    03E84 0FEE      LSL	R30
    03E85 1FFF      ROL	R31
    03E86 0DE2      ADD	R30,R2
    03E87 1DF3      ADC	R31,R3
    03E88 8020      LD	R2,Z
    03E89 8031      LDD	R3,Z+1
    03E8A 2022      TST	R2
    03E8B F449      BNE	0x3E95
    03E8C 2033      TST	R3
    03E8D F439      BNE	0x3E95
    03E8E 2422      CLR	R2
    03E8F 2433      CLR	R3
    03E90 9230 02DA STS	destroy+3,R3
    03E92 9220 02D9 STS	destroy+2,R2
    03E94 C08D      RJMP	0x3F22
(1223)                             else if(destroy[n]==-1&&!counter_detect[ship3x+i3[n]][ship3y+j3[n]]) destroy[2]=0;
    03E95 90A0 03D1 LDS	R10,n
    03E97 24BB      CLR	R11
    03E98 FCA7      SBRC	R10,7
    03E99 94B0      COM	R11
    03E9A 0CAA      LSL	R10
    03E9B 1CBB      ROL	R11
    03E9C ED87      LDI	R24,0xD7
    03E9D E092      LDI	R25,2
    03E9E 01F5      MOVW	R30,R10
    03E9F 0FE8      ADD	R30,R24
    03EA0 1FF9      ADC	R31,R25
    03EA1 8180      LD	R24,Z
    03EA2 8191      LDD	R25,Z+1
    03EA3 3F8F      CPI	R24,0xFF
    03EA4 EFEF      LDI	R30,0xFF
    03EA5 079E      CPC	R25,R30
    03EA6 F009      BEQ	0x3EA8
    03EA7 C034      RJMP	0x3EDC
    03EA8 E289      LDI	R24,0x29
    03EA9 E091      LDI	R25,1
    03EAA 01F5      MOVW	R30,R10
    03EAB 0FE8      ADD	R30,R24
    03EAC 1FF9      ADC	R31,R25
    03EAD 8020      LD	R2,Z
    03EAE 8031      LDD	R3,Z+1
    03EAF 9120 0444 LDS	R18,ship3x
    03EB1 9130 0445 LDS	R19,ship3x+1
    03EB3 0D22      ADD	R18,R2
    03EB4 1D33      ADC	R19,R3
    03EB5 E100      LDI	R16,0x10
    03EB6 E010      LDI	R17,0
    03EB7 940E 4674 CALL	empy16s
    03EB9 0118      MOVW	R2,R16
    03EBA ED85      LDI	R24,0xD5
    03EBB E091      LDI	R25,1
    03EBC 0E28      ADD	R2,R24
    03EBD 1E39      ADC	R3,R25
    03EBE E383      LDI	R24,0x33
    03EBF E091      LDI	R25,1
    03EC0 01F5      MOVW	R30,R10
    03EC1 0FE8      ADD	R30,R24
    03EC2 1FF9      ADC	R31,R25
    03EC3 8040      LD	R4,Z
    03EC4 8051      LDD	R5,Z+1
    03EC5 91E0 0442 LDS	R30,ship3y
    03EC7 91F0 0443 LDS	R31,ship3y+1
    03EC9 0DE4      ADD	R30,R4
    03ECA 1DF5      ADC	R31,R5
    03ECB 0FEE      LSL	R30
    03ECC 1FFF      ROL	R31
    03ECD 0DE2      ADD	R30,R2
    03ECE 1DF3      ADC	R31,R3
    03ECF 8020      LD	R2,Z
    03ED0 8031      LDD	R3,Z+1
    03ED1 2022      TST	R2
    03ED2 F449      BNE	0x3EDC
    03ED3 2033      TST	R3
    03ED4 F439      BNE	0x3EDC
    03ED5 2422      CLR	R2
    03ED6 2433      CLR	R3
    03ED7 9230 02DC STS	destroy+5,R3
    03ED9 9220 02DB STS	destroy+4,R2
    03EDB C046      RJMP	0x3F22
(1224)                             else if(destroy[n]==-1&&!counter_detect[ship4x+i4[n]][ship4y+j4[n]]) destroy[3]=0;
    03EDC 90A0 03D1 LDS	R10,n
    03EDE 24BB      CLR	R11
    03EDF FCA7      SBRC	R10,7
    03EE0 94B0      COM	R11
    03EE1 0CAA      LSL	R10
    03EE2 1CBB      ROL	R11
    03EE3 ED87      LDI	R24,0xD7
    03EE4 E092      LDI	R25,2
    03EE5 01F5      MOVW	R30,R10
    03EE6 0FE8      ADD	R30,R24
    03EE7 1FF9      ADC	R31,R25
    03EE8 8180      LD	R24,Z
    03EE9 8191      LDD	R25,Z+1
    03EEA 3F8F      CPI	R24,0xFF
    03EEB EFEF      LDI	R30,0xFF
    03EEC 079E      CPC	R25,R30
    03EED F009      BEQ	0x3EEF
    03EEE C033      RJMP	0x3F22
    03EEF E387      LDI	R24,0x37
    03EF0 E091      LDI	R25,1
    03EF1 01F5      MOVW	R30,R10
    03EF2 0FE8      ADD	R30,R24
    03EF3 1FF9      ADC	R31,R25
    03EF4 8020      LD	R2,Z
    03EF5 8031      LDD	R3,Z+1
    03EF6 9120 0440 LDS	R18,ship4x
    03EF8 9130 0441 LDS	R19,ship4x+1
    03EFA 0D22      ADD	R18,R2
    03EFB 1D33      ADC	R19,R3
    03EFC E100      LDI	R16,0x10
    03EFD E010      LDI	R17,0
    03EFE 940E 4674 CALL	empy16s
    03F00 0118      MOVW	R2,R16
    03F01 ED85      LDI	R24,0xD5
    03F02 E091      LDI	R25,1
    03F03 0E28      ADD	R2,R24
    03F04 1E39      ADC	R3,R25
    03F05 E481      LDI	R24,0x41
    03F06 E091      LDI	R25,1
    03F07 01F5      MOVW	R30,R10
    03F08 0FE8      ADD	R30,R24
    03F09 1FF9      ADC	R31,R25
    03F0A 8040      LD	R4,Z
    03F0B 8051      LDD	R5,Z+1
    03F0C 91E0 043E LDS	R30,ship4y
    03F0E 91F0 043F LDS	R31,ship4y+1
    03F10 0DE4      ADD	R30,R4
    03F11 1DF5      ADC	R31,R5
    03F12 0FEE      LSL	R30
    03F13 1FFF      ROL	R31
    03F14 0DE2      ADD	R30,R2
    03F15 1DF3      ADC	R31,R3
    03F16 8020      LD	R2,Z
    03F17 8031      LDD	R3,Z+1
    03F18 2022      TST	R2
    03F19 F441      BNE	0x3F22
    03F1A 2033      TST	R3
    03F1B F431      BNE	0x3F22
    03F1C 2422      CLR	R2
    03F1D 2433      CLR	R3
    03F1E 9230 02DE STS	destroy+7,R3
    03F20 9220 02DD STS	destroy+6,R2
(1225)                         }
    03F22 9180 03D1 LDS	R24,n
    03F24 5F8F      SUBI	R24,0xFF
    03F25 9380 03D1 STS	n,R24
    03F27 9180 03D1 LDS	R24,n
    03F29 3085      CPI	R24,5
    03F2A F40C      BGE	0x3F2C
    03F2B CEDB      RJMP	0x3E07
(1226)                         for(n=0;n<4;n++){
    03F2C 2422      CLR	R2
    03F2D 9220 03D1 STS	n,R2
    03F2F C04D      RJMP	0x3F7D
(1227)                             if(destroy[n]==-1){
    03F30 ED87      LDI	R24,0xD7
    03F31 E092      LDI	R25,2
    03F32 91E0 03D1 LDS	R30,n
    03F34 27FF      CLR	R31
    03F35 FDE7      SBRC	R30,7
    03F36 95F0      COM	R31
    03F37 0FEE      LSL	R30
    03F38 1FFF      ROL	R31
    03F39 0FE8      ADD	R30,R24
    03F3A 1FF9      ADC	R31,R25
    03F3B 8180      LD	R24,Z
    03F3C 8191      LDD	R25,Z+1
    03F3D 3F8F      CPI	R24,0xFF
    03F3E EFEF      LDI	R30,0xFF
    03F3F 079E      CPC	R25,R30
    03F40 F4C9      BNE	0x3F5A
(1228)                                 ship_cnt++, destroy[n]=1, led_score();
    03F41 9180 02DF LDS	R24,ship_cnt
    03F43 5F8F      SUBI	R24,0xFF
    03F44 9380 02DF STS	ship_cnt,R24
    03F46 ED87      LDI	R24,0xD7
    03F47 E092      LDI	R25,2
    03F48 91E0 03D1 LDS	R30,n
    03F4A 27FF      CLR	R31
    03F4B FDE7      SBRC	R30,7
    03F4C 95F0      COM	R31
    03F4D 0FEE      LSL	R30
    03F4E 1FFF      ROL	R31
    03F4F 0FE8      ADD	R30,R24
    03F50 1FF9      ADC	R31,R25
    03F51 E081      LDI	R24,1
    03F52 E090      LDI	R25,0
    03F53 8391      STD	Z+1,R25
    03F54 8380      ST	Z,R24
    03F55 940E 22B5 CALL	_led_score
(1229)                                 vibrating();
    03F57 940E 1533 CALL	_vibrating
(1230)                             }
    03F59 C01E      RJMP	0x3F78
(1231)                             else if(!destroy[n]) destroy[n]=-1;
    03F5A ED87      LDI	R24,0xD7
    03F5B E092      LDI	R25,2
    03F5C 91E0 03D1 LDS	R30,n
    03F5E 27FF      CLR	R31
    03F5F FDE7      SBRC	R30,7
    03F60 95F0      COM	R31
    03F61 0FEE      LSL	R30
    03F62 1FFF      ROL	R31
    03F63 0FE8      ADD	R30,R24
    03F64 1FF9      ADC	R31,R25
    03F65 8020      LD	R2,Z
    03F66 8031      LDD	R3,Z+1
    03F67 2022      TST	R2
    03F68 F479      BNE	0x3F78
    03F69 2033      TST	R3
    03F6A F469      BNE	0x3F78
    03F6B 91E0 03D1 LDS	R30,n
    03F6D 27FF      CLR	R31
    03F6E FDE7      SBRC	R30,7
    03F6F 95F0      COM	R31
    03F70 0FEE      LSL	R30
    03F71 1FFF      ROL	R31
    03F72 0FE8      ADD	R30,R24
    03F73 1FF9      ADC	R31,R25
    03F74 EF8F      LDI	R24,0xFF
    03F75 EF9F      LDI	R25,0xFF
    03F76 8391      STD	Z+1,R25
    03F77 8380      ST	Z,R24
(1232)                         }
    03F78 9180 03D1 LDS	R24,n
    03F7A 5F8F      SUBI	R24,0xFF
    03F7B 9380 03D1 STS	n,R24
    03F7D 9180 03D1 LDS	R24,n
    03F7F 3084      CPI	R24,4
    03F80 F40C      BGE	0x3F82
    03F81 CFAE      RJMP	0x3F30
(1233)                         com_rest_ship--;
    03F82 9180 02F2 LDS	R24,com_rest_ship
    03F84 9190 02F3 LDS	R25,com_rest_ship+1
    03F86 9701      SBIW	R24,1
    03F87 9390 02F3 STS	com_rest_ship+1,R25
    03F89 9380 02F2 STS	com_rest_ship,R24
(1234)                         if(com_rest_ship==0){
    03F8B 3080      CPI	R24,0
    03F8C 0789      CPC	R24,R25
    03F8D F009      BEQ	0x3F8F
    03F8E C05A      RJMP	0x3FE9
(1235)                             GLCD_Clear();
    03F8F 940E 04C4 CALL	_GLCD_Clear
(1236)                             GLCD_TextGoTo(10,7);
    03F91 E027      LDI	R18,7
    03F92 E00A      LDI	R16,0xA
    03F93 940E 0405 CALL	_GLCD_TextGoTo
(1237)                             GLCD_WriteString("VICTOTY!!");
    03F95 E109      LDI	R16,0x19
    03F96 E013      LDI	R17,3
    03F97 940E 03F6 CALL	_GLCD_WriteString
(1238)                             GLCD_cursor_off(0,0);
    03F99 2722      CLR	R18
    03F9A 2733      CLR	R19
    03F9B 2700      CLR	R16
    03F9C 2711      CLR	R17
    03F9D 940E 139F CALL	_GLCD_cursor_off
(1239)                             break;
    03F9F C06A      RJMP	0x400A
(1240)                         }
(1241)                     }
(1242)                     else if(counter_set[i][j]==2){
    03FA0 9120 0151 LDS	R18,i
    03FA2 9130 0152 LDS	R19,i+1
    03FA4 E100      LDI	R16,0x10
    03FA5 E010      LDI	R17,0
    03FA6 940E 4674 CALL	empy16s
    03FA8 E585      LDI	R24,0x55
    03FA9 E091      LDI	R25,1
    03FAA 0118      MOVW	R2,R16
    03FAB 0E28      ADD	R2,R24
    03FAC 1E39      ADC	R3,R25
    03FAD 91E0 0153 LDS	R30,j
    03FAF 91F0 0154 LDS	R31,j+1
    03FB1 0FEE      LSL	R30
    03FB2 1FFF      ROL	R31
    03FB3 0DE2      ADD	R30,R2
    03FB4 1DF3      ADC	R31,R3
    03FB5 8180      LD	R24,Z
    03FB6 8191      LDD	R25,Z+1
    03FB7 3082      CPI	R24,2
    03FB8 E0E0      LDI	R30,0
    03FB9 079E      CPC	R25,R30
    03FBA F451      BNE	0x3FC5
(1243)                         item_cnt++, led_score();
    03FBB 9180 02E0 LDS	R24,item_cnt
    03FBD 5F8F      SUBI	R24,0xFF
    03FBE 9380 02E0 STS	item_cnt,R24
    03FC0 940E 22B5 CALL	_led_score
(1244)                         vibrating();
    03FC2 940E 1533 CALL	_vibrating
(1245)                     }
    03FC4 C024      RJMP	0x3FE9
(1246)                     else if(counter_set[i][j]==3){
    03FC5 9120 0151 LDS	R18,i
    03FC7 9130 0152 LDS	R19,i+1
    03FC9 E100      LDI	R16,0x10
    03FCA E010      LDI	R17,0
    03FCB 940E 4674 CALL	empy16s
    03FCD E585      LDI	R24,0x55
    03FCE E091      LDI	R25,1
    03FCF 0118      MOVW	R2,R16
    03FD0 0E28      ADD	R2,R24
    03FD1 1E39      ADC	R3,R25
    03FD2 91E0 0153 LDS	R30,j
    03FD4 91F0 0154 LDS	R31,j+1
    03FD6 0FEE      LSL	R30
    03FD7 1FFF      ROL	R31
    03FD8 0DE2      ADD	R30,R2
    03FD9 1DF3      ADC	R31,R3
    03FDA 8180      LD	R24,Z
    03FDB 8191      LDD	R25,Z+1
    03FDC 3083      CPI	R24,3
    03FDD E0E0      LDI	R30,0
    03FDE 079E      CPC	R25,R30
    03FDF F449      BNE	0x3FE9
(1247)                         mine_cnt++, led_score();
    03FE0 9180 02E1 LDS	R24,mine_cnt
    03FE2 5F8F      SUBI	R24,0xFF
    03FE3 9380 02E1 STS	mine_cnt,R24
    03FE5 940E 22B5 CALL	_led_score
(1248)                         vibrating();
    03FE7 940E 1533 CALL	_vibrating
(1249)                     }
(1250)                     if(com_rest_ship==0) break;
    03FE9 9020 02F2 LDS	R2,com_rest_ship
    03FEB 9030 02F3 LDS	R3,com_rest_ship+1
    03FED 2022      TST	R2
    03FEE F419      BNE	0x3FF2
    03FEF 2033      TST	R3
    03FF0 F409      BNE	0x3FF2
    03FF1 C018      RJMP	0x400A
(1251)                 }
(1252)                 if(com_rest_ship==0) break;
    03FF2 9020 02F2 LDS	R2,com_rest_ship
    03FF4 9030 02F3 LDS	R3,com_rest_ship+1
    03FF6 2022      TST	R2
    03FF7 F419      BNE	0x3FFB
    03FF8 2033      TST	R3
    03FF9 F409      BNE	0x3FFB
    03FFA C00F      RJMP	0x400A
(1253)             }
(1254)             if(com_rest_ship==0) break;
    03FFB 9020 02F2 LDS	R2,com_rest_ship
    03FFD 9030 02F3 LDS	R3,com_rest_ship+1
    03FFF 2022      TST	R2
    04000 F419      BNE	0x4004
    04001 2033      TST	R3
    04002 F409      BNE	0x4004
    04003 C006      RJMP	0x400A
(1255)         }
    04004 E080      LDI	R24,0
    04005 9020 02D5 LDS	R2,flag
    04007 1582      CP	R24,R2
    04008 F408      BCC	0x400A
    04009 CDB1      RJMP	0x3DBB
(1256)         if(com_rest_ship==0) break;
    0400A 9020 02F2 LDS	R2,com_rest_ship
    0400C 9030 02F3 LDS	R3,com_rest_ship+1
    0400E 2022      TST	R2
    0400F F419      BNE	0x4013
    04010 2033      TST	R3
    04011 F409      BNE	0x4013
    04012 C59E      RJMP	0x45B1
(1257) 
(1258)         flag=1;
    04013 E081      LDI	R24,1
    04014 9380 02D5 STS	flag,R24
(1259)         delay_ms(800);
    04016 E200      LDI	R16,0x20
    04017 E013      LDI	R17,3
    04018 940E 04B0 CALL	_delay_ms
    0401A C23C      RJMP	0x4257
(1260)         while(flag>0){ //com turn
(1261)             rand_i=rand()%8;
    0401B 940E 0823 CALL	_rand
    0401D E028      LDI	R18,0x8
    0401E E030      LDI	R19,0
    0401F 940E 45B8 CALL	mod16s
    04021 9310 03CC STS	rand_i+1,R17
    04023 9300 03CB STS	rand_i,R16
(1262)             rand_j=rand()%8;
    04025 940E 0823 CALL	_rand
    04027 E028      LDI	R18,0x8
    04028 E030      LDI	R19,0
    04029 940E 45B8 CALL	mod16s
    0402B 9310 03CA STS	rand_j+1,R17
    0402D 9300 03C9 STS	rand_j,R16
(1263)             rate=rand()%10;
    0402F 940E 0823 CALL	_rand
    04031 0158      MOVW	R10,R16
    04032 E02A      LDI	R18,0xA
    04033 E030      LDI	R19,0
    04034 940E 45B8 CALL	mod16s
    04036 9310 03C3 STS	rate+1,R17
    04038 9300 03C2 STS	rate,R16
(1264)             if(rate>difficult){//easy: 20%ÀÇ È®·ü °ø°Ý hard: 40%È®·ü °ø°Ý
    0403A 9020 02E7 LDS	R2,difficult
    0403C 2433      CLR	R3
    0403D 1620      CP	R2,R16
    0403E 0631      CPC	R3,R17
    0403F F00C      BLT	0x4041
    04040 C080      RJMP	0x40C1
(1265)                     cnt=0;
    04041 2422      CLR	R2
    04042 9220 02EA STS	cnt,R2
(1266)                     for(i=0;i<8;i++)
    04044 9230 0152 STS	i+1,R3
    04046 9220 0151 STS	i,R2
(1267)                     for(j=0;j<8;j++){
    04048 2422      CLR	R2
    04049 2433      CLR	R3
    0404A 9230 0154 STS	j+1,R3
    0404C 9220 0153 STS	j,R2
(1268)                         if(game_set[i][j]==1&&cnt==0) {
    0404E 9120 0151 LDS	R18,i
    04050 9130 0152 LDS	R19,i+1
    04052 E100      LDI	R16,0x10
    04053 E010      LDI	R17,0
    04054 940E 4674 CALL	empy16s
    04056 E587      LDI	R24,0x57
    04057 E094      LDI	R25,4
    04058 0118      MOVW	R2,R16
    04059 0E28      ADD	R2,R24
    0405A 1E39      ADC	R3,R25
    0405B 91E0 0153 LDS	R30,j
    0405D 91F0 0154 LDS	R31,j+1
    0405F 0FEE      LSL	R30
    04060 1FFF      ROL	R31
    04061 0DE2      ADD	R30,R2
    04062 1DF3      ADC	R31,R3
    04063 8180      LD	R24,Z
    04064 8191      LDD	R25,Z+1
    04065 3081      CPI	R24,1
    04066 E0E0      LDI	R30,0
    04067 079E      CPC	R25,R30
    04068 F009      BEQ	0x406A
    04069 C03A      RJMP	0x40A4
    0406A 9020 02EA LDS	R2,cnt
    0406C 2022      TST	R2
    0406D F5B1      BNE	0x40A4
(1269)                             delay_ms(500);
    0406E EF04      LDI	R16,0xF4
    0406F E011      LDI	R17,1
    04070 940E 04B0 CALL	_delay_ms
(1270)                             rGLCD_cursor_off(i,j);
    04072 9120 0153 LDS	R18,j
    04074 9130 0154 LDS	R19,j+1
    04076 9100 0151 LDS	R16,i
    04078 9110 0152 LDS	R17,i+1
    0407A 940E 0749 CALL	_rGLCD_cursor_off
(1271)                             rGLCD_success(i,j);
    0407C 9120 0153 LDS	R18,j
    0407E 9130 0154 LDS	R19,j+1
    04080 9100 0151 LDS	R16,i
    04082 9110 0152 LDS	R17,i+1
    04084 940E 13D4 CALL	_rGLCD_success
(1272)                             game_set[i][j]=5;
    04086 9120 0151 LDS	R18,i
    04088 9130 0152 LDS	R19,i+1
    0408A E100      LDI	R16,0x10
    0408B E010      LDI	R17,0
    0408C 940E 4674 CALL	empy16s
    0408E E587      LDI	R24,0x57
    0408F E094      LDI	R25,4
    04090 0118      MOVW	R2,R16
    04091 0E28      ADD	R2,R24
    04092 1E39      ADC	R3,R25
    04093 91E0 0153 LDS	R30,j
    04095 91F0 0154 LDS	R31,j+1
    04097 0FEE      LSL	R30
    04098 1FFF      ROL	R31
    04099 0DE2      ADD	R30,R2
    0409A 1DF3      ADC	R31,R3
    0409B E085      LDI	R24,5
    0409C E090      LDI	R25,0
    0409D 8391      STD	Z+1,R25
    0409E 8380      ST	Z,R24
(1273)                             cnt++;
    0409F 9180 02EA LDS	R24,cnt
    040A1 5F8F      SUBI	R24,0xFF
    040A2 9380 02EA STS	cnt,R24
(1274)                             }
(1275)                         }
    040A4 9180 0153 LDS	R24,j
    040A6 9190 0154 LDS	R25,j+1
    040A8 9601      ADIW	R24,1
    040A9 9390 0154 STS	j+1,R25
    040AB 9380 0153 STS	j,R24
    040AD 3088      CPI	R24,0x8
    040AE E0E0      LDI	R30,0
    040AF 079E      CPC	R25,R30
    040B0 F40C      BGE	0x40B2
    040B1 CF9C      RJMP	0x404E
    040B2 9180 0151 LDS	R24,i
    040B4 9190 0152 LDS	R25,i+1
    040B6 9601      ADIW	R24,1
    040B7 9390 0152 STS	i+1,R25
    040B9 9380 0151 STS	i,R24
    040BB 3088      CPI	R24,0x8
    040BC E0E0      LDI	R30,0
    040BD 079E      CPC	R25,R30
    040BE F40C      BGE	0x40C0
    040BF CF88      RJMP	0x4048
(1276)                 }
    040C0 C196      RJMP	0x4257
(1277)             else if(game_set[rand_i][rand_j]==0){//ºñÀûÁß
    040C1 9120 03CB LDS	R18,rand_i
    040C3 9130 03CC LDS	R19,rand_i+1
    040C5 E100      LDI	R16,0x10
    040C6 E010      LDI	R17,0
    040C7 940E 4674 CALL	empy16s
    040C9 E587      LDI	R24,0x57
    040CA E094      LDI	R25,4
    040CB 0118      MOVW	R2,R16
    040CC 0E28      ADD	R2,R24
    040CD 1E39      ADC	R3,R25
    040CE 91E0 03C9 LDS	R30,rand_j
    040D0 91F0 03CA LDS	R31,rand_j+1
    040D2 0FEE      LSL	R30
    040D3 1FFF      ROL	R31
    040D4 0DE2      ADD	R30,R2
    040D5 1DF3      ADC	R31,R3
    040D6 8020      LD	R2,Z
    040D7 8031      LDD	R3,Z+1
    040D8 2022      TST	R2
    040D9 F5A9      BNE	0x410F
    040DA 2033      TST	R3
    040DB F599      BNE	0x410F
(1278)                 rGLCD_cursor_off(rand_i,rand_j);
    040DC 9120 03C9 LDS	R18,rand_j
    040DE 9130 03CA LDS	R19,rand_j+1
    040E0 9100 03CB LDS	R16,rand_i
    040E2 9110 03CC LDS	R17,rand_i+1
    040E4 940E 0749 CALL	_rGLCD_cursor_off
(1279)                 rGLCD_fail(rand_i,rand_j);
    040E6 9120 03C9 LDS	R18,rand_j
    040E8 9130 03CA LDS	R19,rand_j+1
    040EA 9100 03CB LDS	R16,rand_i
    040EC 9110 03CC LDS	R17,rand_i+1
    040EE 940E 09A9 CALL	_rGLCD_fail
(1280)                 flag--;
    040F0 9180 02D5 LDS	R24,flag
    040F2 5081      SUBI	R24,1
    040F3 9380 02D5 STS	flag,R24
(1281)                 game_set[rand_i][rand_j]=5;
    040F5 9120 03CB LDS	R18,rand_i
    040F7 9130 03CC LDS	R19,rand_i+1
    040F9 E100      LDI	R16,0x10
    040FA E010      LDI	R17,0
    040FB 940E 4674 CALL	empy16s
    040FD E587      LDI	R24,0x57
    040FE E094      LDI	R25,4
    040FF 0118      MOVW	R2,R16
    04100 0E28      ADD	R2,R24
    04101 1E39      ADC	R3,R25
    04102 91E0 03C9 LDS	R30,rand_j
    04104 91F0 03CA LDS	R31,rand_j+1
    04106 0FEE      LSL	R30
    04107 1FFF      ROL	R31
    04108 0DE2      ADD	R30,R2
    04109 1DF3      ADC	R31,R3
    0410A E085      LDI	R24,5
    0410B E090      LDI	R25,0
    0410C 8391      STD	Z+1,R25
    0410D 8380      ST	Z,R24
(1282)                 }
    0410E C148      RJMP	0x4257
(1283)             else if(game_set[rand_i][rand_j]==1||game_set[rand_i][rand_j]==4){//ÀüÇÔ,¾ÏÃÊÀûÁß
    0410F 9120 03CB LDS	R18,rand_i
    04111 9130 03CC LDS	R19,rand_i+1
    04113 E100      LDI	R16,0x10
    04114 E010      LDI	R17,0
    04115 940E 4674 CALL	empy16s
    04117 E587      LDI	R24,0x57
    04118 E094      LDI	R25,4
    04119 0118      MOVW	R2,R16
    0411A 0E28      ADD	R2,R24
    0411B 1E39      ADC	R3,R25
    0411C 91E0 03C9 LDS	R30,rand_j
    0411E 91F0 03CA LDS	R31,rand_j+1
    04120 0FEE      LSL	R30
    04121 1FFF      ROL	R31
    04122 0DE2      ADD	R30,R2
    04123 1DF3      ADC	R31,R3
    04124 8140      LD	R20,Z
    04125 8151      LDD	R21,Z+1
    04126 3041      CPI	R20,1
    04127 E0E0      LDI	R30,0
    04128 075E      CPC	R21,R30
    04129 F021      BEQ	0x412E
    0412A 3044      CPI	R20,4
    0412B E0E0      LDI	R30,0
    0412C 075E      CPC	R21,R30
    0412D F571      BNE	0x415C
(1284)                 rGLCD_cursor_off(rand_i,rand_j);
    0412E 9120 03C9 LDS	R18,rand_j
    04130 9130 03CA LDS	R19,rand_j+1
    04132 9100 03CB LDS	R16,rand_i
    04134 9110 03CC LDS	R17,rand_i+1
    04136 940E 0749 CALL	_rGLCD_cursor_off
(1285)                 rGLCD_success(rand_i,rand_j);
    04138 9120 03C9 LDS	R18,rand_j
    0413A 9130 03CA LDS	R19,rand_j+1
    0413C 9100 03CB LDS	R16,rand_i
    0413E 9110 03CC LDS	R17,rand_i+1
    04140 940E 13D4 CALL	_rGLCD_success
(1286)                 game_set[rand_i][rand_j]=5;
    04142 9120 03CB LDS	R18,rand_i
    04144 9130 03CC LDS	R19,rand_i+1
    04146 E100      LDI	R16,0x10
    04147 E010      LDI	R17,0
    04148 940E 4674 CALL	empy16s
    0414A E587      LDI	R24,0x57
    0414B E094      LDI	R25,4
    0414C 0118      MOVW	R2,R16
    0414D 0E28      ADD	R2,R24
    0414E 1E39      ADC	R3,R25
    0414F 91E0 03C9 LDS	R30,rand_j
    04151 91F0 03CA LDS	R31,rand_j+1
    04153 0FEE      LSL	R30
    04154 1FFF      ROL	R31
    04155 0DE2      ADD	R30,R2
    04156 1DF3      ADC	R31,R3
    04157 E085      LDI	R24,5
    04158 E090      LDI	R25,0
    04159 8391      STD	Z+1,R25
    0415A 8380      ST	Z,R24
(1287)             }
    0415B C0FB      RJMP	0x4257
(1288)             else if(game_set[rand_i][rand_j]==2){//¾ÆÀÌÅÛ
    0415C 9120 03CB LDS	R18,rand_i
    0415E 9130 03CC LDS	R19,rand_i+1
    04160 E100      LDI	R16,0x10
    04161 E010      LDI	R17,0
    04162 940E 4674 CALL	empy16s
    04164 E587      LDI	R24,0x57
    04165 E094      LDI	R25,4
    04166 0118      MOVW	R2,R16
    04167 0E28      ADD	R2,R24
    04168 1E39      ADC	R3,R25
    04169 91E0 03C9 LDS	R30,rand_j
    0416B 91F0 03CA LDS	R31,rand_j+1
    0416D 0FEE      LSL	R30
    0416E 1FFF      ROL	R31
    0416F 0DE2      ADD	R30,R2
    04170 1DF3      ADC	R31,R3
    04171 8180      LD	R24,Z
    04172 8191      LDD	R25,Z+1
    04173 3082      CPI	R24,2
    04174 E0E0      LDI	R30,0
    04175 079E      CPC	R25,R30
    04176 F549      BNE	0x41A0
(1289)                 rGLCD_fail(rand_i,rand_j);
    04177 9120 03C9 LDS	R18,rand_j
    04179 9130 03CA LDS	R19,rand_j+1
    0417B 9100 03CB LDS	R16,rand_i
    0417D 9110 03CC LDS	R17,rand_i+1
    0417F 940E 09A9 CALL	_rGLCD_fail
(1290)                 flag++;
    04181 9180 02D5 LDS	R24,flag
    04183 5F8F      SUBI	R24,0xFF
    04184 9380 02D5 STS	flag,R24
(1291)                 game_set[rand_i][rand_j]=5;
    04186 9120 03CB LDS	R18,rand_i
    04188 9130 03CC LDS	R19,rand_i+1
    0418A E100      LDI	R16,0x10
    0418B E010      LDI	R17,0
    0418C 940E 4674 CALL	empy16s
    0418E E587      LDI	R24,0x57
    0418F E094      LDI	R25,4
    04190 0118      MOVW	R2,R16
    04191 0E28      ADD	R2,R24
    04192 1E39      ADC	R3,R25
    04193 91E0 03C9 LDS	R30,rand_j
    04195 91F0 03CA LDS	R31,rand_j+1
    04197 0FEE      LSL	R30
    04198 1FFF      ROL	R31
    04199 0DE2      ADD	R30,R2
    0419A 1DF3      ADC	R31,R3
    0419B E085      LDI	R24,5
    0419C E090      LDI	R25,0
    0419D 8391      STD	Z+1,R25
    0419E 8380      ST	Z,R24
(1292)             }
    0419F C0B7      RJMP	0x4257
(1293)             else if(game_set[rand_i][rand_j]==3){//Áö·Ú
    041A0 9120 03CB LDS	R18,rand_i
    041A2 9130 03CC LDS	R19,rand_i+1
    041A4 E100      LDI	R16,0x10
    041A5 E010      LDI	R17,0
    041A6 940E 4674 CALL	empy16s
    041A8 E587      LDI	R24,0x57
    041A9 E094      LDI	R25,4
    041AA 0118      MOVW	R2,R16
    041AB 0E28      ADD	R2,R24
    041AC 1E39      ADC	R3,R25
    041AD 91E0 03C9 LDS	R30,rand_j
    041AF 91F0 03CA LDS	R31,rand_j+1
    041B1 0FEE      LSL	R30
    041B2 1FFF      ROL	R31
    041B3 0DE2      ADD	R30,R2
    041B4 1DF3      ADC	R31,R3
    041B5 8180      LD	R24,Z
    041B6 8191      LDD	R25,Z+1
    041B7 3083      CPI	R24,3
    041B8 E0E0      LDI	R30,0
    041B9 079E      CPC	R25,R30
    041BA F009      BEQ	0x41BC
    041BB C09B      RJMP	0x4257
(1294)                 rGLCD_cursor_off(rand_i,rand_j);
    041BC 9120 03C9 LDS	R18,rand_j
    041BE 9130 03CA LDS	R19,rand_j+1
    041C0 9100 03CB LDS	R16,rand_i
    041C2 9110 03CC LDS	R17,rand_i+1
    041C4 940E 0749 CALL	_rGLCD_cursor_off
(1295)                 rGLCD_fail(rand_i,rand_j);
    041C6 9120 03C9 LDS	R18,rand_j
    041C8 9130 03CA LDS	R19,rand_j+1
    041CA 9100 03CB LDS	R16,rand_i
    041CC 9110 03CC LDS	R17,rand_i+1
    041CE 940E 09A9 CALL	_rGLCD_fail
(1296)                 flag--;
    041D0 9180 02D5 LDS	R24,flag
    041D2 5081      SUBI	R24,1
    041D3 9380 02D5 STS	flag,R24
(1297)                 game_set[rand_i][rand_j]=5;
    041D5 9120 03CB LDS	R18,rand_i
    041D7 9130 03CC LDS	R19,rand_i+1
    041D9 E100      LDI	R16,0x10
    041DA E010      LDI	R17,0
    041DB 940E 4674 CALL	empy16s
    041DD E587      LDI	R24,0x57
    041DE E094      LDI	R25,4
    041DF 0118      MOVW	R2,R16
    041E0 0E28      ADD	R2,R24
    041E1 1E39      ADC	R3,R25
    041E2 91E0 03C9 LDS	R30,rand_j
    041E4 91F0 03CA LDS	R31,rand_j+1
    041E6 0FEE      LSL	R30
    041E7 1FFF      ROL	R31
    041E8 0DE2      ADD	R30,R2
    041E9 1DF3      ADC	R31,R3
    041EA E085      LDI	R24,5
    041EB E090      LDI	R25,0
    041EC 8391      STD	Z+1,R25
    041ED 8380      ST	Z,R24
(1298)                 i=rand()%8; j=rand()%8;
    041EE 940E 0823 CALL	_rand
    041F0 E028      LDI	R18,0x8
    041F1 E030      LDI	R19,0
    041F2 940E 45B8 CALL	mod16s
    041F4 9310 0152 STS	i+1,R17
    041F6 9300 0151 STS	i,R16
    041F8 940E 0823 CALL	_rand
    041FA 0158      MOVW	R10,R16
    041FB E028      LDI	R18,0x8
    041FC E030      LDI	R19,0
    041FD 940E 45B8 CALL	mod16s
    041FF 9310 0154 STS	j+1,R17
    04201 9300 0153 STS	j,R16
    04203 C015      RJMP	0x4219
(1299)                 while(counter_set[i][j]!=1) i=rand()%8, j=rand()%8;
    04204 940E 0823 CALL	_rand
    04206 E028      LDI	R18,0x8
    04207 E030      LDI	R19,0
    04208 940E 45B8 CALL	mod16s
    0420A 9310 0152 STS	i+1,R17
    0420C 9300 0151 STS	i,R16
    0420E 940E 0823 CALL	_rand
    04210 0158      MOVW	R10,R16
    04211 E028      LDI	R18,0x8
    04212 E030      LDI	R19,0
    04213 940E 45B8 CALL	mod16s
    04215 9310 0154 STS	j+1,R17
    04217 9300 0153 STS	j,R16
    04219 9120 0151 LDS	R18,i
    0421B 9130 0152 LDS	R19,i+1
    0421D E100      LDI	R16,0x10
    0421E E010      LDI	R17,0
    0421F 940E 4674 CALL	empy16s
    04221 E585      LDI	R24,0x55
    04222 E091      LDI	R25,1
    04223 0118      MOVW	R2,R16
    04224 0E28      ADD	R2,R24
    04225 1E39      ADC	R3,R25
    04226 91E0 0153 LDS	R30,j
    04228 91F0 0154 LDS	R31,j+1
    0422A 0FEE      LSL	R30
    0422B 1FFF      ROL	R31
    0422C 0DE2      ADD	R30,R2
    0422D 1DF3      ADC	R31,R3
    0422E 8180      LD	R24,Z
    0422F 8191      LDD	R25,Z+1
    04230 3081      CPI	R24,1
    04231 E0E0      LDI	R30,0
    04232 079E      CPC	R25,R30
    04233 F681      BNE	0x4204
(1300)                 lGLCD_fail(i,j); game_set[i][j]=5;
    04234 9120 0153 LDS	R18,j
    04236 9130 0154 LDS	R19,j+1
    04238 9100 0151 LDS	R16,i
    0423A 9110 0152 LDS	R17,i+1
    0423C 940E 1310 CALL	_lGLCD_fail
    0423E 9120 0151 LDS	R18,i
    04240 9130 0152 LDS	R19,i+1
    04242 E100      LDI	R16,0x10
    04243 E010      LDI	R17,0
    04244 940E 4674 CALL	empy16s
    04246 E587      LDI	R24,0x57
    04247 E094      LDI	R25,4
    04248 0118      MOVW	R2,R16
    04249 0E28      ADD	R2,R24
    0424A 1E39      ADC	R3,R25
    0424B 91E0 0153 LDS	R30,j
    0424D 91F0 0154 LDS	R31,j+1
    0424F 0FEE      LSL	R30
    04250 1FFF      ROL	R31
    04251 0DE2      ADD	R30,R2
    04252 1DF3      ADC	R31,R3
    04253 E085      LDI	R24,5
    04254 E090      LDI	R25,0
    04255 8391      STD	Z+1,R25
    04256 8380      ST	Z,R24
(1301)             }
(1302)         }
    04257 E080      LDI	R24,0
    04258 9020 02D5 LDS	R2,flag
    0425A 1582      CP	R24,R2
    0425B F408      BCC	0x425D
    0425C CDBE      RJMP	0x401B
(1303)         rest_ship=0;
    0425D 2422      CLR	R2
    0425E 9220 03C4 STS	rest_ship,R2
(1304)         for(i=0;i<8;i++)
    04260 2433      CLR	R3
    04261 9230 0152 STS	i+1,R3
    04263 9220 0151 STS	i,R2
(1305)         for(j=0;j<8;j++)
    04265 2422      CLR	R2
    04266 2433      CLR	R3
    04267 9230 0154 STS	j+1,R3
    04269 9220 0153 STS	j,R2
(1306)             if(game_set[i][j]==1)
    0426B 9120 0151 LDS	R18,i
    0426D 9130 0152 LDS	R19,i+1
    0426F E100      LDI	R16,0x10
    04270 E010      LDI	R17,0
    04271 940E 4674 CALL	empy16s
    04273 E587      LDI	R24,0x57
    04274 E094      LDI	R25,4
    04275 0118      MOVW	R2,R16
    04276 0E28      ADD	R2,R24
    04277 1E39      ADC	R3,R25
    04278 91E0 0153 LDS	R30,j
    0427A 91F0 0154 LDS	R31,j+1
    0427C 0FEE      LSL	R30
    0427D 1FFF      ROL	R31
    0427E 0DE2      ADD	R30,R2
    0427F 1DF3      ADC	R31,R3
    04280 8180      LD	R24,Z
    04281 8191      LDD	R25,Z+1
    04282 3081      CPI	R24,1
    04283 E0E0      LDI	R30,0
    04284 079E      CPC	R25,R30
    04285 F429      BNE	0x428B
(1307)                 rest_ship++;
    04286 9180 03C4 LDS	R24,rest_ship
    04288 5F8F      SUBI	R24,0xFF
    04289 9380 03C4 STS	rest_ship,R24
    0428B 9180 0153 LDS	R24,j
    0428D 9190 0154 LDS	R25,j+1
    0428F 9601      ADIW	R24,1
    04290 9390 0154 STS	j+1,R25
    04292 9380 0153 STS	j,R24
    04294 3088      CPI	R24,0x8
    04295 E0E0      LDI	R30,0
    04296 079E      CPC	R25,R30
    04297 F29C      BLT	0x426B
    04298 9180 0151 LDS	R24,i
    0429A 9190 0152 LDS	R25,i+1
    0429C 9601      ADIW	R24,1
    0429D 9390 0152 STS	i+1,R25
    0429F 9380 0151 STS	i,R24
    042A1 3088      CPI	R24,0x8
    042A2 E0E0      LDI	R30,0
    042A3 079E      CPC	R25,R30
    042A4 F40C      BGE	0x42A6
    042A5 CFBF      RJMP	0x4265
(1308) 
(1309)         if(rest_ship==0){
    042A6 9020 03C4 LDS	R2,rest_ship
    042A8 2022      TST	R2
    042A9 F489      BNE	0x42BB
(1310)             GLCD_Clear();
    042AA 940E 04C4 CALL	_GLCD_Clear
(1311)             GLCD_TextGoTo(7,7);
    042AC E027      LDI	R18,7
    042AD E007      LDI	R16,7
    042AE 940E 0405 CALL	_GLCD_TextGoTo
(1312)             GLCD_WriteString("YOU LOSE haha");
    042B0 E00B      LDI	R16,0xB
    042B1 E013      LDI	R17,3
    042B2 940E 03F6 CALL	_GLCD_WriteString
(1313)             GLCD_cursor_off(0,0);
    042B4 2722      CLR	R18
    042B5 2733      CLR	R19
    042B6 2700      CLR	R16
    042B7 2711      CLR	R17
    042B8 940E 139F CALL	_GLCD_cursor_off
(1314)             break;
    042BA C2F6      RJMP	0x45B1
(1315)         }
(1316)         else if(rest_ship<5&&difficult==5){
    042BB 9180 03C4 LDS	R24,rest_ship
    042BD 3085      CPI	R24,5
    042BE F460      BCC	0x42CB
    042BF 9180 02E7 LDS	R24,difficult
    042C1 3085      CPI	R24,5
    042C2 F441      BNE	0x42CB
(1317)             GLCD_TextGoTo(2,15);
    042C3 E02F      LDI	R18,0xF
    042C4 E002      LDI	R16,2
    042C5 940E 0405 CALL	_GLCD_TextGoTo
(1318)             GLCD_WriteString("Why don't you give up?");
    042C7 EF04      LDI	R16,0xF4
    042C8 E012      LDI	R17,2
    042C9 940E 03F6 CALL	_GLCD_WriteString
(1319)         }
(1320) 
(1321) 
(1322)     }
    042CB CADD      RJMP	0x3DA9
(1323)     }
(1324)     else{//2ÀÎ¿ë
(1325)         while(1){ //playing
(1326)             i=0,j=0;
    042CC 2422      CLR	R2
    042CD 2433      CLR	R3
    042CE 9230 0152 STS	i+1,R3
    042D0 9220 0151 STS	i,R2
    042D2 9230 0154 STS	j+1,R3
    042D4 9220 0153 STS	j,R2
    042D6 C1E4      RJMP	0x44BB
(1327)             while(flag>0){ //my turn
(1328)                 lGLCD_cursor(i,j);
    042D7 9120 0153 LDS	R18,j
    042D9 9130 0154 LDS	R19,j+1
    042DB 9100 0151 LDS	R16,i
    042DD 9110 0152 LDS	R17,i+1
    042DF 940E 0F13 CALL	_lGLCD_cursor
(1329)                 joystick_playing();
    042E1 940E 17DA CALL	_joystick_playing
(1330)                 if((PINF&0x08)==0x00){ //select
    042E3 9903      SBIC	0x00,3
    042E4 C1D6      RJMP	0x44BB
(1331)                     if(!counter_detect[i][j]){
    042E5 9120 0151 LDS	R18,i
    042E7 9130 0152 LDS	R19,i+1
    042E9 E100      LDI	R16,0x10
    042EA E010      LDI	R17,0
    042EB 940E 4674 CALL	empy16s
    042ED ED85      LDI	R24,0xD5
    042EE E091      LDI	R25,1
    042EF 0118      MOVW	R2,R16
    042F0 0E28      ADD	R2,R24
    042F1 1E39      ADC	R3,R25
    042F2 91E0 0153 LDS	R30,j
    042F4 91F0 0154 LDS	R31,j+1
    042F6 0FEE      LSL	R30
    042F7 1FFF      ROL	R31
    042F8 0DE2      ADD	R30,R2
    042F9 1DF3      ADC	R31,R3
    042FA 8020      LD	R2,Z
    042FB 8031      LDD	R3,Z+1
    042FC 2022      TST	R2
    042FD F009      BEQ	0x42FF
    042FE C1B8      RJMP	0x44B7
    042FF 2033      TST	R3
    04300 F009      BEQ	0x4302
    04301 C1B5      RJMP	0x44B7
(1332)                         switch_select();
    04302 940E 1DC7 CALL	_switch_select
(1333)                         if(counter_set[i][j]>=1&&counter_set[i][j]<=4){
    04304 9120 0151 LDS	R18,i
    04306 9130 0152 LDS	R19,i+1
    04308 E100      LDI	R16,0x10
    04309 E010      LDI	R17,0
    0430A 940E 4674 CALL	empy16s
    0430C E585      LDI	R24,0x55
    0430D E091      LDI	R25,1
    0430E 0118      MOVW	R2,R16
    0430F 0E28      ADD	R2,R24
    04310 1E39      ADC	R3,R25
    04311 91E0 0153 LDS	R30,j
    04313 91F0 0154 LDS	R31,j+1
    04315 0FEE      LSL	R30
    04316 1FFF      ROL	R31
    04317 0DE2      ADD	R30,R2
    04318 1DF3      ADC	R31,R3
    04319 8140      LD	R20,Z
    0431A 8151      LDD	R21,Z+1
    0431B 3041      CPI	R20,1
    0431C E0E0      LDI	R30,0
    0431D 075E      CPC	R21,R30
    0431E F40C      BGE	0x4320
    0431F C14D      RJMP	0x446D
    04320 E084      LDI	R24,4
    04321 E090      LDI	R25,0
    04322 1784      CP	R24,R20
    04323 0795      CPC	R25,R21
    04324 F40C      BGE	0x4326
    04325 C147      RJMP	0x446D
(1334)                             for(n=0;n<5;n++){
    04326 2422      CLR	R2
    04327 9220 03D1 STS	n,R2
    04329 C0E7      RJMP	0x4411
(1335)                                 if(destroy[0]==-1&&!counter_detect[cship1x[n]][cship1y[n]]) destroy[0]=0;
    0432A 9180 02D7 LDS	R24,destroy
    0432C 9190 02D8 LDS	R25,destroy+1
    0432E 3F8F      CPI	R24,0xFF
    0432F EFEF      LDI	R30,0xFF
    04330 079E      CPC	R25,R30
    04331 F009      BEQ	0x4333
    04332 C030      RJMP	0x4363
    04333 90A0 03D1 LDS	R10,n
    04335 24BB      CLR	R11
    04336 FCA7      SBRC	R10,7
    04337 94B0      COM	R11
    04338 0CAA      LSL	R10
    04339 1CBB      ROL	R11
    0433A E18E      LDI	R24,0x1E
    0433B E094      LDI	R25,4
    0433C 01F5      MOVW	R30,R10
    0433D 0FE8      ADD	R30,R24
    0433E 1FF9      ADC	R31,R25
    0433F 8120      LD	R18,Z
    04340 8131      LDD	R19,Z+1
    04341 E100      LDI	R16,0x10
    04342 E010      LDI	R17,0
    04343 940E 4674 CALL	empy16s
    04345 ED85      LDI	R24,0xD5
    04346 E091      LDI	R25,1
    04347 0118      MOVW	R2,R16
    04348 0E28      ADD	R2,R24
    04349 1E39      ADC	R3,R25
    0434A E186      LDI	R24,0x16
    0434B E094      LDI	R25,4
    0434C 01F5      MOVW	R30,R10
    0434D 0FE8      ADD	R30,R24
    0434E 1FF9      ADC	R31,R25
    0434F 8040      LD	R4,Z
    04350 8051      LDD	R5,Z+1
    04351 0C44      LSL	R4
    04352 1C55      ROL	R5
    04353 01F2      MOVW	R30,R4
    04354 0DE2      ADD	R30,R2
    04355 1DF3      ADC	R31,R3
    04356 8020      LD	R2,Z
    04357 8031      LDD	R3,Z+1
    04358 2022      TST	R2
    04359 F449      BNE	0x4363
    0435A 2033      TST	R3
    0435B F439      BNE	0x4363
    0435C 2422      CLR	R2
    0435D 2433      CLR	R3
    0435E 9230 02D8 STS	destroy+1,R3
    04360 9220 02D7 STS	destroy,R2
    04362 C0A9      RJMP	0x440C
(1336)                                 else if(destroy[1]==-1&&!counter_detect[cship2x[n]][cship2y[n]]) destroy[1]=0;
    04363 9180 02D9 LDS	R24,destroy+2
    04365 9190 02DA LDS	R25,destroy+3
    04367 3F8F      CPI	R24,0xFF
    04368 EFEF      LDI	R30,0xFF
    04369 079E      CPC	R25,R30
    0436A F009      BEQ	0x436C
    0436B C030      RJMP	0x439C
    0436C 90A0 03D1 LDS	R10,n
    0436E 24BB      CLR	R11
    0436F FCA7      SBRC	R10,7
    04370 94B0      COM	R11
    04371 0CAA      LSL	R10
    04372 1CBB      ROL	R11
    04373 E08C      LDI	R24,0xC
    04374 E094      LDI	R25,4
    04375 01F5      MOVW	R30,R10
    04376 0FE8      ADD	R30,R24
    04377 1FF9      ADC	R31,R25
    04378 8120      LD	R18,Z
    04379 8131      LDD	R19,Z+1
    0437A E100      LDI	R16,0x10
    0437B E010      LDI	R17,0
    0437C 940E 4674 CALL	empy16s
    0437E ED85      LDI	R24,0xD5
    0437F E091      LDI	R25,1
    04380 0118      MOVW	R2,R16
    04381 0E28      ADD	R2,R24
    04382 1E39      ADC	R3,R25
    04383 E082      LDI	R24,2
    04384 E094      LDI	R25,4
    04385 01F5      MOVW	R30,R10
    04386 0FE8      ADD	R30,R24
    04387 1FF9      ADC	R31,R25
    04388 8040      LD	R4,Z
    04389 8051      LDD	R5,Z+1
    0438A 0C44      LSL	R4
    0438B 1C55      ROL	R5
    0438C 01F2      MOVW	R30,R4
    0438D 0DE2      ADD	R30,R2
    0438E 1DF3      ADC	R31,R3
    0438F 8020      LD	R2,Z
    04390 8031      LDD	R3,Z+1
    04391 2022      TST	R2
    04392 F449      BNE	0x439C
    04393 2033      TST	R3
    04394 F439      BNE	0x439C
    04395 2422      CLR	R2
    04396 2433      CLR	R3
    04397 9230 02DA STS	destroy+3,R3
    04399 9220 02D9 STS	destroy+2,R2
    0439B C070      RJMP	0x440C
(1337)                                 else if(destroy[2]==-1&&!counter_detect[cship3x[n]][cship3y[n]]) destroy[2]=0;
    0439C 9180 02DB LDS	R24,destroy+4
    0439E 9190 02DC LDS	R25,destroy+5
    043A0 3F8F      CPI	R24,0xFF
    043A1 EFEF      LDI	R30,0xFF
    043A2 079E      CPC	R25,R30
    043A3 F009      BEQ	0x43A5
    043A4 C030      RJMP	0x43D5
    043A5 90A0 03D1 LDS	R10,n
    043A7 24BB      CLR	R11
    043A8 FCA7      SBRC	R10,7
    043A9 94B0      COM	R11
    043AA 0CAA      LSL	R10
    043AB 1CBB      ROL	R11
    043AC EF8E      LDI	R24,0xFE
    043AD E093      LDI	R25,3
    043AE 01F5      MOVW	R30,R10
    043AF 0FE8      ADD	R30,R24
    043B0 1FF9      ADC	R31,R25
    043B1 8120      LD	R18,Z
    043B2 8131      LDD	R19,Z+1
    043B3 E100      LDI	R16,0x10
    043B4 E010      LDI	R17,0
    043B5 940E 4674 CALL	empy16s
    043B7 ED85      LDI	R24,0xD5
    043B8 E091      LDI	R25,1
    043B9 0118      MOVW	R2,R16
    043BA 0E28      ADD	R2,R24
    043BB 1E39      ADC	R3,R25
    043BC EF8A      LDI	R24,0xFA
    043BD E093      LDI	R25,3
    043BE 01F5      MOVW	R30,R10
    043BF 0FE8      ADD	R30,R24
    043C0 1FF9      ADC	R31,R25
    043C1 8040      LD	R4,Z
    043C2 8051      LDD	R5,Z+1
    043C3 0C44      LSL	R4
    043C4 1C55      ROL	R5
    043C5 01F2      MOVW	R30,R4
    043C6 0DE2      ADD	R30,R2
    043C7 1DF3      ADC	R31,R3
    043C8 8020      LD	R2,Z
    043C9 8031      LDD	R3,Z+1
    043CA 2022      TST	R2
    043CB F449      BNE	0x43D5
    043CC 2033      TST	R3
    043CD F439      BNE	0x43D5
    043CE 2422      CLR	R2
    043CF 2433      CLR	R3
    043D0 9230 02DC STS	destroy+5,R3
    043D2 9220 02DB STS	destroy+4,R2
    043D4 C037      RJMP	0x440C
(1338)                                 else if(destroy[3]==-1&&!counter_detect[cship4x[n]][cship4y[n]]) destroy[3]=0;
    043D5 9180 02DD LDS	R24,destroy+6
    043D7 9190 02DE LDS	R25,destroy+7
    043D9 3F8F      CPI	R24,0xFF
    043DA EFEF      LDI	R30,0xFF
    043DB 079E      CPC	R25,R30
    043DC F579      BNE	0x440C
    043DD 90A0 03D1 LDS	R10,n
    043DF 24BB      CLR	R11
    043E0 FCA7      SBRC	R10,7
    043E1 94B0      COM	R11
    043E2 0CAA      LSL	R10
    043E3 1CBB      ROL	R11
    043E4 EF82      LDI	R24,0xF2
    043E5 E093      LDI	R25,3
    043E6 01F5      MOVW	R30,R10
    043E7 0FE8      ADD	R30,R24
    043E8 1FF9      ADC	R31,R25
    043E9 8120      LD	R18,Z
    043EA 8131      LDD	R19,Z+1
    043EB E100      LDI	R16,0x10
    043EC E010      LDI	R17,0
    043ED 940E 4674 CALL	empy16s
    043EF ED85      LDI	R24,0xD5
    043F0 E091      LDI	R25,1
    043F1 0118      MOVW	R2,R16
    043F2 0E28      ADD	R2,R24
    043F3 1E39      ADC	R3,R25
    043F4 EE8A      LDI	R24,0xEA
    043F5 E093      LDI	R25,3
    043F6 01F5      MOVW	R30,R10
    043F7 0FE8      ADD	R30,R24
    043F8 1FF9      ADC	R31,R25
    043F9 8040      LD	R4,Z
    043FA 8051      LDD	R5,Z+1
    043FB 0C44      LSL	R4
    043FC 1C55      ROL	R5
    043FD 01F2      MOVW	R30,R4
    043FE 0DE2      ADD	R30,R2
    043FF 1DF3      ADC	R31,R3
    04400 8020      LD	R2,Z
    04401 8031      LDD	R3,Z+1
    04402 2022      TST	R2
    04403 F441      BNE	0x440C
    04404 2033      TST	R3
    04405 F431      BNE	0x440C
    04406 2422      CLR	R2
    04407 2433      CLR	R3
    04408 9230 02DE STS	destroy+7,R3
    0440A 9220 02DD STS	destroy+6,R2
(1339)                             }
    0440C 9180 03D1 LDS	R24,n
    0440E 5F8F      SUBI	R24,0xFF
    0440F 9380 03D1 STS	n,R24
    04411 9180 03D1 LDS	R24,n
    04413 3085      CPI	R24,5
    04414 F40C      BGE	0x4416
    04415 CF14      RJMP	0x432A
(1340)                             for(n=0;n<4;n++){
    04416 2422      CLR	R2
    04417 9220 03D1 STS	n,R2
    04419 C04D      RJMP	0x4467
(1341)                                 if(destroy[n]==-1){
    0441A ED87      LDI	R24,0xD7
    0441B E092      LDI	R25,2
    0441C 91E0 03D1 LDS	R30,n
    0441E 27FF      CLR	R31
    0441F FDE7      SBRC	R30,7
    04420 95F0      COM	R31
    04421 0FEE      LSL	R30
    04422 1FFF      ROL	R31
    04423 0FE8      ADD	R30,R24
    04424 1FF9      ADC	R31,R25
    04425 8180      LD	R24,Z
    04426 8191      LDD	R25,Z+1
    04427 3F8F      CPI	R24,0xFF
    04428 EFEF      LDI	R30,0xFF
    04429 079E      CPC	R25,R30
    0442A F4C9      BNE	0x4444
(1342)                                     ship_cnt++, destroy[n]=1, led_score();
    0442B 9180 02DF LDS	R24,ship_cnt
    0442D 5F8F      SUBI	R24,0xFF
    0442E 9380 02DF STS	ship_cnt,R24
    04430 ED87      LDI	R24,0xD7
    04431 E092      LDI	R25,2
    04432 91E0 03D1 LDS	R30,n
    04434 27FF      CLR	R31
    04435 FDE7      SBRC	R30,7
    04436 95F0      COM	R31
    04437 0FEE      LSL	R30
    04438 1FFF      ROL	R31
    04439 0FE8      ADD	R30,R24
    0443A 1FF9      ADC	R31,R25
    0443B E081      LDI	R24,1
    0443C E090      LDI	R25,0
    0443D 8391      STD	Z+1,R25
    0443E 8380      ST	Z,R24
    0443F 940E 22B5 CALL	_led_score
(1343)                                     vibrating();
    04441 940E 1533 CALL	_vibrating
(1344)                                 }
    04443 C01E      RJMP	0x4462
(1345)                                 else if(!destroy[n]) destroy[n]=-1;
    04444 ED87      LDI	R24,0xD7
    04445 E092      LDI	R25,2
    04446 91E0 03D1 LDS	R30,n
    04448 27FF      CLR	R31
    04449 FDE7      SBRC	R30,7
    0444A 95F0      COM	R31
    0444B 0FEE      LSL	R30
    0444C 1FFF      ROL	R31
    0444D 0FE8      ADD	R30,R24
    0444E 1FF9      ADC	R31,R25
    0444F 8020      LD	R2,Z
    04450 8031      LDD	R3,Z+1
    04451 2022      TST	R2
    04452 F479      BNE	0x4462
    04453 2033      TST	R3
    04454 F469      BNE	0x4462
    04455 91E0 03D1 LDS	R30,n
    04457 27FF      CLR	R31
    04458 FDE7      SBRC	R30,7
    04459 95F0      COM	R31
    0445A 0FEE      LSL	R30
    0445B 1FFF      ROL	R31
    0445C 0FE8      ADD	R30,R24
    0445D 1FF9      ADC	R31,R25
    0445E EF8F      LDI	R24,0xFF
    0445F EF9F      LDI	R25,0xFF
    04460 8391      STD	Z+1,R25
    04461 8380      ST	Z,R24
(1346)                             }
    04462 9180 03D1 LDS	R24,n
    04464 5F8F      SUBI	R24,0xFF
    04465 9380 03D1 STS	n,R24
    04467 9180 03D1 LDS	R24,n
    04469 3084      CPI	R24,4
    0446A F40C      BGE	0x446C
    0446B CFAE      RJMP	0x441A
(1347)                         }
    0446C C04C      RJMP	0x44B9
(1348)                         else if(counter_set[i][j]==5){
    0446D 9120 0151 LDS	R18,i
    0446F 9130 0152 LDS	R19,i+1
    04471 E100      LDI	R16,0x10
    04472 E010      LDI	R17,0
    04473 940E 4674 CALL	empy16s
    04475 E585      LDI	R24,0x55
    04476 E091      LDI	R25,1
    04477 0118      MOVW	R2,R16
    04478 0E28      ADD	R2,R24
    04479 1E39      ADC	R3,R25
    0447A 91E0 0153 LDS	R30,j
    0447C 91F0 0154 LDS	R31,j+1
    0447E 0FEE      LSL	R30
    0447F 1FFF      ROL	R31
    04480 0DE2      ADD	R30,R2
    04481 1DF3      ADC	R31,R3
    04482 8180      LD	R24,Z
    04483 8191      LDD	R25,Z+1
    04484 3085      CPI	R24,5
    04485 E0E0      LDI	R30,0
    04486 079E      CPC	R25,R30
    04487 F451      BNE	0x4492
(1349)                             item_cnt++, led_score();
    04488 9180 02E0 LDS	R24,item_cnt
    0448A 5F8F      SUBI	R24,0xFF
    0448B 9380 02E0 STS	item_cnt,R24
    0448D 940E 22B5 CALL	_led_score
(1350)                             vibrating();
    0448F 940E 1533 CALL	_vibrating
(1351)                         }
    04491 C027      RJMP	0x44B9
(1352)                         else if(counter_set[i][j]==6){
    04492 9120 0151 LDS	R18,i
    04494 9130 0152 LDS	R19,i+1
    04496 E100      LDI	R16,0x10
    04497 E010      LDI	R17,0
    04498 940E 4674 CALL	empy16s
    0449A E585      LDI	R24,0x55
    0449B E091      LDI	R25,1
    0449C 0118      MOVW	R2,R16
    0449D 0E28      ADD	R2,R24
    0449E 1E39      ADC	R3,R25
    0449F 91E0 0153 LDS	R30,j
    044A1 91F0 0154 LDS	R31,j+1
    044A3 0FEE      LSL	R30
    044A4 1FFF      ROL	R31
    044A5 0DE2      ADD	R30,R2
    044A6 1DF3      ADC	R31,R3
    044A7 8180      LD	R24,Z
    044A8 8191      LDD	R25,Z+1
    044A9 3086      CPI	R24,6
    044AA E0E0      LDI	R30,0
    044AB 079E      CPC	R25,R30
    044AC F461      BNE	0x44B9
(1353)                             mine_cnt++, led_score();
    044AD 9180 02E1 LDS	R24,mine_cnt
    044AF 5F8F      SUBI	R24,0xFF
    044B0 9380 02E1 STS	mine_cnt,R24
    044B2 940E 22B5 CALL	_led_score
(1354)                             vibrating();
    044B4 940E 1533 CALL	_vibrating
(1355)                         }
(1356)                     }
    044B6 C002      RJMP	0x44B9
(1357)     //                  if(!mode) counter_detect[i][j] data transmit;
(1358)     //                  else
(1359)                     else vibrating();
    044B7 940E 1533 CALL	_vibrating
(1360)                     register_timer();
    044B9 940E 22E5 CALL	_register_timer
(1361)                 }
(1362)     //      flag=1 transmit
(1363)            // i=0, j=0;
(1364)     //      if(ship_cnt==4) win; break; tx=lose;
(1365)             }
    044BB E080      LDI	R24,0
    044BC 9020 02D5 LDS	R2,flag
    044BE 1582      CP	R24,R2
    044BF F408      BCC	0x44C1
    044C0 CE16      RJMP	0x42D7
(1366)     //        whlie(flag==0){
(1367)     //            if(mode==0){
(1368) 
(1369)     //            }
(1370)     //            else
(1371)     //        }
(1372)         }
    044C1 CE0A      RJMP	0x42CC
(1373)         USART0_Transmit('t');
(1374)         while(1){//counter turn
(1375)             switch(getchar()){
    044C2 940E 254A CALL	_getchar$device_specific$|_getchar
    044C4 0168      MOVW	R12,R16
    044C5 01A6      MOVW	R20,R12
    044C6 360D      CPI	R16,0x6D
    044C7 E0E0      LDI	R30,0
    044C8 071E      CPC	R17,R30
    044C9 F099      BEQ	0x44DD
    044CA E68D      LDI	R24,0x6D
    044CB E090      LDI	R25,0
    044CC 1780      CP	R24,R16
    044CD 0791      CPC	R25,R17
    044CE F02C      BLT	0x44D4
    044CF 3643      CPI	R20,0x63
    044D0 E0E0      LDI	R30,0
    044D1 075E      CPC	R21,R30
    044D2 F0A1      BEQ	0x44E7
    044D3 C0D7      RJMP	0x45AB
    044D4 3743      CPI	R20,0x73
    044D5 E0E0      LDI	R30,0
    044D6 075E      CPC	R21,R30
    044D7 F101      BEQ	0x44F8
    044D8 3744      CPI	R20,0x74
    044D9 E0E0      LDI	R30,0
    044DA 075E      CPC	R21,R30
    044DB F029      BEQ	0x44E1
    044DC C0CE      RJMP	0x45AB
(1376)             case 'm':
(1377)                 mode=1;
    044DD E081      LDI	R24,1
    044DE 9380 02E6 STS	mode,R24
(1378)                 break;
    044E0 C0CA      RJMP	0x45AB
(1379)             case 't':
(1380)                 flag++;
    044E1 9180 02D5 LDS	R24,flag
    044E3 5F8F      SUBI	R24,0xFF
    044E4 9380 02D5 STS	flag,R24
(1381)                 break;
    044E6 C0C4      RJMP	0x45AB
(1382)             case 'c':
(1383)                 GLCD_Clear();
    044E7 940E 04C4 CALL	_GLCD_Clear
(1384)                 GLCD_TextGoTo(7,7);
    044E9 E027      LDI	R18,7
    044EA E007      LDI	R16,7
    044EB 940E 0405 CALL	_GLCD_TextGoTo
(1385)                 GLCD_WriteString("YOU LOSE haha");
    044ED E00B      LDI	R16,0xB
    044EE E013      LDI	R17,3
    044EF 940E 03F6 CALL	_GLCD_WriteString
(1386)                 GLCD_cursor_off(0,0);
    044F1 2722      CLR	R18
    044F2 2733      CLR	R19
    044F3 2700      CLR	R16
    044F4 2711      CLR	R17
    044F5 940E 139F CALL	_GLCD_cursor_off
(1387)                 break;
    044F7 C0B3      RJMP	0x45AB
(1388)             case 's':
(1389)                 cnt_x=getchar();
    044F8 940E 254A CALL	_getchar$device_specific$|_getchar
    044FA 8319      STD	Y+1,R17
    044FB 8308      ST	Y,R16
    044FC 0108      MOVW	R0,R16
    044FD 9210 03C1 STS	cnt_x+1,R1
    044FF 9200 03C0 STS	cnt_x,R0
(1390)                 cnt_y=getchar();
    04501 940E 254A CALL	_getchar$device_specific$|_getchar
    04503 0178      MOVW	R14,R16
    04504 92F0 03BF STS	cnt_y+1,R15
    04506 92E0 03BE STS	cnt_y,R14
(1391)                 my_detect[cnt_x][cnt_y]=1;
    04508 9120 03C0 LDS	R18,cnt_x
    0450A 9130 03C1 LDS	R19,cnt_x+1
    0450C E100      LDI	R16,0x10
    0450D E010      LDI	R17,0
    0450E 940E 4674 CALL	empy16s
    04510 E585      LDI	R24,0x55
    04511 E092      LDI	R25,2
    04512 0118      MOVW	R2,R16
    04513 0E28      ADD	R2,R24
    04514 1E39      ADC	R3,R25
    04515 91E0 03BE LDS	R30,cnt_y
    04517 91F0 03BF LDS	R31,cnt_y+1
    04519 0FEE      LSL	R30
    0451A 1FFF      ROL	R31
    0451B 0DE2      ADD	R30,R2
    0451C 1DF3      ADC	R31,R3
    0451D E081      LDI	R24,1
    0451E E090      LDI	R25,0
    0451F 8391      STD	Z+1,R25
    04520 8380      ST	Z,R24
(1392)                 if(game_set[cnt_x][cnt_y]==5) rGLCD_fail(cnt_x,cnt_y);
    04521 9120 03C0 LDS	R18,cnt_x
    04523 9130 03C1 LDS	R19,cnt_x+1
    04525 E100      LDI	R16,0x10
    04526 E010      LDI	R17,0
    04527 940E 4674 CALL	empy16s
    04529 E587      LDI	R24,0x57
    0452A E094      LDI	R25,4
    0452B 0118      MOVW	R2,R16
    0452C 0E28      ADD	R2,R24
    0452D 1E39      ADC	R3,R25
    0452E 91E0 03BE LDS	R30,cnt_y
    04530 91F0 03BF LDS	R31,cnt_y+1
    04532 0FEE      LSL	R30
    04533 1FFF      ROL	R31
    04534 0DE2      ADD	R30,R2
    04535 1DF3      ADC	R31,R3
    04536 8180      LD	R24,Z
    04537 8191      LDD	R25,Z+1
    04538 3085      CPI	R24,5
    04539 E0E0      LDI	R30,0
    0453A 079E      CPC	R25,R30
    0453B F459      BNE	0x4547
    0453C 9120 03BE LDS	R18,cnt_y
    0453E 9130 03BF LDS	R19,cnt_y+1
    04540 9100 03C0 LDS	R16,cnt_x
    04542 9110 03C1 LDS	R17,cnt_x+1
    04544 940E 09A9 CALL	_rGLCD_fail
    04546 C064      RJMP	0x45AB
(1393)                 else if(game_set[cnt_x][cnt_y]>=1&&game_set[cnt_x][cnt_y]<=4||game_set[cnt_x][cnt_y]==7) {
    04547 9120 03C0 LDS	R18,cnt_x
    04549 9130 03C1 LDS	R19,cnt_x+1
    0454B E100      LDI	R16,0x10
    0454C E010      LDI	R17,0
    0454D 940E 4674 CALL	empy16s
    0454F E587      LDI	R24,0x57
    04550 E094      LDI	R25,4
    04551 0118      MOVW	R2,R16
    04552 0E28      ADD	R2,R24
    04553 1E39      ADC	R3,R25
    04554 91E0 03BE LDS	R30,cnt_y
    04556 91F0 03BF LDS	R31,cnt_y+1
    04558 0FEE      LSL	R30
    04559 1FFF      ROL	R31
    0455A 0DE2      ADD	R30,R2
    0455B 1DF3      ADC	R31,R3
    0455C 8160      LD	R22,Z
    0455D 8171      LDD	R23,Z+1
    0455E 3061      CPI	R22,1
    0455F E0E0      LDI	R30,0
    04560 077E      CPC	R23,R30
    04561 F02C      BLT	0x4567
    04562 E084      LDI	R24,4
    04563 E090      LDI	R25,0
    04564 1786      CP	R24,R22
    04565 0797      CPC	R25,R23
    04566 F4DC      BGE	0x4582
    04567 9120 03C0 LDS	R18,cnt_x
    04569 9130 03C1 LDS	R19,cnt_x+1
    0456B E100      LDI	R16,0x10
    0456C E010      LDI	R17,0
    0456D 940E 4674 CALL	empy16s
    0456F E587      LDI	R24,0x57
    04570 E094      LDI	R25,4
    04571 0118      MOVW	R2,R16
    04572 0E28      ADD	R2,R24
    04573 1E39      ADC	R3,R25
    04574 91E0 03BE LDS	R30,cnt_y
    04576 91F0 03BF LDS	R31,cnt_y+1
    04578 0FEE      LSL	R30
    04579 1FFF      ROL	R31
    0457A 0DE2      ADD	R30,R2
    0457B 1DF3      ADC	R31,R3
    0457C 8180      LD	R24,Z
    0457D 8191      LDD	R25,Z+1
    0457E 3087      CPI	R24,7
    0457F E0E0      LDI	R30,0
    04580 079E      CPC	R25,R30
    04581 F4A9      BNE	0x4597
(1394)                     rGLCD_cursor_off(cnt_x,cnt_y);
    04582 9120 03BE LDS	R18,cnt_y
    04584 9130 03BF LDS	R19,cnt_y+1
    04586 9100 03C0 LDS	R16,cnt_x
    04588 9110 03C1 LDS	R17,cnt_x+1
    0458A 940E 0749 CALL	_rGLCD_cursor_off
(1395)                     rGLCD_success(cnt_x,cnt_y);
    0458C 9120 03BE LDS	R18,cnt_y
    0458E 9130 03BF LDS	R19,cnt_y+1
    04590 9100 03C0 LDS	R16,cnt_x
    04592 9110 03C1 LDS	R17,cnt_x+1
    04594 940E 13D4 CALL	_rGLCD_success
(1396)                 }
    04596 C014      RJMP	0x45AB
(1397)                 else {
(1398)                     rGLCD_cursor_off(cnt_x,cnt_y);
    04597 9120 03BE LDS	R18,cnt_y
    04599 9130 03BF LDS	R19,cnt_y+1
    0459B 9100 03C0 LDS	R16,cnt_x
    0459D 9110 03C1 LDS	R17,cnt_x+1
    0459F 940E 0749 CALL	_rGLCD_cursor_off
(1399)                     rGLCD_fail(cnt_x,cnt_y);
    045A1 9120 03BE LDS	R18,cnt_y
    045A3 9130 03BF LDS	R19,cnt_y+1
    045A5 9100 03C0 LDS	R16,cnt_x
    045A7 9110 03C1 LDS	R17,cnt_x+1
    045A9 940E 09A9 CALL	_rGLCD_fail
(1400)                 }
(1401)                 break;
(1402)             }
(1403)             if(flag==1) break;
    045AB 9180 02D5 LDS	R24,flag
    045AD 3081      CPI	R24,1
    045AE F409      BNE	0x45B0
    045AF C001      RJMP	0x45B1
(1404)         }
    045B0 CF11      RJMP	0x44C2
(1405)     }
    045B1 9622      ADIW	R28,2
(1406) }
    045B2 9508      RET
push_arg4:
    045B3 933A      ST	-Y,R19
    045B4 932A      ST	-Y,R18
push_arg2:
    045B5 931A      ST	-Y,R17
    045B6 930A      ST	-Y,R16
    045B7 9508      RET
mod16s:
    045B8 9468      BSET	6
    045B9 92DA      ST	-Y,R13
    045BA 2ED1      MOV	R13,R17
    045BB C004      RJMP	0x45C0
div16s:
    045BC 94E8      BCLR	6
    045BD 92DA      ST	-Y,R13
    045BE 2ED1      MOV	R13,R17
    045BF 26D3      EOR	R13,R19
    045C0 FF17      SBRS	R17,7
    045C1 C004      RJMP	0x45C6
    045C2 9510      COM	R17
    045C3 9500      COM	R16
    045C4 5F0F      SUBI	R16,0xFF
    045C5 4F1F      SBCI	R17,0xFF
    045C6 FF37      SBRS	R19,7
    045C7 C004      RJMP	0x45CC
    045C8 9530      COM	R19
    045C9 9520      COM	R18
    045CA 5F2F      SUBI	R18,0xFF
    045CB 4F3F      SBCI	R19,0xFF
    045CC 940E 45D9 CALL	xdiv16u
    045CE FED7      SBRS	R13,7
    045CF C004      RJMP	0x45D4
    045D0 9510      COM	R17
    045D1 9500      COM	R16
    045D2 5F0F      SUBI	R16,0xFF
    045D3 4F1F      SBCI	R17,0xFF
    045D4 90D9      LD	R13,Y+
    045D5 9508      RET
mod16u:
    045D6 9468      BSET	6
    045D7 C001      RJMP	xdiv16u
div16u:
    045D8 94E8      BCLR	6
xdiv16u:
    045D9 92EA      ST	-Y,R14
    045DA 92FA      ST	-Y,R15
    045DB 938A      ST	-Y,R24
    045DC 24EE      CLR	R14
    045DD 24FF      CLR	R15
    045DE E180      LDI	R24,0x10
    045DF 0F00      LSL	R16
    045E0 1F11      ROL	R17
    045E1 1CEE      ROL	R14
    045E2 1CFF      ROL	R15
    045E3 16E2      CP	R14,R18
    045E4 06F3      CPC	R15,R19
    045E5 F018      BCS	0x45E9
    045E6 1AE2      SUB	R14,R18
    045E7 0AF3      SBC	R15,R19
    045E8 9503      INC	R16
    045E9 958A      DEC	R24
    045EA F7A1      BNE	0x45DF
    045EB F416      BRTC	0x45EE
    045EC 2D0E      MOV	R16,R14
    045ED 2D1F      MOV	R17,R15
    045EE 9189      LD	R24,Y+
    045EF 90F9      LD	R15,Y+
    045F0 90E9      LD	R14,Y+
    045F1 9508      RET
div32u:
    045F2 94E8      BCLR	6
    045F3 C001      RJMP	0x45F5
mod32u:
    045F4 9468      BSET	6
    045F5 D030      RCALL	long_div_prolog
    045F6 24CC      CLR	R12
    045F7 C009      RJMP	0x4601
div32s:
    045F8 94E8      BCLR	6
    045F9 C001      RJMP	0x45FB
mod32s:
    045FA 9468      BSET	6
    045FB D02A      RCALL	long_div_prolog
    045FC FD37      SBRC	R19,7
    045FD 940E 4715 CALL	neg32
    045FF FDB7      SBRC	R27,7
    04600 D052      RCALL	neg_R24_R27
    04601 2477      CLR	R7
    04602 2488      CLR	R8
    04603 2499      CLR	R9
    04604 24AA      CLR	R10
    04605 24BB      CLR	R11
    04606 D042      RCALL	tst_R16_R19
    04607 F0C1      BEQ	0x4620
    04608 D045      RCALL	tst_R24_R27
    04609 F0B1      BEQ	0x4620
    0460A E2E8      LDI	R30,0x28
    0460B 0F00      LSL	R16
    0460C 1F11      ROL	R17
    0460D 1F22      ROL	R18
    0460E 1F33      ROL	R19
    0460F 1C77      ROL	R7
    04610 1C88      ROL	R8
    04611 1C99      ROL	R9
    04612 1CAA      ROL	R10
    04613 1CBB      ROL	R11
    04614 1688      CP	R8,R24
    04615 0699      CPC	R9,R25
    04616 06AA      CPC	R10,R26
    04617 06BB      CPC	R11,R27
    04618 F028      BCS	0x461E
    04619 1A88      SUB	R8,R24
    0461A 0A99      SBC	R9,R25
    0461B 0AAA      SBC	R10,R26
    0461C 0ABB      SBC	R11,R27
    0461D 9503      INC	R16
    0461E 95EA      DEC	R30
    0461F F759      BNE	0x460B
    04620 F426      BRTC	0x4625
    04621 2D08      MOV	R16,R8
    04622 2D19      MOV	R17,R9
    04623 2D2A      MOV	R18,R10
    04624 2D3B      MOV	R19,R11
    04625 C013      RJMP	long_div_epilog
long_div_prolog:
    04626 927A      ST	-Y,R7
    04627 928A      ST	-Y,R8
    04628 929A      ST	-Y,R9
    04629 92AA      ST	-Y,R10
    0462A 92BA      ST	-Y,R11
    0462B 92CA      ST	-Y,R12
    0462C 93EA      ST	-Y,R30
    0462D 938A      ST	-Y,R24
    0462E 939A      ST	-Y,R25
    0462F 93AA      ST	-Y,R26
    04630 93BA      ST	-Y,R27
    04631 858B      LDD	R24,Y+11
    04632 859C      LDD	R25,Y+12
    04633 85AD      LDD	R26,Y+13
    04634 85BE      LDD	R27,Y+14
    04635 2EC3      MOV	R12,R19
    04636 F00E      BRTS	0x4638
    04637 26CB      EOR	R12,R27
    04638 9508      RET
long_div_epilog:
    04639 FCC7      SBRC	R12,7
    0463A 940E 4715 CALL	neg32
    0463C 91B9      LD	R27,Y+
    0463D 91A9      LD	R26,Y+
    0463E 9199      LD	R25,Y+
    0463F 9189      LD	R24,Y+
    04640 91E9      LD	R30,Y+
    04641 90C9      LD	R12,Y+
    04642 90B9      LD	R11,Y+
    04643 90A9      LD	R10,Y+
    04644 9099      LD	R9,Y+
    04645 9089      LD	R8,Y+
    04646 9079      LD	R7,Y+
    04647 9624      ADIW	R28,4
    04648 9508      RET
tst_R16_R19:
    04649 2FE0      MOV	R30,R16
    0464A 2BE1      OR	R30,R17
    0464B 2BE2      OR	R30,R18
    0464C 2BE3      OR	R30,R19
    0464D 9508      RET
tst_R24_R27:
    0464E 2FE8      MOV	R30,R24
    0464F 2BE9      OR	R30,R25
    04650 2BEA      OR	R30,R26
    04651 2BEB      OR	R30,R27
    04652 9508      RET
neg_R24_R27:
    04653 9580      COM	R24
    04654 9590      COM	R25
    04655 95A0      COM	R26
    04656 95B0      COM	R27
    04657 5F8F      SUBI	R24,0xFF
    04658 4F9F      SBCI	R25,0xFF
    04659 4FAF      SBCI	R26,0xFF
    0465A 4FBF      SBCI	R27,0xFF
    0465B 9508      RET
mod8u:
    0465C 9468      BSET	6
    0465D C001      RJMP	xdiv8u
div8u:
    0465E 94E8      BCLR	6
xdiv8u:
    0465F 932A      ST	-Y,R18
    04660 92FA      ST	-Y,R15
    04661 92EA      ST	-Y,R14
    04662 24FF      CLR	R15
    04663 24EE      CLR	R14
    04664 E120      LDI	R18,0x10
    04665 0F00      LSL	R16
    04666 1CFF      ROL	R15
    04667 1CEE      ROL	R14
    04668 16E1      CP	R14,R17
    04669 F010      BCS	0x466C
    0466A 1AE1      SUB	R14,R17
    0466B 9503      INC	R16
    0466C 952A      DEC	R18
    0466D F7B9      BNE	0x4665
    0466E F40E      BRTC	0x4670
    0466F 2D0E      MOV	R16,R14
    04670 90E9      LD	R14,Y+
    04671 90F9      LD	R15,Y+
    04672 9129      LD	R18,Y+
    04673 9508      RET
empy16s:
    04674 920A      ST	-Y,R0
    04675 921A      ST	-Y,R1
    04676 938A      ST	-Y,R24
    04677 939A      ST	-Y,R25
    04678 9F02      MUL	R16,R18
    04679 01C0      MOVW	R24,R0
    0467A 9F12      MUL	R17,R18
    0467B 0D90      ADD	R25,R0
    0467C 9F03      MUL	R16,R19
    0467D 0D90      ADD	R25,R0
    0467E 018C      MOVW	R16,R24
    0467F 9199      LD	R25,Y+
    04680 9189      LD	R24,Y+
    04681 9019      LD	R1,Y+
    04682 9009      LD	R0,Y+
    04683 9508      RET
empy32s|empy32u:
    04684 940E 471E CALL	long_prolog
    04686 927A      ST	-Y,R7
    04687 940E 4737 CALL	tstzero1
    04689 F159      BEQ	0x46B5
    0468A 2477      CLR	R7
    0468B 940E 473D CALL	tstzero2
    0468D F419      BNE	0x4691
    0468E 018C      MOVW	R16,R24
    0468F 019D      MOVW	R18,R26
    04690 C024      RJMP	0x46B5
    04691 920A      ST	-Y,R0
    04692 921A      ST	-Y,R1
    04693 9F08      MUL	R16,R24
    04694 2CB0      MOV	R11,R0
    04695 2CA1      MOV	R10,R1
    04696 9F28      MUL	R18,R24
    04697 2C90      MOV	R9,R0
    04698 2C81      MOV	R8,R1
    04699 9F18      MUL	R17,R24
    0469A 0CA0      ADD	R10,R0
    0469B 1C91      ADC	R9,R1
    0469C 1C87      ADC	R8,R7
    0469D 9F09      MUL	R16,R25
    0469E 0CA0      ADD	R10,R0
    0469F 1C91      ADC	R9,R1
    046A0 1C87      ADC	R8,R7
    046A1 9F19      MUL	R17,R25
    046A2 0C90      ADD	R9,R0
    046A3 1C81      ADC	R8,R1
    046A4 9F0A      MUL	R16,R26
    046A5 0C90      ADD	R9,R0
    046A6 1C81      ADC	R8,R1
    046A7 9F38      MUL	R19,R24
    046A8 0C80      ADD	R8,R0
    046A9 9F29      MUL	R18,R25
    046AA 0C80      ADD	R8,R0
    046AB 9F1A      MUL	R17,R26
    046AC 0C80      ADD	R8,R0
    046AD 9F0B      MUL	R16,R27
    046AE 0C80      ADD	R8,R0
    046AF 9019      LD	R1,Y+
    046B0 9009      LD	R0,Y+
    046B1 2D0B      MOV	R16,R11
    046B2 2D1A      MOV	R17,R10
    046B3 2D29      MOV	R18,R9
    046B4 2D38      MOV	R19,R8
    046B5 9079      LD	R7,Y+
    046B6 940C 472C JMP	long_epilog
pop_xgset003C:
    046B8 90A9      LD	R10,Y+
    046B9 90B9      LD	R11,Y+
    046BA 90C9      LD	R12,Y+
    046BB 90D9      LD	R13,Y+
    046BC 9508      RET
pop_xgsetF0FC:
    046BD 90A9      LD	R10,Y+
    046BE 90B9      LD	R11,Y+
    046BF 90C9      LD	R12,Y+
    046C0 90D9      LD	R13,Y+
    046C1 90E9      LD	R14,Y+
    046C2 90F9      LD	R15,Y+
    046C3 9149      LD	R20,Y+
    046C4 9159      LD	R21,Y+
    046C5 9169      LD	R22,Y+
    046C6 9179      LD	R23,Y+
    046C7 9508      RET
push_xgsetF0FC:
    046C8 937A      ST	-Y,R23
    046C9 936A      ST	-Y,R22
push_xgset30FC:
    046CA 935A      ST	-Y,R21
    046CB 934A      ST	-Y,R20
push_xgset00FC:
    046CC 92FA      ST	-Y,R15
    046CD 92EA      ST	-Y,R14
push_xgset003C:
    046CE 92DA      ST	-Y,R13
    046CF 92CA      ST	-Y,R12
    046D0 92BA      ST	-Y,R11
    046D1 92AA      ST	-Y,R10
    046D2 9508      RET
push_xgset300C:
    046D3 935A      ST	-Y,R21
    046D4 934A      ST	-Y,R20
    046D5 92BA      ST	-Y,R11
    046D6 92AA      ST	-Y,R10
    046D7 9508      RET
pop_xgset300C:
    046D8 90A9      LD	R10,Y+
    046D9 90B9      LD	R11,Y+
    046DA 9149      LD	R20,Y+
    046DB 9159      LD	R21,Y+
    046DC 9508      RET
push_xgsetF000:
    046DD 937A      ST	-Y,R23
    046DE 936A      ST	-Y,R22
    046DF 935A      ST	-Y,R21
    046E0 934A      ST	-Y,R20
    046E1 9508      RET
pop_xgsetF000:
    046E2 9149      LD	R20,Y+
    046E3 9159      LD	R21,Y+
    046E4 9169      LD	R22,Y+
    046E5 9179      LD	R23,Y+
    046E6 9508      RET
push_xgsetF00C:
    046E7 937A      ST	-Y,R23
    046E8 936A      ST	-Y,R22
    046E9 935A      ST	-Y,R21
    046EA 934A      ST	-Y,R20
    046EB 92BA      ST	-Y,R11
    046EC 92AA      ST	-Y,R10
    046ED 9508      RET
pop_xgsetF00C:
    046EE 90A9      LD	R10,Y+
    046EF 90B9      LD	R11,Y+
    046F0 9149      LD	R20,Y+
    046F1 9159      LD	R21,Y+
    046F2 9169      LD	R22,Y+
    046F3 9179      LD	R23,Y+
    046F4 9508      RET
push_xgset303C:
    046F5 935A      ST	-Y,R21
    046F6 934A      ST	-Y,R20
    046F7 92DA      ST	-Y,R13
    046F8 92CA      ST	-Y,R12
    046F9 92BA      ST	-Y,R11
    046FA 92AA      ST	-Y,R10
    046FB 9508      RET
pop_xgset303C:
    046FC 90A9      LD	R10,Y+
    046FD 90B9      LD	R11,Y+
    046FE 90C9      LD	R12,Y+
    046FF 90D9      LD	R13,Y+
    04700 9149      LD	R20,Y+
    04701 9159      LD	R21,Y+
    04702 9508      RET
push_xgsetF03C:
    04703 937A      ST	-Y,R23
    04704 936A      ST	-Y,R22
    04705 935A      ST	-Y,R21
    04706 934A      ST	-Y,R20
    04707 92DA      ST	-Y,R13
    04708 92CA      ST	-Y,R12
    04709 92BA      ST	-Y,R11
    0470A 92AA      ST	-Y,R10
    0470B 9508      RET
pop_xgsetF03C:
    0470C 90A9      LD	R10,Y+
    0470D 90B9      LD	R11,Y+
    0470E 90C9      LD	R12,Y+
    0470F 90D9      LD	R13,Y+
    04710 9149      LD	R20,Y+
    04711 9159      LD	R21,Y+
    04712 9169      LD	R22,Y+
    04713 9179      LD	R23,Y+
    04714 9508      RET
neg32:
    04715 9500      COM	R16
    04716 9510      COM	R17
    04717 9520      COM	R18
    04718 9530      COM	R19
    04719 5F0F      SUBI	R16,0xFF
    0471A 4F1F      SBCI	R17,0xFF
    0471B 4F2F      SBCI	R18,0xFF
    0471C 4F3F      SBCI	R19,0xFF
    0471D 9508      RET
long_prolog:
    0471E 928A      ST	-Y,R8
    0471F 929A      ST	-Y,R9
    04720 92AA      ST	-Y,R10
    04721 92BA      ST	-Y,R11
    04722 93EA      ST	-Y,R30
    04723 938A      ST	-Y,R24
    04724 939A      ST	-Y,R25
    04725 93AA      ST	-Y,R26
    04726 93BA      ST	-Y,R27
    04727 8589      LDD	R24,Y+9
    04728 859A      LDD	R25,Y+10
    04729 85AB      LDD	R26,Y+11
    0472A 85BC      LDD	R27,Y+12
    0472B 9508      RET
long_epilog:
    0472C 91B9      LD	R27,Y+
    0472D 91A9      LD	R26,Y+
    0472E 9199      LD	R25,Y+
    0472F 9189      LD	R24,Y+
    04730 91E9      LD	R30,Y+
    04731 90B9      LD	R11,Y+
    04732 90A9      LD	R10,Y+
    04733 9099      LD	R9,Y+
    04734 9089      LD	R8,Y+
    04735 9624      ADIW	R28,4
    04736 9508      RET
tstzero1:
    04737 27EE      CLR	R30
    04738 2BE0      OR	R30,R16
    04739 2BE1      OR	R30,R17
    0473A 2BE2      OR	R30,R18
    0473B 2BE3      OR	R30,R19
    0473C 9508      RET
tstzero2:
    0473D 27EE      CLR	R30
    0473E 2BE8      OR	R30,R24
    0473F 2BE9      OR	R30,R25
    04740 2BEA      OR	R30,R26
    04741 2BEB      OR	R30,R27
    04742 9508      RET
lsl8:
    04743 2311      TST	R17
    04744 F019      BEQ	0x4748
    04745 0F00      LSL	R16
    04746 951A      DEC	R17
    04747 CFFB      RJMP	lsl8
    04748 9508      RET
